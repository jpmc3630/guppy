import{h as se,F as Ct,i as Rt,o as Dt,a as At,b as xt,r as de,g as Fe,c as ge,w as nt,d as rt,T as at,e as Ht}from"./index.fc2d0cf9.js";/*!
  * @intlify/shared v9.1.9
  * (c) 2021 kazuya kawaguchi
  * Released under the MIT License.
  */const jt=typeof Symbol=="function"&&typeof Symbol.toStringTag=="symbol",X=e=>jt?Symbol(e):e,Ut=(e,t,r)=>Vt({l:e,k:t,s:r}),Vt=e=>JSON.stringify(e).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029").replace(/\u0027/g,"\\u0027"),D=e=>typeof e=="number"&&isFinite(e),Jt=e=>Ye(e)==="[object Date]",le=e=>Ye(e)==="[object RegExp]",Se=e=>M(e)&&Object.keys(e).length===0;function Kt(e,t){typeof console!="undefined"&&(console.warn("[intlify] "+e),t&&console.warn(t.stack))}const H=Object.assign;function st(e){return e.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;")}const Gt=Object.prototype.hasOwnProperty;function wt(e,t){return Gt.call(e,t)}const R=Array.isArray,x=e=>typeof e=="function",F=e=>typeof e=="string",E=e=>typeof e=="boolean",J=e=>e!==null&&typeof e=="object",Ot=Object.prototype.toString,Ye=e=>Ot.call(e),M=e=>Ye(e)==="[object Object]",qt=e=>e==null?"":R(e)||M(e)&&e.toString===Ot?JSON.stringify(e,null,2):String(e);/*!
  * @intlify/message-resolver v9.1.9
  * (c) 2021 kazuya kawaguchi
  * Released under the MIT License.
  */const Bt=Object.prototype.hasOwnProperty;function Yt(e,t){return Bt.call(e,t)}const Le=e=>e!==null&&typeof e=="object",ee=[];ee[0]={w:[0],i:[3,0],["["]:[4],o:[7]};ee[1]={w:[1],["."]:[2],["["]:[4],o:[7]};ee[2]={w:[2],i:[3,0],["0"]:[3,0]};ee[3]={i:[3,0],["0"]:[3,0],w:[1,1],["."]:[2,1],["["]:[4,1],o:[7,1]};ee[4]={["'"]:[5,0],['"']:[6,0],["["]:[4,2],["]"]:[1,3],o:8,l:[4,0]};ee[5]={["'"]:[4,0],o:8,l:[5,0]};ee[6]={['"']:[4,0],o:8,l:[6,0]};const Zt=/^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;function Qt(e){return Zt.test(e)}function Xt(e){const t=e.charCodeAt(0),r=e.charCodeAt(e.length-1);return t===r&&(t===34||t===39)?e.slice(1,-1):e}function zt(e){if(e==null)return"o";switch(e.charCodeAt(0)){case 91:case 93:case 46:case 34:case 39:return e;case 95:case 36:case 45:return"i";case 9:case 10:case 13:case 160:case 65279:case 8232:case 8233:return"w"}return"i"}function en(e){const t=e.trim();return e.charAt(0)==="0"&&isNaN(parseInt(e))?!1:Qt(t)?Xt(t):"*"+t}function tn(e){const t=[];let r=-1,n=0,s=0,a,i,u,m,b,T,v;const L=[];L[0]=()=>{i===void 0?i=u:i+=u},L[1]=()=>{i!==void 0&&(t.push(i),i=void 0)},L[2]=()=>{L[0](),s++},L[3]=()=>{if(s>0)s--,n=4,L[0]();else{if(s=0,i===void 0||(i=en(i),i===!1))return!1;L[1]()}};function I(){const N=e[r+1];if(n===5&&N==="'"||n===6&&N==='"')return r++,u="\\"+N,L[0](),!0}for(;n!==null;)if(r++,a=e[r],!(a==="\\"&&I())){if(m=zt(a),v=ee[n],b=v[m]||v.l||8,b===8||(n=b[0],b[1]!==void 0&&(T=L[b[1]],T&&(u=a,T()===!1))))return;if(n===7)return t}}const lt=new Map;function ve(e,t){if(!Le(e))return null;let r=lt.get(t);if(r||(r=tn(t),r&&lt.set(t,r)),!r)return null;const n=r.length;let s=e,a=0;for(;a<n;){const i=s[r[a]];if(i===void 0)return null;s=i,a++}return s}function He(e){if(!Le(e))return e;for(const t in e)if(!!Yt(e,t))if(!t.includes("."))Le(e[t])&&He(e[t]);else{const r=t.split("."),n=r.length-1;let s=e;for(let a=0;a<n;a++)r[a]in s||(s[r[a]]={}),s=s[r[a]];s[r[n]]=e[t],delete e[t],Le(s[r[n]])&&He(s[r[n]])}return e}/*!
  * @intlify/runtime v9.1.9
  * (c) 2021 kazuya kawaguchi
  * Released under the MIT License.
  */const nn=e=>e,rn=e=>"",an="text",sn=e=>e.length===0?"":e.join(""),ln=qt;function ct(e,t){return e=Math.abs(e),t===2?e?e>1?1:0:1:e?Math.min(e,2):0}function cn(e){const t=D(e.pluralIndex)?e.pluralIndex:-1;return e.named&&(D(e.named.count)||D(e.named.n))?D(e.named.count)?e.named.count:D(e.named.n)?e.named.n:t:t}function un(e,t){t.count||(t.count=e),t.n||(t.n=e)}function on(e={}){const t=e.locale,r=cn(e),n=J(e.pluralRules)&&F(t)&&x(e.pluralRules[t])?e.pluralRules[t]:ct,s=J(e.pluralRules)&&F(t)&&x(e.pluralRules[t])?ct:void 0,a=h=>h[n(r,h.length,s)],i=e.list||[],u=h=>i[h],m=e.named||{};D(e.pluralIndex)&&un(r,m);const b=h=>m[h];function T(h){const o=x(e.messages)?e.messages(h):J(e.messages)?e.messages[h]:!1;return o||(e.parent?e.parent.message(h):rn)}const v=h=>e.modifiers?e.modifiers[h]:nn,L=M(e.processor)&&x(e.processor.normalize)?e.processor.normalize:sn,I=M(e.processor)&&x(e.processor.interpolate)?e.processor.interpolate:ln,N=M(e.processor)&&F(e.processor.type)?e.processor.type:an,C={list:u,named:b,plural:a,linked:(h,o)=>{const _=T(h)(C);return F(o)?v(o)(_):_},message:T,type:N,interpolate:I,normalize:L};return C}/*!
  * @intlify/message-compiler v9.1.9
  * (c) 2021 kazuya kawaguchi
  * Released under the MIT License.
  */function Ce(e,t,r={}){const{domain:n,messages:s,args:a}=r,i=e,u=new SyntaxError(String(i));return u.code=e,t&&(u.location=t),u.domain=n,u}function fn(e){throw e}function mn(e,t,r){return{line:e,column:t,offset:r}}function je(e,t,r){const n={start:e,end:t};return r!=null&&(n.source=r),n}const Q=" ",dn="\r",V=`
`,gn=String.fromCharCode(8232),bn=String.fromCharCode(8233);function _n(e){const t=e;let r=0,n=1,s=1,a=0;const i=O=>t[O]===dn&&t[O+1]===V,u=O=>t[O]===V,m=O=>t[O]===bn,b=O=>t[O]===gn,T=O=>i(O)||u(O)||m(O)||b(O),v=()=>r,L=()=>n,I=()=>s,N=()=>a,C=O=>i(O)||m(O)||b(O)?V:t[O],h=()=>C(r),o=()=>C(r+a);function _(){return a=0,T(r)&&(n++,s=0),i(r)&&r++,r++,s++,t[r]}function y(){return i(r+a)&&a++,a++,t[r+a]}function f(){r=0,n=1,s=1,a=0}function S(O=0){a=O}function w(){const O=r+a;for(;O!==r;)_();a=0}return{index:v,line:L,column:I,peekOffset:N,charAt:C,currentChar:h,currentPeek:o,next:_,peek:y,reset:f,resetPeek:S,skipToPeek:w}}const z=void 0,it="'",hn="tokenizer";function kn(e,t={}){const r=t.location!==!1,n=_n(e),s=()=>n.index(),a=()=>mn(n.line(),n.column(),n.index()),i=a(),u=s(),m={currentType:14,offset:u,startLoc:i,endLoc:i,lastType:14,lastOffset:u,lastStartLoc:i,lastEndLoc:i,braceNest:0,inLinked:!1,text:""},b=()=>m,{onError:T}=t;function v(l,c,d,...p){const P=b();if(c.column+=d,c.offset+=d,T){const W=je(P.startLoc,c),G=Ce(l,W,{domain:hn,args:p});T(G)}}function L(l,c,d){l.endLoc=a(),l.currentType=c;const p={type:c};return r&&(p.loc=je(l.startLoc,l.endLoc)),d!=null&&(p.value=d),p}const I=l=>L(l,14);function N(l,c){return l.currentChar()===c?(l.next(),c):(v(0,a(),0,c),"")}function C(l){let c="";for(;l.currentPeek()===Q||l.currentPeek()===V;)c+=l.currentPeek(),l.peek();return c}function h(l){const c=C(l);return l.skipToPeek(),c}function o(l){if(l===z)return!1;const c=l.charCodeAt(0);return c>=97&&c<=122||c>=65&&c<=90||c===95}function _(l){if(l===z)return!1;const c=l.charCodeAt(0);return c>=48&&c<=57}function y(l,c){const{currentType:d}=c;if(d!==2)return!1;C(l);const p=o(l.currentPeek());return l.resetPeek(),p}function f(l,c){const{currentType:d}=c;if(d!==2)return!1;C(l);const p=l.currentPeek()==="-"?l.peek():l.currentPeek(),P=_(p);return l.resetPeek(),P}function S(l,c){const{currentType:d}=c;if(d!==2)return!1;C(l);const p=l.currentPeek()===it;return l.resetPeek(),p}function w(l,c){const{currentType:d}=c;if(d!==8)return!1;C(l);const p=l.currentPeek()===".";return l.resetPeek(),p}function O(l,c){const{currentType:d}=c;if(d!==9)return!1;C(l);const p=o(l.currentPeek());return l.resetPeek(),p}function A(l,c){const{currentType:d}=c;if(!(d===8||d===12))return!1;C(l);const p=l.currentPeek()===":";return l.resetPeek(),p}function $(l,c){const{currentType:d}=c;if(d!==10)return!1;const p=()=>{const W=l.currentPeek();return W==="{"?o(l.peek()):W==="@"||W==="%"||W==="|"||W===":"||W==="."||W===Q||!W?!1:W===V?(l.peek(),p()):o(W)},P=p();return l.resetPeek(),P}function K(l){C(l);const c=l.currentPeek()==="|";return l.resetPeek(),c}function ie(l,c=!0){const d=(P=!1,W="",G=!1)=>{const Z=l.currentPeek();return Z==="{"?W==="%"?!1:P:Z==="@"||!Z?W==="%"?!0:P:Z==="%"?(l.peek(),d(P,"%",!0)):Z==="|"?W==="%"||G?!0:!(W===Q||W===V):Z===Q?(l.peek(),d(!0,Q,G)):Z===V?(l.peek(),d(!0,V,G)):!0},p=d();return c&&l.resetPeek(),p}function te(l,c){const d=l.currentChar();return d===z?z:c(d)?(l.next(),d):null}function he(l){return te(l,d=>{const p=d.charCodeAt(0);return p>=97&&p<=122||p>=65&&p<=90||p>=48&&p<=57||p===95||p===36})}function Oe(l){return te(l,d=>{const p=d.charCodeAt(0);return p>=48&&p<=57})}function Pe(l){return te(l,d=>{const p=d.charCodeAt(0);return p>=48&&p<=57||p>=65&&p<=70||p>=97&&p<=102})}function Y(l){let c="",d="";for(;c=Oe(l);)d+=c;return d}function ke(l){let c="";for(;;){const d=l.currentChar();if(d==="{"||d==="}"||d==="@"||d==="|"||!d)break;if(d==="%")if(ie(l))c+=d,l.next();else break;else if(d===Q||d===V)if(ie(l))c+=d,l.next();else{if(K(l))break;c+=d,l.next()}else c+=d,l.next()}return c}function Me(l){h(l);let c="",d="";for(;c=he(l);)d+=c;return l.currentChar()===z&&v(6,a(),0),d}function Ie(l){h(l);let c="";return l.currentChar()==="-"?(l.next(),c+=`-${Y(l)}`):c+=Y(l),l.currentChar()===z&&v(6,a(),0),c}function Ne(l){h(l),N(l,"'");let c="",d="";const p=W=>W!==it&&W!==V;for(;c=te(l,p);)c==="\\"?d+=We(l):d+=c;const P=l.currentChar();return P===V||P===z?(v(2,a(),0),P===V&&(l.next(),N(l,"'")),d):(N(l,"'"),d)}function We(l){const c=l.currentChar();switch(c){case"\\":case"'":return l.next(),`\\${c}`;case"u":return Ee(l,c,4);case"U":return Ee(l,c,6);default:return v(3,a(),0,c),""}}function Ee(l,c,d){N(l,c);let p="";for(let P=0;P<d;P++){const W=Pe(l);if(!W){v(4,a(),0,`\\${c}${p}${l.currentChar()}`);break}p+=W}return`\\${c}${p}`}function $e(l){h(l);let c="",d="";const p=P=>P!=="{"&&P!=="}"&&P!==Q&&P!==V;for(;c=te(l,p);)d+=c;return d}function Re(l){let c="",d="";for(;c=he(l);)d+=c;return d}function De(l){const c=(d=!1,p)=>{const P=l.currentChar();return P==="{"||P==="%"||P==="@"||P==="|"||!P||P===Q?p:P===V?(p+=P,l.next(),c(d,p)):(p+=P,l.next(),c(!0,p))};return c(!1,"")}function ue(l){h(l);const c=N(l,"|");return h(l),c}function oe(l,c){let d=null;switch(l.currentChar()){case"{":return c.braceNest>=1&&v(8,a(),0),l.next(),d=L(c,2,"{"),h(l),c.braceNest++,d;case"}":return c.braceNest>0&&c.currentType===2&&v(7,a(),0),l.next(),d=L(c,3,"}"),c.braceNest--,c.braceNest>0&&h(l),c.inLinked&&c.braceNest===0&&(c.inLinked=!1),d;case"@":return c.braceNest>0&&v(6,a(),0),d=re(l,c)||I(c),c.braceNest=0,d;default:let P=!0,W=!0,G=!0;if(K(l))return c.braceNest>0&&v(6,a(),0),d=L(c,1,ue(l)),c.braceNest=0,c.inLinked=!1,d;if(c.braceNest>0&&(c.currentType===5||c.currentType===6||c.currentType===7))return v(6,a(),0),c.braceNest=0,fe(l,c);if(P=y(l,c))return d=L(c,5,Me(l)),h(l),d;if(W=f(l,c))return d=L(c,6,Ie(l)),h(l),d;if(G=S(l,c))return d=L(c,7,Ne(l)),h(l),d;if(!P&&!W&&!G)return d=L(c,13,$e(l)),v(1,a(),0,d.value),h(l),d;break}return d}function re(l,c){const{currentType:d}=c;let p=null;const P=l.currentChar();switch((d===8||d===9||d===12||d===10)&&(P===V||P===Q)&&v(9,a(),0),P){case"@":return l.next(),p=L(c,8,"@"),c.inLinked=!0,p;case".":return h(l),l.next(),L(c,9,".");case":":return h(l),l.next(),L(c,10,":");default:return K(l)?(p=L(c,1,ue(l)),c.braceNest=0,c.inLinked=!1,p):w(l,c)||A(l,c)?(h(l),re(l,c)):O(l,c)?(h(l),L(c,12,Re(l))):$(l,c)?(h(l),P==="{"?oe(l,c)||p:L(c,11,De(l))):(d===8&&v(9,a(),0),c.braceNest=0,c.inLinked=!1,fe(l,c))}}function fe(l,c){let d={type:14};if(c.braceNest>0)return oe(l,c)||I(c);if(c.inLinked)return re(l,c)||I(c);const p=l.currentChar();switch(p){case"{":return oe(l,c)||I(c);case"}":return v(5,a(),0),l.next(),L(c,3,"}");case"@":return re(l,c)||I(c);default:if(K(l))return d=L(c,1,ue(l)),c.braceNest=0,c.inLinked=!1,d;if(ie(l))return L(c,0,ke(l));if(p==="%")return l.next(),L(c,4,"%");break}return d}function Ae(){const{currentType:l,offset:c,startLoc:d,endLoc:p}=m;return m.lastType=l,m.lastOffset=c,m.lastStartLoc=d,m.lastEndLoc=p,m.offset=s(),m.startLoc=a(),n.currentChar()===z?L(m,14):fe(n,m)}return{nextToken:Ae,currentOffset:s,currentPosition:a,context:b}}const yn="parser",pn=/(?:\\\\|\\'|\\u([0-9a-fA-F]{4})|\\U([0-9a-fA-F]{6}))/g;function Ln(e,t,r){switch(e){case"\\\\":return"\\";case"\\'":return"'";default:{const n=parseInt(t||r,16);return n<=55295||n>=57344?String.fromCodePoint(n):"\uFFFD"}}}function Fn(e={}){const t=e.location!==!1,{onError:r}=e;function n(o,_,y,f,...S){const w=o.currentPosition();if(w.offset+=f,w.column+=f,r){const O=je(y,w),A=Ce(_,O,{domain:yn,args:S});r(A)}}function s(o,_,y){const f={type:o,start:_,end:_};return t&&(f.loc={start:y,end:y}),f}function a(o,_,y,f){o.end=_,f&&(o.type=f),t&&o.loc&&(o.loc.end=y)}function i(o,_){const y=o.context(),f=s(3,y.offset,y.startLoc);return f.value=_,a(f,o.currentOffset(),o.currentPosition()),f}function u(o,_){const y=o.context(),{lastOffset:f,lastStartLoc:S}=y,w=s(5,f,S);return w.index=parseInt(_,10),o.nextToken(),a(w,o.currentOffset(),o.currentPosition()),w}function m(o,_){const y=o.context(),{lastOffset:f,lastStartLoc:S}=y,w=s(4,f,S);return w.key=_,o.nextToken(),a(w,o.currentOffset(),o.currentPosition()),w}function b(o,_){const y=o.context(),{lastOffset:f,lastStartLoc:S}=y,w=s(9,f,S);return w.value=_.replace(pn,Ln),o.nextToken(),a(w,o.currentOffset(),o.currentPosition()),w}function T(o){const _=o.nextToken(),y=o.context(),{lastOffset:f,lastStartLoc:S}=y,w=s(8,f,S);return _.type!==12?(n(o,11,y.lastStartLoc,0),w.value="",a(w,f,S),{nextConsumeToken:_,node:w}):(_.value==null&&n(o,13,y.lastStartLoc,0,B(_)),w.value=_.value||"",a(w,o.currentOffset(),o.currentPosition()),{node:w})}function v(o,_){const y=o.context(),f=s(7,y.offset,y.startLoc);return f.value=_,a(f,o.currentOffset(),o.currentPosition()),f}function L(o){const _=o.context(),y=s(6,_.offset,_.startLoc);let f=o.nextToken();if(f.type===9){const S=T(o);y.modifier=S.node,f=S.nextConsumeToken||o.nextToken()}switch(f.type!==10&&n(o,13,_.lastStartLoc,0,B(f)),f=o.nextToken(),f.type===2&&(f=o.nextToken()),f.type){case 11:f.value==null&&n(o,13,_.lastStartLoc,0,B(f)),y.key=v(o,f.value||"");break;case 5:f.value==null&&n(o,13,_.lastStartLoc,0,B(f)),y.key=m(o,f.value||"");break;case 6:f.value==null&&n(o,13,_.lastStartLoc,0,B(f)),y.key=u(o,f.value||"");break;case 7:f.value==null&&n(o,13,_.lastStartLoc,0,B(f)),y.key=b(o,f.value||"");break;default:n(o,12,_.lastStartLoc,0);const S=o.context(),w=s(7,S.offset,S.startLoc);return w.value="",a(w,S.offset,S.startLoc),y.key=w,a(y,S.offset,S.startLoc),{nextConsumeToken:f,node:y}}return a(y,o.currentOffset(),o.currentPosition()),{node:y}}function I(o){const _=o.context(),y=_.currentType===1?o.currentOffset():_.offset,f=_.currentType===1?_.endLoc:_.startLoc,S=s(2,y,f);S.items=[];let w=null;do{const $=w||o.nextToken();switch(w=null,$.type){case 0:$.value==null&&n(o,13,_.lastStartLoc,0,B($)),S.items.push(i(o,$.value||""));break;case 6:$.value==null&&n(o,13,_.lastStartLoc,0,B($)),S.items.push(u(o,$.value||""));break;case 5:$.value==null&&n(o,13,_.lastStartLoc,0,B($)),S.items.push(m(o,$.value||""));break;case 7:$.value==null&&n(o,13,_.lastStartLoc,0,B($)),S.items.push(b(o,$.value||""));break;case 8:const K=L(o);S.items.push(K.node),w=K.nextConsumeToken||null;break}}while(_.currentType!==14&&_.currentType!==1);const O=_.currentType===1?_.lastOffset:o.currentOffset(),A=_.currentType===1?_.lastEndLoc:o.currentPosition();return a(S,O,A),S}function N(o,_,y,f){const S=o.context();let w=f.items.length===0;const O=s(1,_,y);O.cases=[],O.cases.push(f);do{const A=I(o);w||(w=A.items.length===0),O.cases.push(A)}while(S.currentType!==14);return w&&n(o,10,y,0),a(O,o.currentOffset(),o.currentPosition()),O}function C(o){const _=o.context(),{offset:y,startLoc:f}=_,S=I(o);return _.currentType===14?S:N(o,y,f,S)}function h(o){const _=kn(o,H({},e)),y=_.context(),f=s(0,y.offset,y.startLoc);return t&&f.loc&&(f.loc.source=o),f.body=C(_),y.currentType!==14&&n(_,13,y.lastStartLoc,0,o[y.offset]||""),a(f,_.currentOffset(),_.currentPosition()),f}return{parse:h}}function B(e){if(e.type===14)return"EOF";const t=(e.value||"").replace(/\r?\n/gu,"\\n");return t.length>10?t.slice(0,9)+"\u2026":t}function vn(e,t={}){const r={ast:e,helpers:new Set};return{context:()=>r,helper:a=>(r.helpers.add(a),a)}}function ut(e,t){for(let r=0;r<e.length;r++)Ze(e[r],t)}function Ze(e,t){switch(e.type){case 1:ut(e.cases,t),t.helper("plural");break;case 2:ut(e.items,t);break;case 6:Ze(e.key,t),t.helper("linked");break;case 5:t.helper("interpolate"),t.helper("list");break;case 4:t.helper("interpolate"),t.helper("named");break}}function Tn(e,t={}){const r=vn(e);r.helper("normalize"),e.body&&Ze(e.body,r);const n=r.context();e.helpers=Array.from(n.helpers)}function Sn(e,t){const{sourceMap:r,filename:n,breakLineCode:s,needIndent:a}=t,i={source:e.loc.source,filename:n,code:"",column:1,line:1,offset:0,map:void 0,breakLineCode:s,needIndent:a,indentLevel:0},u=()=>i;function m(C,h){i.code+=C}function b(C,h=!0){const o=h?s:"";m(a?o+"  ".repeat(C):o)}function T(C=!0){const h=++i.indentLevel;C&&b(h)}function v(C=!0){const h=--i.indentLevel;C&&b(h)}function L(){b(i.indentLevel)}return{context:u,push:m,indent:T,deindent:v,newline:L,helper:C=>`_${C}`,needIndent:()=>i.needIndent}}function Cn(e,t){const{helper:r}=e;e.push(`${r("linked")}(`),ce(e,t.key),t.modifier&&(e.push(", "),ce(e,t.modifier)),e.push(")")}function wn(e,t){const{helper:r,needIndent:n}=e;e.push(`${r("normalize")}([`),e.indent(n());const s=t.items.length;for(let a=0;a<s&&(ce(e,t.items[a]),a!==s-1);a++)e.push(", ");e.deindent(n()),e.push("])")}function On(e,t){const{helper:r,needIndent:n}=e;if(t.cases.length>1){e.push(`${r("plural")}([`),e.indent(n());const s=t.cases.length;for(let a=0;a<s&&(ce(e,t.cases[a]),a!==s-1);a++)e.push(", ");e.deindent(n()),e.push("])")}}function Pn(e,t){t.body?ce(e,t.body):e.push("null")}function ce(e,t){const{helper:r}=e;switch(t.type){case 0:Pn(e,t);break;case 1:On(e,t);break;case 2:wn(e,t);break;case 6:Cn(e,t);break;case 8:e.push(JSON.stringify(t.value),t);break;case 7:e.push(JSON.stringify(t.value),t);break;case 5:e.push(`${r("interpolate")}(${r("list")}(${t.index}))`,t);break;case 4:e.push(`${r("interpolate")}(${r("named")}(${JSON.stringify(t.key)}))`,t);break;case 9:e.push(JSON.stringify(t.value),t);break;case 3:e.push(JSON.stringify(t.value),t);break}}const Mn=(e,t={})=>{const r=F(t.mode)?t.mode:"normal",n=F(t.filename)?t.filename:"message.intl",s=!!t.sourceMap,a=t.breakLineCode!=null?t.breakLineCode:r==="arrow"?";":`
`,i=t.needIndent?t.needIndent:r!=="arrow",u=e.helpers||[],m=Sn(e,{mode:r,filename:n,sourceMap:s,breakLineCode:a,needIndent:i});m.push(r==="normal"?"function __msg__ (ctx) {":"(ctx) => {"),m.indent(i),u.length>0&&(m.push(`const { ${u.map(v=>`${v}: _${v}`).join(", ")} } = ctx`),m.newline()),m.push("return "),ce(m,e),m.deindent(i),m.push("}");const{code:b,map:T}=m.context();return{ast:e,code:b,map:T?T.toJSON():void 0}};function In(e,t={}){const r=H({},t),s=Fn(r).parse(e);return Tn(s,r),Mn(s,r)}/*!
  * @intlify/devtools-if v9.1.9
  * (c) 2021 kazuya kawaguchi
  * Released under the MIT License.
  */const Nn={I18nInit:"i18n:init",FunctionTranslate:"function:translate"};/*!
  * @intlify/core-base v9.1.9
  * (c) 2021 kazuya kawaguchi
  * Released under the MIT License.
  */let Wn=null;Nn.FunctionTranslate;function En(e){return t=>Wn}const $n="9.1.9",we=-1,ot="";function Rn(){return{upper:e=>F(e)?e.toUpperCase():e,lower:e=>F(e)?e.toLowerCase():e,capitalize:e=>F(e)?`${e.charAt(0).toLocaleUpperCase()}${e.substr(1)}`:e}}let Pt;function Dn(e){Pt=e}let ft=0;function An(e={}){const t=F(e.version)?e.version:$n,r=F(e.locale)?e.locale:"en-US",n=R(e.fallbackLocale)||M(e.fallbackLocale)||F(e.fallbackLocale)||e.fallbackLocale===!1?e.fallbackLocale:r,s=M(e.messages)?e.messages:{[r]:{}},a=M(e.datetimeFormats)?e.datetimeFormats:{[r]:{}},i=M(e.numberFormats)?e.numberFormats:{[r]:{}},u=H({},e.modifiers||{},Rn()),m=e.pluralRules||{},b=x(e.missing)?e.missing:null,T=E(e.missingWarn)||le(e.missingWarn)?e.missingWarn:!0,v=E(e.fallbackWarn)||le(e.fallbackWarn)?e.fallbackWarn:!0,L=!!e.fallbackFormat,I=!!e.unresolving,N=x(e.postTranslation)?e.postTranslation:null,C=M(e.processor)?e.processor:null,h=E(e.warnHtmlMessage)?e.warnHtmlMessage:!0,o=!!e.escapeParameter,_=x(e.messageCompiler)?e.messageCompiler:Pt,y=x(e.onWarn)?e.onWarn:Kt,f=e,S=J(f.__datetimeFormatters)?f.__datetimeFormatters:new Map,w=J(f.__numberFormatters)?f.__numberFormatters:new Map,O=J(f.__meta)?f.__meta:{};return ft++,{version:t,cid:ft,locale:r,fallbackLocale:n,messages:s,datetimeFormats:a,numberFormats:i,modifiers:u,pluralRules:m,missing:b,missingWarn:T,fallbackWarn:v,fallbackFormat:L,unresolving:I,postTranslation:N,processor:C,warnHtmlMessage:h,escapeParameter:o,messageCompiler:_,onWarn:y,__datetimeFormatters:S,__numberFormatters:w,__meta:O}}function Qe(e,t,r,n,s){const{missing:a,onWarn:i}=e;if(a!==null){const u=a(e,r,t,s);return F(u)?u:t}else return t}function _e(e,t,r){const n=e;n.__localeChainCache||(n.__localeChainCache=new Map);let s=n.__localeChainCache.get(r);if(!s){s=[];let a=[r];for(;R(a);)a=mt(s,a,t);const i=R(t)?t:M(t)?t.default?t.default:null:t;a=F(i)?[i]:i,R(a)&&mt(s,a,!1),n.__localeChainCache.set(r,s)}return s}function mt(e,t,r){let n=!0;for(let s=0;s<t.length&&E(n);s++){const a=t[s];F(a)&&(n=xn(e,t[s],r))}return n}function xn(e,t,r){let n;const s=t.split("-");do{const a=s.join("-");n=Hn(e,a,r),s.splice(-1,1)}while(s.length&&n===!0);return n}function Hn(e,t,r){let n=!1;if(!e.includes(t)&&(n=!0,t)){n=t[t.length-1]!=="!";const s=t.replace(/!/g,"");e.push(s),(R(r)||M(r))&&r[s]&&(n=r[s])}return n}function be(e,t,r){const n=e;n.__localeChainCache=new Map,_e(e,r,t)}const jn=e=>e;let dt=Object.create(null);function Un(e,t={}){{const n=(t.onCacheKey||jn)(e),s=dt[n];if(s)return s;let a=!1;const i=t.onError||fn;t.onError=b=>{a=!0,i(b)};const{code:u}=In(e,t),m=new Function(`return ${u}`)();return a?m:dt[n]=m}}function ae(e){return Ce(e,null,void 0)}const gt=()=>"",ne=e=>x(e);function bt(e,...t){const{fallbackFormat:r,postTranslation:n,unresolving:s,fallbackLocale:a,messages:i}=e,[u,m]=Ue(...t),b=E(m.missingWarn)?m.missingWarn:e.missingWarn,T=E(m.fallbackWarn)?m.fallbackWarn:e.fallbackWarn,v=E(m.escapeParameter)?m.escapeParameter:e.escapeParameter,L=!!m.resolvedMessage,I=F(m.default)||E(m.default)?E(m.default)?u:m.default:r?u:"",N=r||I!=="",C=F(m.locale)?m.locale:e.locale;v&&Vn(m);let[h,o,_]=L?[u,C,i[C]||{}]:Jn(e,u,C,a,T,b),y=u;if(!L&&!(F(h)||ne(h))&&N&&(h=I,y=h),!L&&(!(F(h)||ne(h))||!F(o)))return s?we:u;let f=!1;const S=()=>{f=!0},w=ne(h)?h:Mt(e,u,o,h,y,S);if(f)return h;const O=qn(e,o,_,m),A=on(O),$=Kn(e,w,A);return n?n($):$}function Vn(e){R(e.list)?e.list=e.list.map(t=>F(t)?st(t):t):J(e.named)&&Object.keys(e.named).forEach(t=>{F(e.named[t])&&(e.named[t]=st(e.named[t]))})}function Jn(e,t,r,n,s,a){const{messages:i,onWarn:u}=e,m=_e(e,n,r);let b={},T,v=null;const L="translate";for(let I=0;I<m.length&&(T=m[I],b=i[T]||{},(v=ve(b,t))===null&&(v=b[t]),!(F(v)||x(v)));I++){const N=Qe(e,t,T,a,L);N!==t&&(v=N)}return[v,T,b]}function Mt(e,t,r,n,s,a){const{messageCompiler:i,warnHtmlMessage:u}=e;if(ne(n)){const b=n;return b.locale=b.locale||r,b.key=b.key||t,b}const m=i(n,Gn(e,r,s,n,u,a));return m.locale=r,m.key=t,m.source=n,m}function Kn(e,t,r){return t(r)}function Ue(...e){const[t,r,n]=e,s={};if(!F(t)&&!D(t)&&!ne(t))throw ae(14);const a=D(t)?String(t):(ne(t),t);return D(r)?s.plural=r:F(r)?s.default=r:M(r)&&!Se(r)?s.named=r:R(r)&&(s.list=r),D(n)?s.plural=n:F(n)?s.default=n:M(n)&&H(s,n),[a,s]}function Gn(e,t,r,n,s,a){return{warnHtmlMessage:s,onError:i=>{throw a&&a(i),i},onCacheKey:i=>Ut(t,r,i)}}function qn(e,t,r,n){const{modifiers:s,pluralRules:a}=e,u={locale:t,modifiers:s,pluralRules:a,messages:m=>{const b=ve(r,m);if(F(b)){let T=!1;const L=Mt(e,m,t,b,m,()=>{T=!0});return T?gt:L}else return ne(b)?b:gt}};return e.processor&&(u.processor=e.processor),n.list&&(u.list=n.list),n.named&&(u.named=n.named),D(n.plural)&&(u.pluralIndex=n.plural),u}function _t(e,...t){const{datetimeFormats:r,unresolving:n,fallbackLocale:s,onWarn:a}=e,{__datetimeFormatters:i}=e,[u,m,b,T]=Ve(...t),v=E(b.missingWarn)?b.missingWarn:e.missingWarn;E(b.fallbackWarn)?b.fallbackWarn:e.fallbackWarn;const L=!!b.part,I=F(b.locale)?b.locale:e.locale,N=_e(e,s,I);if(!F(u)||u==="")return new Intl.DateTimeFormat(I).format(m);let C={},h,o=null;const _="datetime format";for(let S=0;S<N.length&&(h=N[S],C=r[h]||{},o=C[u],!M(o));S++)Qe(e,u,h,v,_);if(!M(o)||!F(h))return n?we:u;let y=`${h}__${u}`;Se(T)||(y=`${y}__${JSON.stringify(T)}`);let f=i.get(y);return f||(f=new Intl.DateTimeFormat(h,H({},o,T)),i.set(y,f)),L?f.formatToParts(m):f.format(m)}function Ve(...e){const[t,r,n,s]=e;let a={},i={},u;if(F(t)){if(!/\d{4}-\d{2}-\d{2}(T.*)?/.test(t))throw ae(16);u=new Date(t);try{u.toISOString()}catch{throw ae(16)}}else if(Jt(t)){if(isNaN(t.getTime()))throw ae(15);u=t}else if(D(t))u=t;else throw ae(14);return F(r)?a.key=r:M(r)&&(a=r),F(n)?a.locale=n:M(n)&&(i=n),M(s)&&(i=s),[a.key||"",u,a,i]}function ht(e,t,r){const n=e;for(const s in r){const a=`${t}__${s}`;!n.__datetimeFormatters.has(a)||n.__datetimeFormatters.delete(a)}}function kt(e,...t){const{numberFormats:r,unresolving:n,fallbackLocale:s,onWarn:a}=e,{__numberFormatters:i}=e,[u,m,b,T]=Je(...t),v=E(b.missingWarn)?b.missingWarn:e.missingWarn;E(b.fallbackWarn)?b.fallbackWarn:e.fallbackWarn;const L=!!b.part,I=F(b.locale)?b.locale:e.locale,N=_e(e,s,I);if(!F(u)||u==="")return new Intl.NumberFormat(I).format(m);let C={},h,o=null;const _="number format";for(let S=0;S<N.length&&(h=N[S],C=r[h]||{},o=C[u],!M(o));S++)Qe(e,u,h,v,_);if(!M(o)||!F(h))return n?we:u;let y=`${h}__${u}`;Se(T)||(y=`${y}__${JSON.stringify(T)}`);let f=i.get(y);return f||(f=new Intl.NumberFormat(h,H({},o,T)),i.set(y,f)),L?f.formatToParts(m):f.format(m)}function Je(...e){const[t,r,n,s]=e;let a={},i={};if(!D(t))throw ae(14);const u=t;return F(r)?a.key=r:M(r)&&(a=r),F(n)?a.locale=n:M(n)&&(i=n),M(s)&&(i=s),[a.key||"",u,a,i]}function yt(e,t,r){const n=e;for(const s in r){const a=`${t}__${s}`;!n.__numberFormatters.has(a)||n.__numberFormatters.delete(a)}}/*!
  * vue-i18n v9.1.9
  * (c) 2021 kazuya kawaguchi
  * Released under the MIT License.
  */const Bn="9.1.9";function j(e,...t){return Ce(e,null,void 0)}const Ke=X("__transrateVNode"),Ge=X("__datetimeParts"),qe=X("__numberParts");X("__enableEmitter");X("__disableEmitter");const It=X("__setPluralRules");X("__intlifyMeta");const Nt=X("__injectWithOption");let pt=0;function Lt(e){return(t,r,n,s)=>e(r,n,Fe()||void 0,s)}function Xe(e,t){const{messages:r,__i18n:n}=t,s=M(r)?r:R(n)?{}:{[e]:{}};if(R(n)&&n.forEach(({locale:a,resource:i})=>{a?(s[a]=s[a]||{},Te(i,s[a])):Te(i,s)}),t.flatJson)for(const a in s)wt(s,a)&&He(s[a]);return s}const pe=e=>!J(e)||R(e);function Te(e,t){if(pe(e)||pe(t))throw j(20);for(const r in e)wt(e,r)&&(pe(e[r])||pe(t[r])?t[r]=e[r]:Te(e[r],t[r]))}function ze(e={}){const{__root:t}=e,r=t===void 0;let n=E(e.inheritLocale)?e.inheritLocale:!0;const s=de(t&&n?t.locale.value:F(e.locale)?e.locale:"en-US"),a=de(t&&n?t.fallbackLocale.value:F(e.fallbackLocale)||R(e.fallbackLocale)||M(e.fallbackLocale)||e.fallbackLocale===!1?e.fallbackLocale:s.value),i=de(Xe(s.value,e)),u=de(M(e.datetimeFormats)?e.datetimeFormats:{[s.value]:{}}),m=de(M(e.numberFormats)?e.numberFormats:{[s.value]:{}});let b=t?t.missingWarn:E(e.missingWarn)||le(e.missingWarn)?e.missingWarn:!0,T=t?t.fallbackWarn:E(e.fallbackWarn)||le(e.fallbackWarn)?e.fallbackWarn:!0,v=t?t.fallbackRoot:E(e.fallbackRoot)?e.fallbackRoot:!0,L=!!e.fallbackFormat,I=x(e.missing)?e.missing:null,N=x(e.missing)?Lt(e.missing):null,C=x(e.postTranslation)?e.postTranslation:null,h=E(e.warnHtmlMessage)?e.warnHtmlMessage:!0,o=!!e.escapeParameter;const _=t?t.modifiers:M(e.modifiers)?e.modifiers:{};let y=e.pluralRules||t&&t.pluralRules,f;function S(){return An({version:Bn,locale:s.value,fallbackLocale:a.value,messages:i.value,datetimeFormats:u.value,numberFormats:m.value,modifiers:_,pluralRules:y,missing:N===null?void 0:N,missingWarn:b,fallbackWarn:T,fallbackFormat:L,unresolving:!0,postTranslation:C===null?void 0:C,warnHtmlMessage:h,escapeParameter:o,__datetimeFormatters:M(f)?f.__datetimeFormatters:void 0,__numberFormatters:M(f)?f.__numberFormatters:void 0,__v_emitter:M(f)?f.__v_emitter:void 0,__meta:{framework:"vue"}})}f=S(),be(f,s.value,a.value);function w(){return[s.value,a.value,i.value,u.value,m.value]}const O=ge({get:()=>s.value,set:g=>{s.value=g,f.locale=s.value}}),A=ge({get:()=>a.value,set:g=>{a.value=g,f.fallbackLocale=a.value,be(f,s.value,g)}}),$=ge(()=>i.value),K=ge(()=>u.value),ie=ge(()=>m.value);function te(){return x(C)?C:null}function he(g){C=g,f.postTranslation=g}function Oe(){return I}function Pe(g){g!==null&&(N=Lt(g)),I=g,f.missing=N}function Y(g,k,q,U,xe,ye){w();let me;if(me=g(f),D(me)&&me===we){const[$t,gr]=k();return t&&v?U(t):xe($t)}else{if(ye(me))return me;throw j(14)}}function ke(...g){return Y(k=>bt(k,...g),()=>Ue(...g),"translate",k=>k.t(...g),k=>k,k=>F(k))}function Me(...g){const[k,q,U]=g;if(U&&!J(U))throw j(15);return ke(k,q,H({resolvedMessage:!0},U||{}))}function Ie(...g){return Y(k=>_t(k,...g),()=>Ve(...g),"datetime format",k=>k.d(...g),()=>ot,k=>F(k))}function Ne(...g){return Y(k=>kt(k,...g),()=>Je(...g),"number format",k=>k.n(...g),()=>ot,k=>F(k))}function We(g){return g.map(k=>F(k)?rt(at,null,k,0):k)}const $e={normalize:We,interpolate:g=>g,type:"vnode"};function Re(...g){return Y(k=>{let q;const U=k;try{U.processor=$e,q=bt(U,...g)}finally{U.processor=null}return q},()=>Ue(...g),"translate",k=>k[Ke](...g),k=>[rt(at,null,k,0)],k=>R(k))}function De(...g){return Y(k=>kt(k,...g),()=>Je(...g),"number format",k=>k[qe](...g),()=>[],k=>F(k)||R(k))}function ue(...g){return Y(k=>_t(k,...g),()=>Ve(...g),"datetime format",k=>k[Ge](...g),()=>[],k=>F(k)||R(k))}function oe(g){y=g,f.pluralRules=y}function re(g,k){const q=F(k)?k:s.value,U=l(q);return ve(U,g)!==null}function fe(g){let k=null;const q=_e(f,a.value,s.value);for(let U=0;U<q.length;U++){const xe=i.value[q[U]]||{},ye=ve(xe,g);if(ye!=null){k=ye;break}}return k}function Ae(g){const k=fe(g);return k!=null?k:t?t.tm(g)||{}:{}}function l(g){return i.value[g]||{}}function c(g,k){i.value[g]=k,f.messages=i.value}function d(g,k){i.value[g]=i.value[g]||{},Te(k,i.value[g]),f.messages=i.value}function p(g){return u.value[g]||{}}function P(g,k){u.value[g]=k,f.datetimeFormats=u.value,ht(f,g,k)}function W(g,k){u.value[g]=H(u.value[g]||{},k),f.datetimeFormats=u.value,ht(f,g,k)}function G(g){return m.value[g]||{}}function Z(g,k){m.value[g]=k,f.numberFormats=m.value,yt(f,g,k)}function Et(g,k){m.value[g]=H(m.value[g]||{},k),f.numberFormats=m.value,yt(f,g,k)}return pt++,t&&(nt(t.locale,g=>{n&&(s.value=g,f.locale=g,be(f,s.value,a.value))}),nt(t.fallbackLocale,g=>{n&&(a.value=g,f.fallbackLocale=g,be(f,s.value,a.value))})),{id:pt,locale:O,fallbackLocale:A,get inheritLocale(){return n},set inheritLocale(g){n=g,g&&t&&(s.value=t.locale.value,a.value=t.fallbackLocale.value,be(f,s.value,a.value))},get availableLocales(){return Object.keys(i.value).sort()},messages:$,datetimeFormats:K,numberFormats:ie,get modifiers(){return _},get pluralRules(){return y||{}},get isGlobal(){return r},get missingWarn(){return b},set missingWarn(g){b=g,f.missingWarn=b},get fallbackWarn(){return T},set fallbackWarn(g){T=g,f.fallbackWarn=T},get fallbackRoot(){return v},set fallbackRoot(g){v=g},get fallbackFormat(){return L},set fallbackFormat(g){L=g,f.fallbackFormat=L},get warnHtmlMessage(){return h},set warnHtmlMessage(g){h=g,f.warnHtmlMessage=g},get escapeParameter(){return o},set escapeParameter(g){o=g,f.escapeParameter=g},t:ke,rt:Me,d:Ie,n:Ne,te:re,tm:Ae,getLocaleMessage:l,setLocaleMessage:c,mergeLocaleMessage:d,getDateTimeFormat:p,setDateTimeFormat:P,mergeDateTimeFormat:W,getNumberFormat:G,setNumberFormat:Z,mergeNumberFormat:Et,getPostTranslationHandler:te,setPostTranslationHandler:he,getMissingHandler:Oe,setMissingHandler:Pe,[Ke]:Re,[qe]:De,[Ge]:ue,[It]:oe,[Nt]:e.__injectWithOption}}function Yn(e){const t=F(e.locale)?e.locale:"en-US",r=F(e.fallbackLocale)||R(e.fallbackLocale)||M(e.fallbackLocale)||e.fallbackLocale===!1?e.fallbackLocale:t,n=x(e.missing)?e.missing:void 0,s=E(e.silentTranslationWarn)||le(e.silentTranslationWarn)?!e.silentTranslationWarn:!0,a=E(e.silentFallbackWarn)||le(e.silentFallbackWarn)?!e.silentFallbackWarn:!0,i=E(e.fallbackRoot)?e.fallbackRoot:!0,u=!!e.formatFallbackMessages,m=M(e.modifiers)?e.modifiers:{},b=e.pluralizationRules,T=x(e.postTranslation)?e.postTranslation:void 0,v=F(e.warnHtmlInMessage)?e.warnHtmlInMessage!=="off":!0,L=!!e.escapeParameterHtml,I=E(e.sync)?e.sync:!0;let N=e.messages;if(M(e.sharedMessages)){const S=e.sharedMessages;N=Object.keys(S).reduce((O,A)=>{const $=O[A]||(O[A]={});return H($,S[A]),O},N||{})}const{__i18n:C,__root:h,__injectWithOption:o}=e,_=e.datetimeFormats,y=e.numberFormats,f=e.flatJson;return{locale:t,fallbackLocale:r,messages:N,flatJson:f,datetimeFormats:_,numberFormats:y,missing:n,missingWarn:s,fallbackWarn:a,fallbackRoot:i,fallbackFormat:u,modifiers:m,pluralRules:b,postTranslation:T,warnHtmlMessage:v,escapeParameter:L,inheritLocale:I,__i18n:C,__root:h,__injectWithOption:o}}function Be(e={}){const t=ze(Yn(e)),r={id:t.id,get locale(){return t.locale.value},set locale(n){t.locale.value=n},get fallbackLocale(){return t.fallbackLocale.value},set fallbackLocale(n){t.fallbackLocale.value=n},get messages(){return t.messages.value},get datetimeFormats(){return t.datetimeFormats.value},get numberFormats(){return t.numberFormats.value},get availableLocales(){return t.availableLocales},get formatter(){return{interpolate(){return[]}}},set formatter(n){},get missing(){return t.getMissingHandler()},set missing(n){t.setMissingHandler(n)},get silentTranslationWarn(){return E(t.missingWarn)?!t.missingWarn:t.missingWarn},set silentTranslationWarn(n){t.missingWarn=E(n)?!n:n},get silentFallbackWarn(){return E(t.fallbackWarn)?!t.fallbackWarn:t.fallbackWarn},set silentFallbackWarn(n){t.fallbackWarn=E(n)?!n:n},get modifiers(){return t.modifiers},get formatFallbackMessages(){return t.fallbackFormat},set formatFallbackMessages(n){t.fallbackFormat=n},get postTranslation(){return t.getPostTranslationHandler()},set postTranslation(n){t.setPostTranslationHandler(n)},get sync(){return t.inheritLocale},set sync(n){t.inheritLocale=n},get warnHtmlInMessage(){return t.warnHtmlMessage?"warn":"off"},set warnHtmlInMessage(n){t.warnHtmlMessage=n!=="off"},get escapeParameterHtml(){return t.escapeParameter},set escapeParameterHtml(n){t.escapeParameter=n},get preserveDirectiveContent(){return!0},set preserveDirectiveContent(n){},get pluralizationRules(){return t.pluralRules||{}},__composer:t,t(...n){const[s,a,i]=n,u={};let m=null,b=null;if(!F(s))throw j(15);const T=s;return F(a)?u.locale=a:R(a)?m=a:M(a)&&(b=a),R(i)?m=i:M(i)&&(b=i),t.t(T,m||b||{},u)},rt(...n){return t.rt(...n)},tc(...n){const[s,a,i]=n,u={plural:1};let m=null,b=null;if(!F(s))throw j(15);const T=s;return F(a)?u.locale=a:D(a)?u.plural=a:R(a)?m=a:M(a)&&(b=a),F(i)?u.locale=i:R(i)?m=i:M(i)&&(b=i),t.t(T,m||b||{},u)},te(n,s){return t.te(n,s)},tm(n){return t.tm(n)},getLocaleMessage(n){return t.getLocaleMessage(n)},setLocaleMessage(n,s){t.setLocaleMessage(n,s)},mergeLocaleMessage(n,s){t.mergeLocaleMessage(n,s)},d(...n){return t.d(...n)},getDateTimeFormat(n){return t.getDateTimeFormat(n)},setDateTimeFormat(n,s){t.setDateTimeFormat(n,s)},mergeDateTimeFormat(n,s){t.mergeDateTimeFormat(n,s)},n(...n){return t.n(...n)},getNumberFormat(n){return t.getNumberFormat(n)},setNumberFormat(n,s){t.setNumberFormat(n,s)},mergeNumberFormat(n,s){t.mergeNumberFormat(n,s)},getChoiceIndex(n,s){return-1},__onComponentInstanceCreated(n){const{componentInstanceCreatedListener:s}=e;s&&s(n,r)}};return r}const et={tag:{type:[String,Object]},locale:{type:String},scope:{type:String,validator:e=>e==="parent"||e==="global",default:"parent"},i18n:{type:Object}},Ft={name:"i18n-t",props:H({keypath:{type:String,required:!0},plural:{type:[Number,String],validator:e=>D(e)||!isNaN(e)}},et),setup(e,t){const{slots:r,attrs:n}=t,s=e.i18n||tt({useScope:e.scope,__useComponent:!0}),a=Object.keys(r).filter(i=>i!=="_");return()=>{const i={};e.locale&&(i.locale=e.locale),e.plural!==void 0&&(i.plural=F(e.plural)?+e.plural:e.plural);const u=Zn(t,a),m=s[Ke](e.keypath,u,i),b=H({},n);return F(e.tag)?se(e.tag,b,m):J(e.tag)?se(e.tag,b,m):se(Ct,b,m)}}};function Zn({slots:e},t){return t.length===1&&t[0]==="default"?e.default?e.default():[]:t.reduce((r,n)=>{const s=e[n];return s&&(r[n]=s()),r},{})}function Wt(e,t,r,n){const{slots:s,attrs:a}=t;return()=>{const i={part:!0};let u={};e.locale&&(i.locale=e.locale),F(e.format)?i.key=e.format:J(e.format)&&(F(e.format.key)&&(i.key=e.format.key),u=Object.keys(e.format).reduce((v,L)=>r.includes(L)?H({},v,{[L]:e.format[L]}):v,{}));const m=n(e.value,i,u);let b=[i.key];R(m)?b=m.map((v,L)=>{const I=s[v.type];return I?I({[v.type]:v.value,index:L,parts:m}):[v.value]}):F(m)&&(b=[m]);const T=H({},a);return F(e.tag)?se(e.tag,T,b):J(e.tag)?se(e.tag,T,b):se(Ct,T,b)}}const Qn=["localeMatcher","style","unit","unitDisplay","currency","currencyDisplay","useGrouping","numberingSystem","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","notation","formatMatcher"],vt={name:"i18n-n",props:H({value:{type:Number,required:!0},format:{type:[String,Object]}},et),setup(e,t){const r=e.i18n||tt({useScope:"parent",__useComponent:!0});return Wt(e,t,Qn,(...n)=>r[qe](...n))}},Xn=["dateStyle","timeStyle","fractionalSecondDigits","calendar","dayPeriod","numberingSystem","localeMatcher","timeZone","hour12","hourCycle","formatMatcher","weekday","era","year","month","day","hour","minute","second","timeZoneName"],Tt={name:"i18n-d",props:H({value:{type:[Number,Date],required:!0},format:{type:[String,Object]}},et),setup(e,t){const r=e.i18n||tt({useScope:"parent",__useComponent:!0});return Wt(e,t,Xn,(...n)=>r[Ge](...n))}};function zn(e,t){const r=e;if(e.mode==="composition")return r.__getInstance(t)||e.global;{const n=r.__getInstance(t);return n!=null?n.__composer:e.global.__composer}}function er(e){const t=(r,{instance:n,value:s,modifiers:a})=>{if(!n||!n.$)throw j(22);const i=zn(e,n.$),u=tr(s);r.textContent=i.t(...nr(u))};return{beforeMount:t,beforeUpdate:t}}function tr(e){if(F(e))return{path:e};if(M(e)){if(!("path"in e))throw j(19,"path");return e}else throw j(20)}function nr(e){const{path:t,locale:r,args:n,choice:s,plural:a}=e,i={},u=n||{};return F(r)&&(i.locale=r),D(s)&&(i.plural=s),D(a)&&(i.plural=a),[t,u,i]}function rr(e,t,...r){const n=M(r[0])?r[0]:{},s=!!n.useI18nComponentName;(E(n.globalInstall)?n.globalInstall:!0)&&(e.component(s?"i18n":Ft.name,Ft),e.component(vt.name,vt),e.component(Tt.name,Tt)),e.directive("t",er(t))}function ar(e,t,r){return{beforeCreate(){const n=Fe();if(!n)throw j(22);const s=this.$options;if(s.i18n){const a=s.i18n;s.__i18n&&(a.__i18n=s.__i18n),a.__root=t,this===this.$root?this.$i18n=St(e,a):(a.__injectWithOption=!0,this.$i18n=Be(a))}else s.__i18n?this===this.$root?this.$i18n=St(e,s):this.$i18n=Be({__i18n:s.__i18n,__injectWithOption:!0,__root:t}):this.$i18n=e;e.__onComponentInstanceCreated(this.$i18n),r.__setInstance(n,this.$i18n),this.$t=(...a)=>this.$i18n.t(...a),this.$rt=(...a)=>this.$i18n.rt(...a),this.$tc=(...a)=>this.$i18n.tc(...a),this.$te=(a,i)=>this.$i18n.te(a,i),this.$d=(...a)=>this.$i18n.d(...a),this.$n=(...a)=>this.$i18n.n(...a),this.$tm=a=>this.$i18n.tm(a)},mounted(){},beforeUnmount(){const n=Fe();if(!n)throw j(22);delete this.$t,delete this.$rt,delete this.$tc,delete this.$te,delete this.$d,delete this.$n,delete this.$tm,r.__deleteInstance(n),delete this.$i18n}}}function St(e,t){e.locale=t.locale||e.locale,e.fallbackLocale=t.fallbackLocale||e.fallbackLocale,e.missing=t.missing||e.missing,e.silentTranslationWarn=t.silentTranslationWarn||e.silentFallbackWarn,e.silentFallbackWarn=t.silentFallbackWarn||e.silentFallbackWarn,e.formatFallbackMessages=t.formatFallbackMessages||e.formatFallbackMessages,e.postTranslation=t.postTranslation||e.postTranslation,e.warnHtmlInMessage=t.warnHtmlInMessage||e.warnHtmlInMessage,e.escapeParameterHtml=t.escapeParameterHtml||e.escapeParameterHtml,e.sync=t.sync||e.sync,e.__composer[It](t.pluralizationRules||e.pluralizationRules);const r=Xe(e.locale,{messages:t.messages,__i18n:t.__i18n});return Object.keys(r).forEach(n=>e.mergeLocaleMessage(n,r[n])),t.datetimeFormats&&Object.keys(t.datetimeFormats).forEach(n=>e.mergeDateTimeFormat(n,t.datetimeFormats[n])),t.numberFormats&&Object.keys(t.numberFormats).forEach(n=>e.mergeNumberFormat(n,t.numberFormats[n])),e}function sr(e={}){const t=E(e.legacy)?e.legacy:!0,r=!!e.globalInjection,n=new Map,s=t?Be(e):ze(e),a=X(""),i={get mode(){return t?"legacy":"composition"},async install(u,...m){u.__VUE_I18N_SYMBOL__=a,u.provide(u.__VUE_I18N_SYMBOL__,i),!t&&r&&or(u,i.global),rr(u,i,...m),t&&u.mixin(ar(s,s.__composer,i))},get global(){return s},__instances:n,__getInstance(u){return n.get(u)||null},__setInstance(u,m){n.set(u,m)},__deleteInstance(u){n.delete(u)}};return i}function tt(e={}){const t=Fe();if(t==null)throw j(16);if(!t.appContext.app.__VUE_I18N_SYMBOL__)throw j(17);const r=Rt(t.appContext.app.__VUE_I18N_SYMBOL__);if(!r)throw j(22);const n=r.mode==="composition"?r.global:r.global.__composer,s=Se(e)?"__i18n"in t.type?"local":"global":e.useScope?e.useScope:"local";if(s==="global"){let u=J(e.messages)?e.messages:{};"__i18nGlobal"in t.type&&(u=Xe(n.locale.value,{messages:u,__i18n:t.type.__i18nGlobal}));const m=Object.keys(u);if(m.length&&m.forEach(b=>{n.mergeLocaleMessage(b,u[b])}),J(e.datetimeFormats)){const b=Object.keys(e.datetimeFormats);b.length&&b.forEach(T=>{n.mergeDateTimeFormat(T,e.datetimeFormats[T])})}if(J(e.numberFormats)){const b=Object.keys(e.numberFormats);b.length&&b.forEach(T=>{n.mergeNumberFormat(T,e.numberFormats[T])})}return n}if(s==="parent"){let u=lr(r,t,e.__useComponent);return u==null&&(u=n),u}if(r.mode==="legacy")throw j(18);const a=r;let i=a.__getInstance(t);if(i==null){const u=t.type,m=H({},e);u.__i18n&&(m.__i18n=u.__i18n),n&&(m.__root=n),i=ze(m),cr(a,t),a.__setInstance(t,i)}return i}function lr(e,t,r=!1){let n=null;const s=t.root;let a=t.parent;for(;a!=null;){const i=e;if(e.mode==="composition")n=i.__getInstance(a);else{const u=i.__getInstance(a);u!=null&&(n=u.__composer),r&&n&&!n[Nt]&&(n=null)}if(n!=null||s===a)break;a=a.parent}return n}function cr(e,t,r){Dt(()=>{},t),At(()=>{e.__deleteInstance(t)},t)}const ir=["locale","fallbackLocale","availableLocales"],ur=["t","rt","d","n","tm"];function or(e,t){const r=Object.create(null);ir.forEach(n=>{const s=Object.getOwnPropertyDescriptor(t,n);if(!s)throw j(22);const a=xt(s.value)?{get(){return s.value.value},set(i){s.value.value=i}}:{get(){return s.get&&s.get()}};Object.defineProperty(r,n,a)}),e.config.globalProperties.$i18n=r,ur.forEach(n=>{const s=Object.getOwnPropertyDescriptor(t,n);if(!s||!s.value)throw j(22);Object.defineProperty(e.config.globalProperties,`$${n}`,s)})}Dn(Un);var fr={failed:"Action failed",success:"Action was successful"},mr={"en-US":fr},_r=Ht(({app:e})=>{const t=sr({locale:"en-US",messages:mr});e.use(t)});export{_r as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
