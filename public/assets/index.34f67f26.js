var tu=Object.defineProperty,nu=Object.defineProperties;var ou=Object.getOwnPropertyDescriptors;var to=Object.getOwnPropertySymbols;var wi=Object.prototype.hasOwnProperty,xi=Object.prototype.propertyIsEnumerable;var _i=(e,t,n)=>t in e?tu(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,Y=(e,t)=>{for(var n in t||(t={}))wi.call(t,n)&&_i(e,n,t[n]);if(to)for(var n of to(t))xi.call(t,n)&&_i(e,n,t[n]);return e},ce=(e,t)=>nu(e,ou(t));var Jt=(e,t)=>{var n={};for(var o in e)wi.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(e!=null&&to)for(var o of to(e))t.indexOf(o)<0&&xi.call(e,o)&&(n[o]=e[o]);return n};const ru=function(){const t=document.createElement("link").relList;return t&&t.supports&&t.supports("modulepreload")?"modulepreload":"preload"}(),Ci={},iu="/",Ln=function(t,n){return!n||n.length===0?t():Promise.all(n.map(o=>{if(o=`${iu}${o}`,o in Ci)return;Ci[o]=!0;const r=o.endsWith(".css"),i=r?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${o}"]${i}`))return;const s=document.createElement("link");if(s.rel=r?"stylesheet":ru,r||(s.as="script",s.crossOrigin=""),s.href=o,document.head.appendChild(s),r)return new Promise((a,l)=>{s.addEventListener("load",a),s.addEventListener("error",()=>l(new Error(`Unable to preload CSS for ${o}`)))})})).then(()=>t())};function Dr(e,t){const n=Object.create(null),o=e.split(",");for(let r=0;r<o.length;r++)n[o[r]]=!0;return t?r=>!!n[r.toLowerCase()]:r=>!!n[r]}const su="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",lu=Dr(su);function Xs(e){return!!e||e===""}function zr(e){if(re(e)){const t={};for(let n=0;n<e.length;n++){const o=e[n],r=Re(o)?cu(o):zr(o);if(r)for(const i in r)t[i]=r[i]}return t}else{if(Re(e))return e;if(ke(e))return e}}const au=/;(?![^(]*\))/g,uu=/:(.+)/;function cu(e){const t={};return e.split(au).forEach(n=>{if(n){const o=n.split(uu);o.length>1&&(t[o[0].trim()]=o[1].trim())}}),t}function Hr(e){let t="";if(Re(e))t=e;else if(re(e))for(let n=0;n<e.length;n++){const o=Hr(e[n]);o&&(t+=o+" ")}else if(ke(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}const pg=e=>Re(e)?e:e==null?"":re(e)||ke(e)&&(e.toString===nl||!le(e.toString))?JSON.stringify(e,Gs,2):String(e),Gs=(e,t)=>t&&t.__v_isRef?Gs(e,t.value):dn(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((n,[o,r])=>(n[`${o} =>`]=r,n),{})}:el(t)?{[`Set(${t.size})`]:[...t.values()]}:ke(t)&&!re(t)&&!ol(t)?String(t):t,be={},fn=[],nt=()=>{},fu=()=>!1,du=/^on[^a-z]/,qo=e=>du.test(e),Ur=e=>e.startsWith("onUpdate:"),qe=Object.assign,Kr=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},hu=Object.prototype.hasOwnProperty,fe=(e,t)=>hu.call(e,t),re=Array.isArray,dn=e=>Mo(e)==="[object Map]",el=e=>Mo(e)==="[object Set]",le=e=>typeof e=="function",Re=e=>typeof e=="string",Wr=e=>typeof e=="symbol",ke=e=>e!==null&&typeof e=="object",tl=e=>ke(e)&&le(e.then)&&le(e.catch),nl=Object.prototype.toString,Mo=e=>nl.call(e),mu=e=>Mo(e).slice(8,-1),ol=e=>Mo(e)==="[object Object]",Qr=e=>Re(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,go=Dr(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),$o=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},gu=/-(\w)/g,ut=$o(e=>e.replace(gu,(t,n)=>n?n.toUpperCase():"")),vu=/\B([A-Z])/g,yn=$o(e=>e.replace(vu,"-$1").toLowerCase()),Oo=$o(e=>e.charAt(0).toUpperCase()+e.slice(1)),Wo=$o(e=>e?`on${Oo(e)}`:""),zn=(e,t)=>!Object.is(e,t),Qo=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},_o=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},rl=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let ki;const pu=()=>ki||(ki=typeof globalThis!="undefined"?globalThis:typeof self!="undefined"?self:typeof window!="undefined"?window:typeof global!="undefined"?global:{});let lt;class il{constructor(t=!1){this.active=!0,this.effects=[],this.cleanups=[],!t&&lt&&(this.parent=lt,this.index=(lt.scopes||(lt.scopes=[])).push(this)-1)}run(t){if(this.active){const n=lt;try{return lt=this,t()}finally{lt=n}}}on(){lt=this}off(){lt=this.parent}stop(t){if(this.active){let n,o;for(n=0,o=this.effects.length;n<o;n++)this.effects[n].stop();for(n=0,o=this.cleanups.length;n<o;n++)this.cleanups[n]();if(this.scopes)for(n=0,o=this.scopes.length;n<o;n++)this.scopes[n].stop(!0);if(this.parent&&!t){const r=this.parent.scopes.pop();r&&r!==this&&(this.parent.scopes[this.index]=r,r.index=this.index)}this.active=!1}}}function bu(e){return new il(e)}function yu(e,t=lt){t&&t.active&&t.effects.push(e)}const Yr=e=>{const t=new Set(e);return t.w=0,t.n=0,t},sl=e=>(e.w&Rt)>0,ll=e=>(e.n&Rt)>0,_u=({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Rt},wu=e=>{const{deps:t}=e;if(t.length){let n=0;for(let o=0;o<t.length;o++){const r=t[o];sl(r)&&!ll(r)?r.delete(e):t[n++]=r,r.w&=~Rt,r.n&=~Rt}t.length=n}},mr=new WeakMap;let Mn=0,Rt=1;const gr=30;let et;const Nt=Symbol(""),vr=Symbol("");class Zr{constructor(t,n=null,o){this.fn=t,this.scheduler=n,this.active=!0,this.deps=[],this.parent=void 0,yu(this,o)}run(){if(!this.active)return this.fn();let t=et,n=Et;for(;t;){if(t===this)return;t=t.parent}try{return this.parent=et,et=this,Et=!0,Rt=1<<++Mn,Mn<=gr?_u(this):Ei(this),this.fn()}finally{Mn<=gr&&wu(this),Rt=1<<--Mn,et=this.parent,Et=n,this.parent=void 0,this.deferStop&&this.stop()}}stop(){et===this?this.deferStop=!0:this.active&&(Ei(this),this.onStop&&this.onStop(),this.active=!1)}}function Ei(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}let Et=!0;const al=[];function _n(){al.push(Et),Et=!1}function wn(){const e=al.pop();Et=e===void 0?!0:e}function ze(e,t,n){if(Et&&et){let o=mr.get(e);o||mr.set(e,o=new Map);let r=o.get(n);r||o.set(n,r=Yr()),ul(r)}}function ul(e,t){let n=!1;Mn<=gr?ll(e)||(e.n|=Rt,n=!sl(e)):n=!e.has(et),n&&(e.add(et),et.deps.push(e))}function ht(e,t,n,o,r,i){const s=mr.get(e);if(!s)return;let a=[];if(t==="clear")a=[...s.values()];else if(n==="length"&&re(e))s.forEach((l,u)=>{(u==="length"||u>=o)&&a.push(l)});else switch(n!==void 0&&a.push(s.get(n)),t){case"add":re(e)?Qr(n)&&a.push(s.get("length")):(a.push(s.get(Nt)),dn(e)&&a.push(s.get(vr)));break;case"delete":re(e)||(a.push(s.get(Nt)),dn(e)&&a.push(s.get(vr)));break;case"set":dn(e)&&a.push(s.get(Nt));break}if(a.length===1)a[0]&&pr(a[0]);else{const l=[];for(const u of a)u&&l.push(...u);pr(Yr(l))}}function pr(e,t){for(const n of re(e)?e:[...e])(n!==et||n.allowRecurse)&&(n.scheduler?n.scheduler():n.run())}const xu=Dr("__proto__,__v_isRef,__isVue"),cl=new Set(Object.getOwnPropertyNames(Symbol).map(e=>Symbol[e]).filter(Wr)),Cu=Jr(),ku=Jr(!1,!0),Eu=Jr(!0),Si=Su();function Su(){const e={};return["includes","indexOf","lastIndexOf"].forEach(t=>{e[t]=function(...n){const o=he(this);for(let i=0,s=this.length;i<s;i++)ze(o,"get",i+"");const r=o[t](...n);return r===-1||r===!1?o[t](...n.map(he)):r}}),["push","pop","shift","unshift","splice"].forEach(t=>{e[t]=function(...n){_n();const o=he(this)[t].apply(this,n);return wn(),o}}),e}function Jr(e=!1,t=!1){return function(o,r,i){if(r==="__v_isReactive")return!e;if(r==="__v_isReadonly")return e;if(r==="__v_isShallow")return t;if(r==="__v_raw"&&i===(e?t?Du:gl:t?ml:hl).get(o))return o;const s=re(o);if(!e&&s&&fe(Si,r))return Reflect.get(Si,r,i);const a=Reflect.get(o,r,i);return(Wr(r)?cl.has(r):xu(r))||(e||ze(o,"get",r),t)?a:Ae(a)?!s||!Qr(r)?a.value:a:ke(a)?e?vl(a):Kt(a):a}}const Ru=fl(),Tu=fl(!0);function fl(e=!1){return function(n,o,r,i){let s=n[o];if(Hn(s)&&Ae(s)&&!Ae(r))return!1;if(!e&&!Hn(r)&&(pl(r)||(r=he(r),s=he(s)),!re(n)&&Ae(s)&&!Ae(r)))return s.value=r,!0;const a=re(n)&&Qr(o)?Number(o)<n.length:fe(n,o),l=Reflect.set(n,o,r,i);return n===he(i)&&(a?zn(r,s)&&ht(n,"set",o,r):ht(n,"add",o,r)),l}}function Pu(e,t){const n=fe(e,t);e[t];const o=Reflect.deleteProperty(e,t);return o&&n&&ht(e,"delete",t,void 0),o}function Au(e,t){const n=Reflect.has(e,t);return(!Wr(t)||!cl.has(t))&&ze(e,"has",t),n}function qu(e){return ze(e,"iterate",re(e)?"length":Nt),Reflect.ownKeys(e)}const dl={get:Cu,set:Ru,deleteProperty:Pu,has:Au,ownKeys:qu},Mu={get:Eu,set(e,t){return!0},deleteProperty(e,t){return!0}},$u=qe({},dl,{get:ku,set:Tu}),Xr=e=>e,Lo=e=>Reflect.getPrototypeOf(e);function no(e,t,n=!1,o=!1){e=e.__v_raw;const r=he(e),i=he(t);t!==i&&!n&&ze(r,"get",t),!n&&ze(r,"get",i);const{has:s}=Lo(r),a=o?Xr:n?ti:Un;if(s.call(r,t))return a(e.get(t));if(s.call(r,i))return a(e.get(i));e!==r&&e.get(t)}function oo(e,t=!1){const n=this.__v_raw,o=he(n),r=he(e);return e!==r&&!t&&ze(o,"has",e),!t&&ze(o,"has",r),e===r?n.has(e):n.has(e)||n.has(r)}function ro(e,t=!1){return e=e.__v_raw,!t&&ze(he(e),"iterate",Nt),Reflect.get(e,"size",e)}function Ri(e){e=he(e);const t=he(this);return Lo(t).has.call(t,e)||(t.add(e),ht(t,"add",e,e)),this}function Ti(e,t){t=he(t);const n=he(this),{has:o,get:r}=Lo(n);let i=o.call(n,e);i||(e=he(e),i=o.call(n,e));const s=r.call(n,e);return n.set(e,t),i?zn(t,s)&&ht(n,"set",e,t):ht(n,"add",e,t),this}function Pi(e){const t=he(this),{has:n,get:o}=Lo(t);let r=n.call(t,e);r||(e=he(e),r=n.call(t,e)),o&&o.call(t,e);const i=t.delete(e);return r&&ht(t,"delete",e,void 0),i}function Ai(){const e=he(this),t=e.size!==0,n=e.clear();return t&&ht(e,"clear",void 0,void 0),n}function io(e,t){return function(o,r){const i=this,s=i.__v_raw,a=he(s),l=t?Xr:e?ti:Un;return!e&&ze(a,"iterate",Nt),s.forEach((u,c)=>o.call(r,l(u),l(c),i))}}function so(e,t,n){return function(...o){const r=this.__v_raw,i=he(r),s=dn(i),a=e==="entries"||e===Symbol.iterator&&s,l=e==="keys"&&s,u=r[e](...o),c=n?Xr:t?ti:Un;return!t&&ze(i,"iterate",l?vr:Nt),{next(){const{value:d,done:f}=u.next();return f?{value:d,done:f}:{value:a?[c(d[0]),c(d[1])]:c(d),done:f}},[Symbol.iterator](){return this}}}}function vt(e){return function(...t){return e==="delete"?!1:this}}function Ou(){const e={get(i){return no(this,i)},get size(){return ro(this)},has:oo,add:Ri,set:Ti,delete:Pi,clear:Ai,forEach:io(!1,!1)},t={get(i){return no(this,i,!1,!0)},get size(){return ro(this)},has:oo,add:Ri,set:Ti,delete:Pi,clear:Ai,forEach:io(!1,!0)},n={get(i){return no(this,i,!0)},get size(){return ro(this,!0)},has(i){return oo.call(this,i,!0)},add:vt("add"),set:vt("set"),delete:vt("delete"),clear:vt("clear"),forEach:io(!0,!1)},o={get(i){return no(this,i,!0,!0)},get size(){return ro(this,!0)},has(i){return oo.call(this,i,!0)},add:vt("add"),set:vt("set"),delete:vt("delete"),clear:vt("clear"),forEach:io(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(i=>{e[i]=so(i,!1,!1),n[i]=so(i,!0,!1),t[i]=so(i,!1,!0),o[i]=so(i,!0,!0)}),[e,n,t,o]}const[Lu,Bu,Fu,Iu]=Ou();function Gr(e,t){const n=t?e?Iu:Fu:e?Bu:Lu;return(o,r,i)=>r==="__v_isReactive"?!e:r==="__v_isReadonly"?e:r==="__v_raw"?o:Reflect.get(fe(n,r)&&r in o?n:o,r,i)}const Nu={get:Gr(!1,!1)},Vu={get:Gr(!1,!0)},ju={get:Gr(!0,!1)},hl=new WeakMap,ml=new WeakMap,gl=new WeakMap,Du=new WeakMap;function zu(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Hu(e){return e.__v_skip||!Object.isExtensible(e)?0:zu(mu(e))}function Kt(e){return Hn(e)?e:ei(e,!1,dl,Nu,hl)}function Uu(e){return ei(e,!1,$u,Vu,ml)}function vl(e){return ei(e,!0,Mu,ju,gl)}function ei(e,t,n,o,r){if(!ke(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const i=r.get(e);if(i)return i;const s=Hu(e);if(s===0)return e;const a=new Proxy(e,s===2?o:n);return r.set(e,a),a}function hn(e){return Hn(e)?hn(e.__v_raw):!!(e&&e.__v_isReactive)}function Hn(e){return!!(e&&e.__v_isReadonly)}function pl(e){return!!(e&&e.__v_isShallow)}function bl(e){return hn(e)||Hn(e)}function he(e){const t=e&&e.__v_raw;return t?he(t):e}function Wt(e){return _o(e,"__v_skip",!0),e}const Un=e=>ke(e)?Kt(e):e,ti=e=>ke(e)?vl(e):e;function yl(e){Et&&et&&(e=he(e),ul(e.dep||(e.dep=Yr())))}function _l(e,t){e=he(e),e.dep&&pr(e.dep)}function Ae(e){return!!(e&&e.__v_isRef===!0)}function me(e){return wl(e,!1)}function Ku(e){return wl(e,!0)}function wl(e,t){return Ae(e)?e:new Wu(e,t)}class Wu{constructor(t,n){this.__v_isShallow=n,this.dep=void 0,this.__v_isRef=!0,this._rawValue=n?t:he(t),this._value=n?t:Un(t)}get value(){return yl(this),this._value}set value(t){t=this.__v_isShallow?t:he(t),zn(t,this._rawValue)&&(this._rawValue=t,this._value=this.__v_isShallow?t:Un(t),_l(this))}}function Bn(e){return Ae(e)?e.value:e}const Qu={get:(e,t,n)=>Bn(Reflect.get(e,t,n)),set:(e,t,n,o)=>{const r=e[t];return Ae(r)&&!Ae(n)?(r.value=n,!0):Reflect.set(e,t,n,o)}};function xl(e){return hn(e)?e:new Proxy(e,Qu)}class Yu{constructor(t,n,o,r){this._setter=n,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new Zr(t,()=>{this._dirty||(this._dirty=!0,_l(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!r,this.__v_isReadonly=o}get value(){const t=he(this);return yl(t),(t._dirty||!t._cacheable)&&(t._dirty=!1,t._value=t.effect.run()),t._value}set value(t){this._setter(t)}}function Zu(e,t,n=!1){let o,r;const i=le(e);return i?(o=e,r=nt):(o=e.get,r=e.set),new Yu(o,r,i||!r,n)}function St(e,t,n,o){let r;try{r=o?e(...o):e()}catch(i){Bo(i,t,n)}return r}function Ye(e,t,n,o){if(le(e)){const i=St(e,t,n,o);return i&&tl(i)&&i.catch(s=>{Bo(s,t,n)}),i}const r=[];for(let i=0;i<e.length;i++)r.push(Ye(e[i],t,n,o));return r}function Bo(e,t,n,o=!0){const r=t?t.vnode:null;if(t){let i=t.parent;const s=t.proxy,a=n;for(;i;){const u=i.ec;if(u){for(let c=0;c<u.length;c++)if(u[c](e,s,a)===!1)return}i=i.parent}const l=t.appContext.config.errorHandler;if(l){St(l,null,10,[e,s,a]);return}}Ju(e,n,r,o)}function Ju(e,t,n,o=!0){console.error(e)}let wo=!1,br=!1;const De=[];let ft=0;const Fn=[];let $n=null,sn=0;const In=[];let _t=null,ln=0;const Cl=Promise.resolve();let ni=null,yr=null;function Fe(e){const t=ni||Cl;return e?t.then(this?e.bind(this):e):t}function Xu(e){let t=ft+1,n=De.length;for(;t<n;){const o=t+n>>>1;Kn(De[o])<e?t=o+1:n=o}return t}function kl(e){(!De.length||!De.includes(e,wo&&e.allowRecurse?ft+1:ft))&&e!==yr&&(e.id==null?De.push(e):De.splice(Xu(e.id),0,e),El())}function El(){!wo&&!br&&(br=!0,ni=Cl.then(Tl))}function Gu(e){const t=De.indexOf(e);t>ft&&De.splice(t,1)}function Sl(e,t,n,o){re(e)?n.push(...e):(!t||!t.includes(e,e.allowRecurse?o+1:o))&&n.push(e),El()}function ec(e){Sl(e,$n,Fn,sn)}function tc(e){Sl(e,_t,In,ln)}function oi(e,t=null){if(Fn.length){for(yr=t,$n=[...new Set(Fn)],Fn.length=0,sn=0;sn<$n.length;sn++)$n[sn]();$n=null,sn=0,yr=null,oi(e,t)}}function Rl(e){if(In.length){const t=[...new Set(In)];if(In.length=0,_t){_t.push(...t);return}for(_t=t,_t.sort((n,o)=>Kn(n)-Kn(o)),ln=0;ln<_t.length;ln++)_t[ln]();_t=null,ln=0}}const Kn=e=>e.id==null?1/0:e.id;function Tl(e){br=!1,wo=!0,oi(e),De.sort((n,o)=>Kn(n)-Kn(o));const t=nt;try{for(ft=0;ft<De.length;ft++){const n=De[ft];n&&n.active!==!1&&St(n,null,14)}}finally{ft=0,De.length=0,Rl(),wo=!1,ni=null,(De.length||Fn.length||In.length)&&Tl(e)}}function nc(e,t,...n){if(e.isUnmounted)return;const o=e.vnode.props||be;let r=n;const i=t.startsWith("update:"),s=i&&t.slice(7);if(s&&s in o){const c=`${s==="modelValue"?"model":s}Modifiers`,{number:d,trim:f}=o[c]||be;f?r=n.map(m=>m.trim()):d&&(r=n.map(rl))}let a,l=o[a=Wo(t)]||o[a=Wo(ut(t))];!l&&i&&(l=o[a=Wo(yn(t))]),l&&Ye(l,e,6,r);const u=o[a+"Once"];if(u){if(!e.emitted)e.emitted={};else if(e.emitted[a])return;e.emitted[a]=!0,Ye(u,e,6,r)}}function Pl(e,t,n=!1){const o=t.emitsCache,r=o.get(e);if(r!==void 0)return r;const i=e.emits;let s={},a=!1;if(!le(e)){const l=u=>{const c=Pl(u,t,!0);c&&(a=!0,qe(s,c))};!n&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}return!i&&!a?(o.set(e,null),null):(re(i)?i.forEach(l=>s[l]=null):qe(s,i),o.set(e,s),s)}function Fo(e,t){return!e||!qo(t)?!1:(t=t.slice(2).replace(/Once$/,""),fe(e,t[0].toLowerCase()+t.slice(1))||fe(e,yn(t))||fe(e,t))}let Qe=null,Al=null;function xo(e){const t=Qe;return Qe=e,Al=e&&e.type.__scopeId||null,t}function oc(e,t=Qe,n){if(!t||e._n)return e;const o=(...r)=>{o._d&&Di(-1);const i=xo(t),s=e(...r);return xo(i),o._d&&Di(1),s};return o._n=!0,o._c=!0,o._d=!0,o}function Yo(e){const{type:t,vnode:n,proxy:o,withProxy:r,props:i,propsOptions:[s],slots:a,attrs:l,emit:u,render:c,renderCache:d,data:f,setupState:m,ctx:v,inheritAttrs:P}=e;let _,k;const S=xo(e);try{if(n.shapeFlag&4){const T=r||o;_=at(c.call(T,T,d,i,m,f,v)),k=l}else{const T=t;_=at(T.length>1?T(i,{attrs:l,slots:a,emit:u}):T(i,null)),k=t.props?l:rc(l)}}catch(T){Vn.length=0,Bo(T,e,1),_=Ve(ot)}let A=_;if(k&&P!==!1){const T=Object.keys(k),{shapeFlag:U}=A;T.length&&U&7&&(s&&T.some(Ur)&&(k=ic(k,s)),A=Ht(A,k))}return n.dirs&&(A.dirs=A.dirs?A.dirs.concat(n.dirs):n.dirs),n.transition&&(A.transition=n.transition),_=A,xo(S),_}const rc=e=>{let t;for(const n in e)(n==="class"||n==="style"||qo(n))&&((t||(t={}))[n]=e[n]);return t},ic=(e,t)=>{const n={};for(const o in e)(!Ur(o)||!(o.slice(9)in t))&&(n[o]=e[o]);return n};function sc(e,t,n){const{props:o,children:r,component:i}=e,{props:s,children:a,patchFlag:l}=t,u=i.emitsOptions;if(t.dirs||t.transition)return!0;if(n&&l>=0){if(l&1024)return!0;if(l&16)return o?qi(o,s,u):!!s;if(l&8){const c=t.dynamicProps;for(let d=0;d<c.length;d++){const f=c[d];if(s[f]!==o[f]&&!Fo(u,f))return!0}}}else return(r||a)&&(!a||!a.$stable)?!0:o===s?!1:o?s?qi(o,s,u):!0:!!s;return!1}function qi(e,t,n){const o=Object.keys(t);if(o.length!==Object.keys(e).length)return!0;for(let r=0;r<o.length;r++){const i=o[r];if(t[i]!==e[i]&&!Fo(n,i))return!0}return!1}function lc({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}const ac=e=>e.__isSuspense;function uc(e,t){t&&t.pendingBranch?re(e)?t.effects.push(...e):t.effects.push(e):tc(e)}function vo(e,t){if(Pe){let n=Pe.provides;const o=Pe.parent&&Pe.parent.provides;o===n&&(n=Pe.provides=Object.create(o)),n[e]=t}}function dt(e,t,n=!1){const o=Pe||Qe;if(o){const r=o.parent==null?o.vnode.appContext&&o.vnode.appContext.provides:o.parent.provides;if(r&&e in r)return r[e];if(arguments.length>1)return n&&le(t)?t.call(o.proxy):t}}const Mi={};function _e(e,t,n){return ql(e,t,n)}function ql(e,t,{immediate:n,deep:o,flush:r,onTrack:i,onTrigger:s}=be){const a=Pe;let l,u=!1,c=!1;if(Ae(e)?(l=()=>e.value,u=pl(e)):hn(e)?(l=()=>e,o=!0):re(e)?(c=!0,u=e.some(hn),l=()=>e.map(k=>{if(Ae(k))return k.value;if(hn(k))return Bt(k);if(le(k))return St(k,a,2)})):le(e)?t?l=()=>St(e,a,2):l=()=>{if(!(a&&a.isUnmounted))return d&&d(),Ye(e,a,3,[f])}:l=nt,t&&o){const k=l;l=()=>Bt(k())}let d,f=k=>{d=_.onStop=()=>{St(k,a,4)}};if(Yn)return f=nt,t?n&&Ye(t,a,3,[l(),c?[]:void 0,f]):l(),nt;let m=c?[]:Mi;const v=()=>{if(!!_.active)if(t){const k=_.run();(o||u||(c?k.some((S,A)=>zn(S,m[A])):zn(k,m)))&&(d&&d(),Ye(t,a,3,[k,m===Mi?void 0:m,f]),m=k)}else _.run()};v.allowRecurse=!!t;let P;r==="sync"?P=v:r==="post"?P=()=>Ie(v,a&&a.suspense):P=()=>{!a||a.isMounted?ec(v):v()};const _=new Zr(l,P);return t?n?v():m=_.run():r==="post"?Ie(_.run.bind(_),a&&a.suspense):_.run(),()=>{_.stop(),a&&a.scope&&Kr(a.scope.effects,_)}}function cc(e,t,n){const o=this.proxy,r=Re(e)?e.includes(".")?Ml(o,e):()=>o[e]:e.bind(o,o);let i;le(t)?i=t:(i=t.handler,n=t);const s=Pe;mn(this);const a=ql(r,i.bind(o),n);return s?mn(s):jt(),a}function Ml(e,t){const n=t.split(".");return()=>{let o=e;for(let r=0;r<n.length&&o;r++)o=o[n[r]];return o}}function Bt(e,t){if(!ke(e)||e.__v_skip||(t=t||new Set,t.has(e)))return e;if(t.add(e),Ae(e))Bt(e.value,t);else if(re(e))for(let n=0;n<e.length;n++)Bt(e[n],t);else if(el(e)||dn(e))e.forEach(n=>{Bt(n,t)});else if(ol(e))for(const n in e)Bt(e[n],t);return e}function $l(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return xn(()=>{e.isMounted=!0}),rt(()=>{e.isUnmounting=!0}),e}const He=[Function,Array],fc={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:He,onEnter:He,onAfterEnter:He,onEnterCancelled:He,onBeforeLeave:He,onLeave:He,onAfterLeave:He,onLeaveCancelled:He,onBeforeAppear:He,onAppear:He,onAfterAppear:He,onAppearCancelled:He},setup(e,{slots:t}){const n=Te(),o=$l();let r;return()=>{const i=t.default&&ri(t.default(),!0);if(!i||!i.length)return;let s=i[0];if(i.length>1){for(const P of i)if(P.type!==ot){s=P;break}}const a=he(e),{mode:l}=a;if(o.isLeaving)return Zo(s);const u=$i(s);if(!u)return Zo(s);const c=Wn(u,a,o,n);Qn(u,c);const d=n.subTree,f=d&&$i(d);let m=!1;const{getTransitionKey:v}=u.type;if(v){const P=v();r===void 0?r=P:P!==r&&(r=P,m=!0)}if(f&&f.type!==ot&&(!Ot(u,f)||m)){const P=Wn(f,a,o,n);if(Qn(f,P),l==="out-in")return o.isLeaving=!0,P.afterLeave=()=>{o.isLeaving=!1,n.update()},Zo(s);l==="in-out"&&u.type!==ot&&(P.delayLeave=(_,k,S)=>{const A=Ll(o,f);A[String(f.key)]=f,_._leaveCb=()=>{k(),_._leaveCb=void 0,delete c.delayedLeave},c.delayedLeave=S})}return s}}},Ol=fc;function Ll(e,t){const{leavingVNodes:n}=e;let o=n.get(t.type);return o||(o=Object.create(null),n.set(t.type,o)),o}function Wn(e,t,n,o){const{appear:r,mode:i,persisted:s=!1,onBeforeEnter:a,onEnter:l,onAfterEnter:u,onEnterCancelled:c,onBeforeLeave:d,onLeave:f,onAfterLeave:m,onLeaveCancelled:v,onBeforeAppear:P,onAppear:_,onAfterAppear:k,onAppearCancelled:S}=t,A=String(e.key),T=Ll(n,e),U=(y,$)=>{y&&Ye(y,o,9,$)},x={mode:i,persisted:s,beforeEnter(y){let $=a;if(!n.isMounted)if(r)$=P||a;else return;y._leaveCb&&y._leaveCb(!0);const O=T[A];O&&Ot(e,O)&&O.el._leaveCb&&O.el._leaveCb(),U($,[y])},enter(y){let $=l,O=u,N=c;if(!n.isMounted)if(r)$=_||l,O=k||u,N=S||c;else return;let B=!1;const C=y._enterCb=H=>{B||(B=!0,H?U(N,[y]):U(O,[y]),x.delayedLeave&&x.delayedLeave(),y._enterCb=void 0)};$?($(y,C),$.length<=1&&C()):C()},leave(y,$){const O=String(e.key);if(y._enterCb&&y._enterCb(!0),n.isUnmounting)return $();U(d,[y]);let N=!1;const B=y._leaveCb=C=>{N||(N=!0,$(),C?U(v,[y]):U(m,[y]),y._leaveCb=void 0,T[O]===e&&delete T[O])};T[O]=e,f?(f(y,B),f.length<=1&&B()):B()},clone(y){return Wn(y,t,n,o)}};return x}function Zo(e){if(No(e))return e=Ht(e),e.children=null,e}function $i(e){return No(e)?e.children?e.children[0]:void 0:e}function Qn(e,t){e.shapeFlag&6&&e.component?Qn(e.component.subTree,t):e.shapeFlag&128?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function ri(e,t=!1,n){let o=[],r=0;for(let i=0;i<e.length;i++){let s=e[i];const a=n==null?s.key:String(n)+String(s.key!=null?s.key:i);s.type===Ge?(s.patchFlag&128&&r++,o=o.concat(ri(s.children,t,a))):(t||s.type!==ot)&&o.push(a!=null?Ht(s,{key:a}):s)}if(r>1)for(let i=0;i<o.length;i++)o[i].patchFlag=-2;return o}function Io(e){return le(e)?{setup:e,name:e.name}:e}const _r=e=>!!e.type.__asyncLoader,No=e=>e.type.__isKeepAlive;function Bl(e,t){Il(e,"a",t)}function Fl(e,t){Il(e,"da",t)}function Il(e,t,n=Pe){const o=e.__wdc||(e.__wdc=()=>{let r=n;for(;r;){if(r.isDeactivated)return;r=r.parent}return e()});if(Vo(t,o,n),n){let r=n.parent;for(;r&&r.parent;)No(r.parent.vnode)&&dc(o,t,n,r),r=r.parent}}function dc(e,t,n,o){const r=Vo(t,e,o,!0);ii(()=>{Kr(o[t],r)},n)}function Vo(e,t,n=Pe,o=!1){if(n){const r=n[e]||(n[e]=[]),i=t.__weh||(t.__weh=(...s)=>{if(n.isUnmounted)return;_n(),mn(n);const a=Ye(t,n,e,s);return jt(),wn(),a});return o?r.unshift(i):r.push(i),i}}const gt=e=>(t,n=Pe)=>(!Yn||e==="sp")&&Vo(e,t,n),hc=gt("bm"),xn=gt("m"),Nl=gt("bu"),Vl=gt("u"),rt=gt("bum"),ii=gt("um"),mc=gt("sp"),gc=gt("rtg"),vc=gt("rtc");function pc(e,t=Pe){Vo("ec",e,t)}let wr=!0;function bc(e){const t=Dl(e),n=e.proxy,o=e.ctx;wr=!1,t.beforeCreate&&Oi(t.beforeCreate,e,"bc");const{data:r,computed:i,methods:s,watch:a,provide:l,inject:u,created:c,beforeMount:d,mounted:f,beforeUpdate:m,updated:v,activated:P,deactivated:_,beforeDestroy:k,beforeUnmount:S,destroyed:A,unmounted:T,render:U,renderTracked:x,renderTriggered:y,errorCaptured:$,serverPrefetch:O,expose:N,inheritAttrs:B,components:C,directives:H,filters:W}=t;if(u&&yc(u,o,null,e.appContext.config.unwrapInjectedRef),s)for(const E in s){const K=s[E];le(K)&&(o[E]=K.bind(n))}if(r){const E=r.call(n,n);ke(E)&&(e.data=Kt(E))}if(wr=!0,i)for(const E in i){const K=i[E],F=le(K)?K.bind(n,n):le(K.get)?K.get.bind(n,n):nt,ae=!le(K)&&le(K.set)?K.set.bind(n):nt,Ce=w({get:F,set:ae});Object.defineProperty(o,E,{enumerable:!0,configurable:!0,get:()=>Ce.value,set:xe=>Ce.value=xe})}if(a)for(const E in a)jl(a[E],o,n,E);if(l){const E=le(l)?l.call(n):l;Reflect.ownKeys(E).forEach(K=>{vo(K,E[K])})}c&&Oi(c,e,"c");function G(E,K){re(K)?K.forEach(F=>E(F.bind(n))):K&&E(K.bind(n))}if(G(hc,d),G(xn,f),G(Nl,m),G(Vl,v),G(Bl,P),G(Fl,_),G(pc,$),G(vc,x),G(gc,y),G(rt,S),G(ii,T),G(mc,O),re(N))if(N.length){const E=e.exposed||(e.exposed={});N.forEach(K=>{Object.defineProperty(E,K,{get:()=>n[K],set:F=>n[K]=F})})}else e.exposed||(e.exposed={});U&&e.render===nt&&(e.render=U),B!=null&&(e.inheritAttrs=B),C&&(e.components=C),H&&(e.directives=H)}function yc(e,t,n=nt,o=!1){re(e)&&(e=xr(e));for(const r in e){const i=e[r];let s;ke(i)?"default"in i?s=dt(i.from||r,i.default,!0):s=dt(i.from||r):s=dt(i),Ae(s)&&o?Object.defineProperty(t,r,{enumerable:!0,configurable:!0,get:()=>s.value,set:a=>s.value=a}):t[r]=s}}function Oi(e,t,n){Ye(re(e)?e.map(o=>o.bind(t.proxy)):e.bind(t.proxy),t,n)}function jl(e,t,n,o){const r=o.includes(".")?Ml(n,o):()=>n[o];if(Re(e)){const i=t[e];le(i)&&_e(r,i)}else if(le(e))_e(r,e.bind(n));else if(ke(e))if(re(e))e.forEach(i=>jl(i,t,n,o));else{const i=le(e.handler)?e.handler.bind(n):t[e.handler];le(i)&&_e(r,i,e)}}function Dl(e){const t=e.type,{mixins:n,extends:o}=t,{mixins:r,optionsCache:i,config:{optionMergeStrategies:s}}=e.appContext,a=i.get(t);let l;return a?l=a:!r.length&&!n&&!o?l=t:(l={},r.length&&r.forEach(u=>Co(l,u,s,!0)),Co(l,t,s)),i.set(t,l),l}function Co(e,t,n,o=!1){const{mixins:r,extends:i}=t;i&&Co(e,i,n,!0),r&&r.forEach(s=>Co(e,s,n,!0));for(const s in t)if(!(o&&s==="expose")){const a=_c[s]||n&&n[s];e[s]=a?a(e[s],t[s]):t[s]}return e}const _c={data:Li,props:Mt,emits:Mt,methods:Mt,computed:Mt,beforeCreate:Be,created:Be,beforeMount:Be,mounted:Be,beforeUpdate:Be,updated:Be,beforeDestroy:Be,beforeUnmount:Be,destroyed:Be,unmounted:Be,activated:Be,deactivated:Be,errorCaptured:Be,serverPrefetch:Be,components:Mt,directives:Mt,watch:xc,provide:Li,inject:wc};function Li(e,t){return t?e?function(){return qe(le(e)?e.call(this,this):e,le(t)?t.call(this,this):t)}:t:e}function wc(e,t){return Mt(xr(e),xr(t))}function xr(e){if(re(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Be(e,t){return e?[...new Set([].concat(e,t))]:t}function Mt(e,t){return e?qe(qe(Object.create(null),e),t):t}function xc(e,t){if(!e)return t;if(!t)return e;const n=qe(Object.create(null),e);for(const o in t)n[o]=Be(e[o],t[o]);return n}function Cc(e,t,n,o=!1){const r={},i={};_o(i,jo,1),e.propsDefaults=Object.create(null),zl(e,t,r,i);for(const s in e.propsOptions[0])s in r||(r[s]=void 0);n?e.props=o?r:Uu(r):e.type.props?e.props=r:e.props=i,e.attrs=i}function kc(e,t,n,o){const{props:r,attrs:i,vnode:{patchFlag:s}}=e,a=he(r),[l]=e.propsOptions;let u=!1;if((o||s>0)&&!(s&16)){if(s&8){const c=e.vnode.dynamicProps;for(let d=0;d<c.length;d++){let f=c[d];if(Fo(e.emitsOptions,f))continue;const m=t[f];if(l)if(fe(i,f))m!==i[f]&&(i[f]=m,u=!0);else{const v=ut(f);r[v]=Cr(l,a,v,m,e,!1)}else m!==i[f]&&(i[f]=m,u=!0)}}}else{zl(e,t,r,i)&&(u=!0);let c;for(const d in a)(!t||!fe(t,d)&&((c=yn(d))===d||!fe(t,c)))&&(l?n&&(n[d]!==void 0||n[c]!==void 0)&&(r[d]=Cr(l,a,d,void 0,e,!0)):delete r[d]);if(i!==a)for(const d in i)(!t||!fe(t,d)&&!0)&&(delete i[d],u=!0)}u&&ht(e,"set","$attrs")}function zl(e,t,n,o){const[r,i]=e.propsOptions;let s=!1,a;if(t)for(let l in t){if(go(l))continue;const u=t[l];let c;r&&fe(r,c=ut(l))?!i||!i.includes(c)?n[c]=u:(a||(a={}))[c]=u:Fo(e.emitsOptions,l)||(!(l in o)||u!==o[l])&&(o[l]=u,s=!0)}if(i){const l=he(n),u=a||be;for(let c=0;c<i.length;c++){const d=i[c];n[d]=Cr(r,l,d,u[d],e,!fe(u,d))}}return s}function Cr(e,t,n,o,r,i){const s=e[n];if(s!=null){const a=fe(s,"default");if(a&&o===void 0){const l=s.default;if(s.type!==Function&&le(l)){const{propsDefaults:u}=r;n in u?o=u[n]:(mn(r),o=u[n]=l.call(null,t),jt())}else o=l}s[0]&&(i&&!a?o=!1:s[1]&&(o===""||o===yn(n))&&(o=!0))}return o}function Hl(e,t,n=!1){const o=t.propsCache,r=o.get(e);if(r)return r;const i=e.props,s={},a=[];let l=!1;if(!le(e)){const c=d=>{l=!0;const[f,m]=Hl(d,t,!0);qe(s,f),m&&a.push(...m)};!n&&t.mixins.length&&t.mixins.forEach(c),e.extends&&c(e.extends),e.mixins&&e.mixins.forEach(c)}if(!i&&!l)return o.set(e,fn),fn;if(re(i))for(let c=0;c<i.length;c++){const d=ut(i[c]);Bi(d)&&(s[d]=be)}else if(i)for(const c in i){const d=ut(c);if(Bi(d)){const f=i[c],m=s[d]=re(f)||le(f)?{type:f}:f;if(m){const v=Ni(Boolean,m.type),P=Ni(String,m.type);m[0]=v>-1,m[1]=P<0||v<P,(v>-1||fe(m,"default"))&&a.push(d)}}}const u=[s,a];return o.set(e,u),u}function Bi(e){return e[0]!=="$"}function Fi(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:e===null?"null":""}function Ii(e,t){return Fi(e)===Fi(t)}function Ni(e,t){return re(t)?t.findIndex(n=>Ii(n,e)):le(t)&&Ii(t,e)?0:-1}const Ul=e=>e[0]==="_"||e==="$stable",si=e=>re(e)?e.map(at):[at(e)],Ec=(e,t,n)=>{const o=oc((...r)=>si(t(...r)),n);return o._c=!1,o},Kl=(e,t,n)=>{const o=e._ctx;for(const r in e){if(Ul(r))continue;const i=e[r];if(le(i))t[r]=Ec(r,i,o);else if(i!=null){const s=si(i);t[r]=()=>s}}},Wl=(e,t)=>{const n=si(t);e.slots.default=()=>n},Sc=(e,t)=>{if(e.vnode.shapeFlag&32){const n=t._;n?(e.slots=he(t),_o(t,"_",n)):Kl(t,e.slots={})}else e.slots={},t&&Wl(e,t);_o(e.slots,jo,1)},Rc=(e,t,n)=>{const{vnode:o,slots:r}=e;let i=!0,s=be;if(o.shapeFlag&32){const a=t._;a?n&&a===1?i=!1:(qe(r,t),!n&&a===1&&delete r._):(i=!t.$stable,Kl(t,r)),s=t}else t&&(Wl(e,t),s={default:1});if(i)for(const a in r)!Ul(a)&&!(a in s)&&delete r[a]};function Ql(e,t){const n=Qe;if(n===null)return e;const o=Do(n)||n.proxy,r=e.dirs||(e.dirs=[]);for(let i=0;i<t.length;i++){let[s,a,l,u=be]=t[i];le(s)&&(s={mounted:s,updated:s}),s.deep&&Bt(a),r.push({dir:s,instance:o,value:a,oldValue:void 0,arg:l,modifiers:u})}return e}function Pt(e,t,n,o){const r=e.dirs,i=t&&t.dirs;for(let s=0;s<r.length;s++){const a=r[s];i&&(a.oldValue=i[s].value);let l=a.dir[o];l&&(_n(),Ye(l,n,8,[e.el,a,e,t]),wn())}}function Yl(){return{app:null,config:{isNativeTag:fu,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Tc=0;function Pc(e,t){return function(o,r=null){le(o)||(o=Object.assign({},o)),r!=null&&!ke(r)&&(r=null);const i=Yl(),s=new Set;let a=!1;const l=i.app={_uid:Tc++,_component:o,_props:r,_container:null,_context:i,_instance:null,version:tf,get config(){return i.config},set config(u){},use(u,...c){return s.has(u)||(u&&le(u.install)?(s.add(u),u.install(l,...c)):le(u)&&(s.add(u),u(l,...c))),l},mixin(u){return i.mixins.includes(u)||i.mixins.push(u),l},component(u,c){return c?(i.components[u]=c,l):i.components[u]},directive(u,c){return c?(i.directives[u]=c,l):i.directives[u]},mount(u,c,d){if(!a){const f=Ve(o,r);return f.appContext=i,c&&t?t(f,u):e(f,u,d),a=!0,l._container=u,u.__vue_app__=l,Do(f.component)||f.component.proxy}},unmount(){a&&(e(null,l._container),delete l._container.__vue_app__)},provide(u,c){return i.provides[u]=c,l}};return l}}function kr(e,t,n,o,r=!1){if(re(e)){e.forEach((f,m)=>kr(f,t&&(re(t)?t[m]:t),n,o,r));return}if(_r(o)&&!r)return;const i=o.shapeFlag&4?Do(o.component)||o.component.proxy:o.el,s=r?null:i,{i:a,r:l}=e,u=t&&t.r,c=a.refs===be?a.refs={}:a.refs,d=a.setupState;if(u!=null&&u!==l&&(Re(u)?(c[u]=null,fe(d,u)&&(d[u]=null)):Ae(u)&&(u.value=null)),le(l))St(l,a,12,[s,c]);else{const f=Re(l),m=Ae(l);if(f||m){const v=()=>{if(e.f){const P=f?c[l]:l.value;r?re(P)&&Kr(P,i):re(P)?P.includes(i)||P.push(i):f?(c[l]=[i],fe(d,l)&&(d[l]=c[l])):(l.value=[i],e.k&&(c[e.k]=l.value))}else f?(c[l]=s,fe(d,l)&&(d[l]=s)):Ae(l)&&(l.value=s,e.k&&(c[e.k]=s))};s?(v.id=-1,Ie(v,n)):v()}}}const Ie=uc;function Ac(e){return qc(e)}function qc(e,t){const n=pu();n.__VUE__=!0;const{insert:o,remove:r,patchProp:i,createElement:s,createText:a,createComment:l,setText:u,setElementText:c,parentNode:d,nextSibling:f,setScopeId:m=nt,cloneNode:v,insertStaticContent:P}=e,_=(h,g,p,M=null,q=null,V=null,Q=!1,I=null,z=!!g.dynamicChildren)=>{if(h===g)return;h&&!Ot(h,g)&&(M=ee(h),ge(h,q,V,!0),h=null),g.patchFlag===-2&&(z=!1,g.dynamicChildren=null);const{type:L,ref:te,shapeFlag:J}=g;switch(L){case ai:k(h,g,p,M);break;case ot:S(h,g,p,M);break;case Jo:h==null&&A(g,p,M,Q);break;case Ge:H(h,g,p,M,q,V,Q,I,z);break;default:J&1?x(h,g,p,M,q,V,Q,I,z):J&6?W(h,g,p,M,q,V,Q,I,z):(J&64||J&128)&&L.process(h,g,p,M,q,V,Q,I,z,ue)}te!=null&&q&&kr(te,h&&h.ref,V,g||h,!g)},k=(h,g,p,M)=>{if(h==null)o(g.el=a(g.children),p,M);else{const q=g.el=h.el;g.children!==h.children&&u(q,g.children)}},S=(h,g,p,M)=>{h==null?o(g.el=l(g.children||""),p,M):g.el=h.el},A=(h,g,p,M)=>{[h.el,h.anchor]=P(h.children,g,p,M,h.el,h.anchor)},T=({el:h,anchor:g},p,M)=>{let q;for(;h&&h!==g;)q=f(h),o(h,p,M),h=q;o(g,p,M)},U=({el:h,anchor:g})=>{let p;for(;h&&h!==g;)p=f(h),r(h),h=p;r(g)},x=(h,g,p,M,q,V,Q,I,z)=>{Q=Q||g.type==="svg",h==null?y(g,p,M,q,V,Q,I,z):N(h,g,q,V,Q,I,z)},y=(h,g,p,M,q,V,Q,I)=>{let z,L;const{type:te,props:J,shapeFlag:ne,transition:oe,patchFlag:de,dirs:we}=h;if(h.el&&v!==void 0&&de===-1)z=h.el=v(h.el);else{if(z=h.el=s(h.type,V,J&&J.is,J),ne&8?c(z,h.children):ne&16&&O(h.children,z,null,M,q,V&&te!=="foreignObject",Q,I),we&&Pt(h,null,M,"created"),J){for(const ye in J)ye!=="value"&&!go(ye)&&i(z,ye,null,J[ye],V,h.children,M,q,j);"value"in J&&i(z,"value",null,J.value),(L=J.onVnodeBeforeMount)&&st(L,M,h)}$(z,h,h.scopeId,Q,M)}we&&Pt(h,null,M,"beforeMount");const ve=(!q||q&&!q.pendingBranch)&&oe&&!oe.persisted;ve&&oe.beforeEnter(z),o(z,g,p),((L=J&&J.onVnodeMounted)||ve||we)&&Ie(()=>{L&&st(L,M,h),ve&&oe.enter(z),we&&Pt(h,null,M,"mounted")},q)},$=(h,g,p,M,q)=>{if(p&&m(h,p),M)for(let V=0;V<M.length;V++)m(h,M[V]);if(q){let V=q.subTree;if(g===V){const Q=q.vnode;$(h,Q,Q.scopeId,Q.slotScopeIds,q.parent)}}},O=(h,g,p,M,q,V,Q,I,z=0)=>{for(let L=z;L<h.length;L++){const te=h[L]=I?wt(h[L]):at(h[L]);_(null,te,g,p,M,q,V,Q,I)}},N=(h,g,p,M,q,V,Q)=>{const I=g.el=h.el;let{patchFlag:z,dynamicChildren:L,dirs:te}=g;z|=h.patchFlag&16;const J=h.props||be,ne=g.props||be;let oe;p&&At(p,!1),(oe=ne.onVnodeBeforeUpdate)&&st(oe,p,g,h),te&&Pt(g,h,p,"beforeUpdate"),p&&At(p,!0);const de=q&&g.type!=="foreignObject";if(L?B(h.dynamicChildren,L,I,p,M,de,V):Q||F(h,g,I,null,p,M,de,V,!1),z>0){if(z&16)C(I,g,J,ne,p,M,q);else if(z&2&&J.class!==ne.class&&i(I,"class",null,ne.class,q),z&4&&i(I,"style",J.style,ne.style,q),z&8){const we=g.dynamicProps;for(let ve=0;ve<we.length;ve++){const ye=we[ve],Je=J[ye],Zt=ne[ye];(Zt!==Je||ye==="value")&&i(I,ye,Je,Zt,q,h.children,p,M,j)}}z&1&&h.children!==g.children&&c(I,g.children)}else!Q&&L==null&&C(I,g,J,ne,p,M,q);((oe=ne.onVnodeUpdated)||te)&&Ie(()=>{oe&&st(oe,p,g,h),te&&Pt(g,h,p,"updated")},M)},B=(h,g,p,M,q,V,Q)=>{for(let I=0;I<g.length;I++){const z=h[I],L=g[I],te=z.el&&(z.type===Ge||!Ot(z,L)||z.shapeFlag&70)?d(z.el):p;_(z,L,te,null,M,q,V,Q,!0)}},C=(h,g,p,M,q,V,Q)=>{if(p!==M){for(const I in M){if(go(I))continue;const z=M[I],L=p[I];z!==L&&I!=="value"&&i(h,I,L,z,Q,g.children,q,V,j)}if(p!==be)for(const I in p)!go(I)&&!(I in M)&&i(h,I,p[I],null,Q,g.children,q,V,j);"value"in M&&i(h,"value",p.value,M.value)}},H=(h,g,p,M,q,V,Q,I,z)=>{const L=g.el=h?h.el:a(""),te=g.anchor=h?h.anchor:a("");let{patchFlag:J,dynamicChildren:ne,slotScopeIds:oe}=g;oe&&(I=I?I.concat(oe):oe),h==null?(o(L,p,M),o(te,p,M),O(g.children,p,te,q,V,Q,I,z)):J>0&&J&64&&ne&&h.dynamicChildren?(B(h.dynamicChildren,ne,p,q,V,Q,I),(g.key!=null||q&&g===q.subTree)&&li(h,g,!0)):F(h,g,p,te,q,V,Q,I,z)},W=(h,g,p,M,q,V,Q,I,z)=>{g.slotScopeIds=I,h==null?g.shapeFlag&512?q.ctx.activate(g,p,M,Q,z):D(g,p,M,q,V,Q,z):G(h,g,z)},D=(h,g,p,M,q,V,Q)=>{const I=h.component=Qc(h,M,q);if(No(h)&&(I.ctx.renderer=ue),Yc(I),I.asyncDep){if(q&&q.registerDep(I,E),!h.el){const z=I.subTree=Ve(ot);S(null,z,g,p)}return}E(I,h,g,p,q,V,Q)},G=(h,g,p)=>{const M=g.component=h.component;if(sc(h,g,p))if(M.asyncDep&&!M.asyncResolved){K(M,g,p);return}else M.next=g,Gu(M.update),M.update();else g.component=h.component,g.el=h.el,M.vnode=g},E=(h,g,p,M,q,V,Q)=>{const I=()=>{if(h.isMounted){let{next:te,bu:J,u:ne,parent:oe,vnode:de}=h,we=te,ve;At(h,!1),te?(te.el=de.el,K(h,te,Q)):te=de,J&&Qo(J),(ve=te.props&&te.props.onVnodeBeforeUpdate)&&st(ve,oe,te,de),At(h,!0);const ye=Yo(h),Je=h.subTree;h.subTree=ye,_(Je,ye,d(Je.el),ee(Je),h,q,V),te.el=ye.el,we===null&&lc(h,ye.el),ne&&Ie(ne,q),(ve=te.props&&te.props.onVnodeUpdated)&&Ie(()=>st(ve,oe,te,de),q)}else{let te;const{el:J,props:ne}=g,{bm:oe,m:de,parent:we}=h,ve=_r(g);if(At(h,!1),oe&&Qo(oe),!ve&&(te=ne&&ne.onVnodeBeforeMount)&&st(te,we,g),At(h,!0),J&&ie){const ye=()=>{h.subTree=Yo(h),ie(J,h.subTree,h,q,null)};ve?g.type.__asyncLoader().then(()=>!h.isUnmounted&&ye()):ye()}else{const ye=h.subTree=Yo(h);_(null,ye,p,M,h,q,V),g.el=ye.el}if(de&&Ie(de,q),!ve&&(te=ne&&ne.onVnodeMounted)){const ye=g;Ie(()=>st(te,we,ye),q)}g.shapeFlag&256&&h.a&&Ie(h.a,q),h.isMounted=!0,g=p=M=null}},z=h.effect=new Zr(I,()=>kl(h.update),h.scope),L=h.update=z.run.bind(z);L.id=h.uid,At(h,!0),L()},K=(h,g,p)=>{g.component=h;const M=h.vnode.props;h.vnode=g,h.next=null,kc(h,g.props,M,p),Rc(h,g.children,p),_n(),oi(void 0,h.update),wn()},F=(h,g,p,M,q,V,Q,I,z=!1)=>{const L=h&&h.children,te=h?h.shapeFlag:0,J=g.children,{patchFlag:ne,shapeFlag:oe}=g;if(ne>0){if(ne&128){Ce(L,J,p,M,q,V,Q,I,z);return}else if(ne&256){ae(L,J,p,M,q,V,Q,I,z);return}}oe&8?(te&16&&j(L,q,V),J!==L&&c(p,J)):te&16?oe&16?Ce(L,J,p,M,q,V,Q,I,z):j(L,q,V,!0):(te&8&&c(p,""),oe&16&&O(J,p,M,q,V,Q,I,z))},ae=(h,g,p,M,q,V,Q,I,z)=>{h=h||fn,g=g||fn;const L=h.length,te=g.length,J=Math.min(L,te);let ne;for(ne=0;ne<J;ne++){const oe=g[ne]=z?wt(g[ne]):at(g[ne]);_(h[ne],oe,p,null,q,V,Q,I,z)}L>te?j(h,q,V,!0,!1,J):O(g,p,M,q,V,Q,I,z,J)},Ce=(h,g,p,M,q,V,Q,I,z)=>{let L=0;const te=g.length;let J=h.length-1,ne=te-1;for(;L<=J&&L<=ne;){const oe=h[L],de=g[L]=z?wt(g[L]):at(g[L]);if(Ot(oe,de))_(oe,de,p,null,q,V,Q,I,z);else break;L++}for(;L<=J&&L<=ne;){const oe=h[J],de=g[ne]=z?wt(g[ne]):at(g[ne]);if(Ot(oe,de))_(oe,de,p,null,q,V,Q,I,z);else break;J--,ne--}if(L>J){if(L<=ne){const oe=ne+1,de=oe<te?g[oe].el:M;for(;L<=ne;)_(null,g[L]=z?wt(g[L]):at(g[L]),p,de,q,V,Q,I,z),L++}}else if(L>ne)for(;L<=J;)ge(h[L],q,V,!0),L++;else{const oe=L,de=L,we=new Map;for(L=de;L<=ne;L++){const je=g[L]=z?wt(g[L]):at(g[L]);je.key!=null&&we.set(je.key,L)}let ve,ye=0;const Je=ne-de+1;let Zt=!1,pi=0;const Sn=new Array(Je);for(L=0;L<Je;L++)Sn[L]=0;for(L=oe;L<=J;L++){const je=h[L];if(ye>=Je){ge(je,q,V,!0);continue}let it;if(je.key!=null)it=we.get(je.key);else for(ve=de;ve<=ne;ve++)if(Sn[ve-de]===0&&Ot(je,g[ve])){it=ve;break}it===void 0?ge(je,q,V,!0):(Sn[it-de]=L+1,it>=pi?pi=it:Zt=!0,_(je,g[it],p,null,q,V,Q,I,z),ye++)}const bi=Zt?Mc(Sn):fn;for(ve=bi.length-1,L=Je-1;L>=0;L--){const je=de+L,it=g[je],yi=je+1<te?g[je+1].el:M;Sn[L]===0?_(null,it,p,yi,q,V,Q,I,z):Zt&&(ve<0||L!==bi[ve]?xe(it,p,yi,2):ve--)}}},xe=(h,g,p,M,q=null)=>{const{el:V,type:Q,transition:I,children:z,shapeFlag:L}=h;if(L&6){xe(h.component.subTree,g,p,M);return}if(L&128){h.suspense.move(g,p,M);return}if(L&64){Q.move(h,g,p,ue);return}if(Q===Ge){o(V,g,p);for(let J=0;J<z.length;J++)xe(z[J],g,p,M);o(h.anchor,g,p);return}if(Q===Jo){T(h,g,p);return}if(M!==2&&L&1&&I)if(M===0)I.beforeEnter(V),o(V,g,p),Ie(()=>I.enter(V),q);else{const{leave:J,delayLeave:ne,afterLeave:oe}=I,de=()=>o(V,g,p),we=()=>{J(V,()=>{de(),oe&&oe()})};ne?ne(V,de,we):we()}else o(V,g,p)},ge=(h,g,p,M=!1,q=!1)=>{const{type:V,props:Q,ref:I,children:z,dynamicChildren:L,shapeFlag:te,patchFlag:J,dirs:ne}=h;if(I!=null&&kr(I,null,p,h,!0),te&256){g.ctx.deactivate(h);return}const oe=te&1&&ne,de=!_r(h);let we;if(de&&(we=Q&&Q.onVnodeBeforeUnmount)&&st(we,g,h),te&6)Z(h.component,p,M);else{if(te&128){h.suspense.unmount(p,M);return}oe&&Pt(h,null,g,"beforeUnmount"),te&64?h.type.remove(h,g,p,q,ue,M):L&&(V!==Ge||J>0&&J&64)?j(L,g,p,!1,!0):(V===Ge&&J&384||!q&&te&16)&&j(z,g,p),M&&Ze(h)}(de&&(we=Q&&Q.onVnodeUnmounted)||oe)&&Ie(()=>{we&&st(we,g,h),oe&&Pt(h,null,g,"unmounted")},p)},Ze=h=>{const{type:g,el:p,anchor:M,transition:q}=h;if(g===Ge){R(p,M);return}if(g===Jo){U(h);return}const V=()=>{r(p),q&&!q.persisted&&q.afterLeave&&q.afterLeave()};if(h.shapeFlag&1&&q&&!q.persisted){const{leave:Q,delayLeave:I}=q,z=()=>Q(p,V);I?I(h.el,V,z):z()}else V()},R=(h,g)=>{let p;for(;h!==g;)p=f(h),r(h),h=p;r(g)},Z=(h,g,p)=>{const{bum:M,scope:q,update:V,subTree:Q,um:I}=h;M&&Qo(M),q.stop(),V&&(V.active=!1,ge(Q,h,g,p)),I&&Ie(I,g),Ie(()=>{h.isUnmounted=!0},g),g&&g.pendingBranch&&!g.isUnmounted&&h.asyncDep&&!h.asyncResolved&&h.suspenseId===g.pendingId&&(g.deps--,g.deps===0&&g.resolve())},j=(h,g,p,M=!1,q=!1,V=0)=>{for(let Q=V;Q<h.length;Q++)ge(h[Q],g,p,M,q)},ee=h=>h.shapeFlag&6?ee(h.component.subTree):h.shapeFlag&128?h.suspense.next():f(h.anchor||h.el),X=(h,g,p)=>{h==null?g._vnode&&ge(g._vnode,null,null,!0):_(g._vnode||null,h,g,null,null,null,p),Rl(),g._vnode=h},ue={p:_,um:ge,m:xe,r:Ze,mt:D,mc:O,pc:F,pbc:B,n:ee,o:e};let se,ie;return t&&([se,ie]=t(ue)),{render:X,hydrate:se,createApp:Pc(X,se)}}function At({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function li(e,t,n=!1){const o=e.children,r=t.children;if(re(o)&&re(r))for(let i=0;i<o.length;i++){const s=o[i];let a=r[i];a.shapeFlag&1&&!a.dynamicChildren&&((a.patchFlag<=0||a.patchFlag===32)&&(a=r[i]=wt(r[i]),a.el=s.el),n||li(s,a))}}function Mc(e){const t=e.slice(),n=[0];let o,r,i,s,a;const l=e.length;for(o=0;o<l;o++){const u=e[o];if(u!==0){if(r=n[n.length-1],e[r]<u){t[o]=r,n.push(o);continue}for(i=0,s=n.length-1;i<s;)a=i+s>>1,e[n[a]]<u?i=a+1:s=a;u<e[n[i]]&&(i>0&&(t[o]=n[i-1]),n[i]=o)}}for(i=n.length,s=n[i-1];i-- >0;)n[i]=s,s=t[s];return n}const $c=e=>e.__isTeleport,Nn=e=>e&&(e.disabled||e.disabled===""),Vi=e=>typeof SVGElement!="undefined"&&e instanceof SVGElement,Er=(e,t)=>{const n=e&&e.to;return Re(n)?t?t(n):null:n},Oc={__isTeleport:!0,process(e,t,n,o,r,i,s,a,l,u){const{mc:c,pc:d,pbc:f,o:{insert:m,querySelector:v,createText:P,createComment:_}}=u,k=Nn(t.props);let{shapeFlag:S,children:A,dynamicChildren:T}=t;if(e==null){const U=t.el=P(""),x=t.anchor=P("");m(U,n,o),m(x,n,o);const y=t.target=Er(t.props,v),$=t.targetAnchor=P("");y&&(m($,y),s=s||Vi(y));const O=(N,B)=>{S&16&&c(A,N,B,r,i,s,a,l)};k?O(n,x):y&&O(y,$)}else{t.el=e.el;const U=t.anchor=e.anchor,x=t.target=e.target,y=t.targetAnchor=e.targetAnchor,$=Nn(e.props),O=$?n:x,N=$?U:y;if(s=s||Vi(x),T?(f(e.dynamicChildren,T,O,r,i,s,a),li(e,t,!0)):l||d(e,t,O,N,r,i,s,a,!1),k)$||lo(t,n,U,u,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const B=t.target=Er(t.props,v);B&&lo(t,B,null,u,0)}else $&&lo(t,x,y,u,1)}},remove(e,t,n,o,{um:r,o:{remove:i}},s){const{shapeFlag:a,children:l,anchor:u,targetAnchor:c,target:d,props:f}=e;if(d&&i(c),(s||!Nn(f))&&(i(u),a&16))for(let m=0;m<l.length;m++){const v=l[m];r(v,t,n,!0,!!v.dynamicChildren)}},move:lo,hydrate:Lc};function lo(e,t,n,{o:{insert:o},m:r},i=2){i===0&&o(e.targetAnchor,t,n);const{el:s,anchor:a,shapeFlag:l,children:u,props:c}=e,d=i===2;if(d&&o(s,t,n),(!d||Nn(c))&&l&16)for(let f=0;f<u.length;f++)r(u[f],t,n,2);d&&o(a,t,n)}function Lc(e,t,n,o,r,i,{o:{nextSibling:s,parentNode:a,querySelector:l}},u){const c=t.target=Er(t.props,l);if(c){const d=c._lpa||c.firstChild;t.shapeFlag&16&&(Nn(t.props)?(t.anchor=u(s(e),t,a(e),n,o,r,i),t.targetAnchor=d):(t.anchor=s(e),t.targetAnchor=u(d,t,c,n,o,r,i)),c._lpa=t.targetAnchor&&s(t.targetAnchor))}return t.anchor&&s(t.anchor)}const Bc=Oc,Zl="components";function Fc(e,t){return Nc(Zl,e,!0,t)||e}const Ic=Symbol();function Nc(e,t,n=!0,o=!1){const r=Qe||Pe;if(r){const i=r.type;if(e===Zl){const a=Gc(i);if(a&&(a===t||a===ut(t)||a===Oo(ut(t))))return i}const s=ji(r[e]||i[e],t)||ji(r.appContext[e],t);return!s&&o?i:s}}function ji(e,t){return e&&(e[t]||e[ut(t)]||e[Oo(ut(t))])}const Ge=Symbol(void 0),ai=Symbol(void 0),ot=Symbol(void 0),Jo=Symbol(void 0),Vn=[];let Vt=null;function Jl(e=!1){Vn.push(Vt=e?null:[])}function Vc(){Vn.pop(),Vt=Vn[Vn.length-1]||null}let ko=1;function Di(e){ko+=e}function Xl(e){return e.dynamicChildren=ko>0?Vt||fn:null,Vc(),ko>0&&Vt&&Vt.push(e),e}function bg(e,t,n,o,r,i){return Xl(ta(e,t,n,o,r,i,!0))}function Gl(e,t,n,o,r){return Xl(Ve(e,t,n,o,r,!0))}function Sr(e){return e?e.__v_isVNode===!0:!1}function Ot(e,t){return e.type===t.type&&e.key===t.key}const jo="__vInternal",ea=({key:e})=>e!=null?e:null,po=({ref:e,ref_key:t,ref_for:n})=>e!=null?Re(e)||Ae(e)||le(e)?{i:Qe,r:e,k:t,f:!!n}:e:null;function ta(e,t=null,n=null,o=0,r=null,i=e===Ge?0:1,s=!1,a=!1){const l={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&ea(t),ref:t&&po(t),scopeId:Al,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:i,patchFlag:o,dynamicProps:r,dynamicChildren:null,appContext:null};return a?(ui(l,n),i&128&&e.normalize(l)):n&&(l.shapeFlag|=Re(n)?8:16),ko>0&&!s&&Vt&&(l.patchFlag>0||i&6)&&l.patchFlag!==32&&Vt.push(l),l}const Ve=jc;function jc(e,t=null,n=null,o=0,r=null,i=!1){if((!e||e===Ic)&&(e=ot),Sr(e)){const a=Ht(e,t,!0);return n&&ui(a,n),a}if(ef(e)&&(e=e.__vccOpts),t){t=Dc(t);let{class:a,style:l}=t;a&&!Re(a)&&(t.class=Hr(a)),ke(l)&&(bl(l)&&!re(l)&&(l=qe({},l)),t.style=zr(l))}const s=Re(e)?1:ac(e)?128:$c(e)?64:ke(e)?4:le(e)?2:0;return ta(e,t,n,o,r,s,i,!0)}function Dc(e){return e?bl(e)||jo in e?qe({},e):e:null}function Ht(e,t,n=!1){const{props:o,ref:r,patchFlag:i,children:s}=e,a=t?Hc(o||{},t):o;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:a,key:a&&ea(a),ref:t&&t.ref?n&&r?re(r)?r.concat(po(t)):[r,po(t)]:po(t):r,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:s,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Ge?i===-1?16:i|16:i,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Ht(e.ssContent),ssFallback:e.ssFallback&&Ht(e.ssFallback),el:e.el,anchor:e.anchor}}function zc(e=" ",t=0){return Ve(ai,null,e,t)}function yg(e="",t=!1){return t?(Jl(),Gl(ot,null,e)):Ve(ot,null,e)}function at(e){return e==null||typeof e=="boolean"?Ve(ot):re(e)?Ve(Ge,null,e.slice()):typeof e=="object"?wt(e):Ve(ai,null,String(e))}function wt(e){return e.el===null||e.memo?e:Ht(e)}function ui(e,t){let n=0;const{shapeFlag:o}=e;if(t==null)t=null;else if(re(t))n=16;else if(typeof t=="object")if(o&65){const r=t.default;r&&(r._c&&(r._d=!1),ui(e,r()),r._c&&(r._d=!0));return}else{n=32;const r=t._;!r&&!(jo in t)?t._ctx=Qe:r===3&&Qe&&(Qe.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else le(t)?(t={default:t,_ctx:Qe},n=32):(t=String(t),o&64?(n=16,t=[zc(t)]):n=8);e.children=t,e.shapeFlag|=n}function Hc(...e){const t={};for(let n=0;n<e.length;n++){const o=e[n];for(const r in o)if(r==="class")t.class!==o.class&&(t.class=Hr([t.class,o.class]));else if(r==="style")t.style=zr([t.style,o.style]);else if(qo(r)){const i=t[r],s=o[r];s&&i!==s&&!(re(i)&&i.includes(s))&&(t[r]=i?[].concat(i,s):s)}else r!==""&&(t[r]=o[r])}return t}function st(e,t,n,o=null){Ye(e,t,7,[n,o])}function _g(e,t,n,o){let r;const i=n&&n[o];if(re(e)||Re(e)){r=new Array(e.length);for(let s=0,a=e.length;s<a;s++)r[s]=t(e[s],s,void 0,i&&i[s])}else if(typeof e=="number"){r=new Array(e);for(let s=0;s<e;s++)r[s]=t(s+1,s,void 0,i&&i[s])}else if(ke(e))if(e[Symbol.iterator])r=Array.from(e,(s,a)=>t(s,a,void 0,i&&i[a]));else{const s=Object.keys(e);r=new Array(s.length);for(let a=0,l=s.length;a<l;a++){const u=s[a];r[a]=t(e[u],u,a,i&&i[a])}}else r=[];return n&&(n[o]=r),r}const Rr=e=>e?na(e)?Do(e)||e.proxy:Rr(e.parent):null,Eo=qe(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Rr(e.parent),$root:e=>Rr(e.root),$emit:e=>e.emit,$options:e=>Dl(e),$forceUpdate:e=>()=>kl(e.update),$nextTick:e=>Fe.bind(e.proxy),$watch:e=>cc.bind(e)}),Uc={get({_:e},t){const{ctx:n,setupState:o,data:r,props:i,accessCache:s,type:a,appContext:l}=e;let u;if(t[0]!=="$"){const m=s[t];if(m!==void 0)switch(m){case 1:return o[t];case 2:return r[t];case 4:return n[t];case 3:return i[t]}else{if(o!==be&&fe(o,t))return s[t]=1,o[t];if(r!==be&&fe(r,t))return s[t]=2,r[t];if((u=e.propsOptions[0])&&fe(u,t))return s[t]=3,i[t];if(n!==be&&fe(n,t))return s[t]=4,n[t];wr&&(s[t]=0)}}const c=Eo[t];let d,f;if(c)return t==="$attrs"&&ze(e,"get",t),c(e);if((d=a.__cssModules)&&(d=d[t]))return d;if(n!==be&&fe(n,t))return s[t]=4,n[t];if(f=l.config.globalProperties,fe(f,t))return f[t]},set({_:e},t,n){const{data:o,setupState:r,ctx:i}=e;return r!==be&&fe(r,t)?(r[t]=n,!0):o!==be&&fe(o,t)?(o[t]=n,!0):fe(e.props,t)||t[0]==="$"&&t.slice(1)in e?!1:(i[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:o,appContext:r,propsOptions:i}},s){let a;return!!n[s]||e!==be&&fe(e,s)||t!==be&&fe(t,s)||(a=i[0])&&fe(a,s)||fe(o,s)||fe(Eo,s)||fe(r.config.globalProperties,s)},defineProperty(e,t,n){return n.get!=null?e._.accessCache[t]=0:fe(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}},Kc=Yl();let Wc=0;function Qc(e,t,n){const o=e.type,r=(t?t.appContext:e.appContext)||Kc,i={uid:Wc++,vnode:e,type:o,parent:t,appContext:r,root:null,next:null,subTree:null,effect:null,update:null,scope:new il(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(r.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Hl(o,r),emitsOptions:Pl(o,r),emit:null,emitted:null,propsDefaults:be,inheritAttrs:o.inheritAttrs,ctx:be,data:be,props:be,attrs:be,slots:be,refs:be,setupState:be,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return i.ctx={_:i},i.root=t?t.root:i,i.emit=nc.bind(null,i),e.ce&&e.ce(i),i}let Pe=null;const Te=()=>Pe||Qe,mn=e=>{Pe=e,e.scope.on()},jt=()=>{Pe&&Pe.scope.off(),Pe=null};function na(e){return e.vnode.shapeFlag&4}let Yn=!1;function Yc(e,t=!1){Yn=t;const{props:n,children:o}=e.vnode,r=na(e);Cc(e,n,r,t),Sc(e,o);const i=r?Zc(e,t):void 0;return Yn=!1,i}function Zc(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=Wt(new Proxy(e.ctx,Uc));const{setup:o}=n;if(o){const r=e.setupContext=o.length>1?Xc(e):null;mn(e),_n();const i=St(o,e,0,[e.props,r]);if(wn(),jt(),tl(i)){if(i.then(jt,jt),t)return i.then(s=>{zi(e,s,t)}).catch(s=>{Bo(s,e,0)});e.asyncDep=i}else zi(e,i,t)}else oa(e,t)}function zi(e,t,n){le(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:ke(t)&&(e.setupState=xl(t)),oa(e,n)}let Hi;function oa(e,t,n){const o=e.type;if(!e.render){if(!t&&Hi&&!o.render){const r=o.template;if(r){const{isCustomElement:i,compilerOptions:s}=e.appContext.config,{delimiters:a,compilerOptions:l}=o,u=qe(qe({isCustomElement:i,delimiters:a},s),l);o.render=Hi(r,u)}}e.render=o.render||nt}mn(e),_n(),bc(e),wn(),jt()}function Jc(e){return new Proxy(e.attrs,{get(t,n){return ze(e,"get","$attrs"),t[n]}})}function Xc(e){const t=o=>{e.exposed=o||{}};let n;return{get attrs(){return n||(n=Jc(e))},slots:e.slots,emit:e.emit,expose:t}}function Do(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(xl(Wt(e.exposed)),{get(t,n){if(n in t)return t[n];if(n in Eo)return Eo[n](e)}}))}function Gc(e){return le(e)&&e.displayName||e.name}function ef(e){return le(e)&&"__vccOpts"in e}const w=(e,t)=>Zu(e,t,Yn);function b(e,t,n){const o=arguments.length;return o===2?ke(t)&&!re(t)?Sr(t)?Ve(e,null,[t]):Ve(e,t):Ve(e,null,t):(o>3?n=Array.prototype.slice.call(arguments,2):o===3&&Sr(n)&&(n=[n]),Ve(e,t,n))}const tf="3.2.33",nf="http://www.w3.org/2000/svg",Lt=typeof document!="undefined"?document:null,Ui=Lt&&Lt.createElement("template"),of={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,o)=>{const r=t?Lt.createElementNS(nf,e):Lt.createElement(e,n?{is:n}:void 0);return e==="select"&&o&&o.multiple!=null&&r.setAttribute("multiple",o.multiple),r},createText:e=>Lt.createTextNode(e),createComment:e=>Lt.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Lt.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,n,o,r,i){const s=n?n.previousSibling:t.lastChild;if(r&&(r===i||r.nextSibling))for(;t.insertBefore(r.cloneNode(!0),n),!(r===i||!(r=r.nextSibling)););else{Ui.innerHTML=o?`<svg>${e}</svg>`:e;const a=Ui.content;if(o){const l=a.firstChild;for(;l.firstChild;)a.appendChild(l.firstChild);a.removeChild(l)}t.insertBefore(a,n)}return[s?s.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}};function rf(e,t,n){const o=e._vtc;o&&(t=(t?[t,...o]:[...o]).join(" ")),t==null?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}function sf(e,t,n){const o=e.style,r=Re(n);if(n&&!r){for(const i in n)Tr(o,i,n[i]);if(t&&!Re(t))for(const i in t)n[i]==null&&Tr(o,i,"")}else{const i=o.display;r?t!==n&&(o.cssText=n):t&&e.removeAttribute("style"),"_vod"in e&&(o.display=i)}}const Ki=/\s*!important$/;function Tr(e,t,n){if(re(n))n.forEach(o=>Tr(e,t,o));else if(n==null&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const o=lf(e,t);Ki.test(n)?e.setProperty(yn(o),n.replace(Ki,""),"important"):e[o]=n}}const Wi=["Webkit","Moz","ms"],Xo={};function lf(e,t){const n=Xo[t];if(n)return n;let o=ut(t);if(o!=="filter"&&o in e)return Xo[t]=o;o=Oo(o);for(let r=0;r<Wi.length;r++){const i=Wi[r]+o;if(i in e)return Xo[t]=i}return t}const Qi="http://www.w3.org/1999/xlink";function af(e,t,n,o,r){if(o&&t.startsWith("xlink:"))n==null?e.removeAttributeNS(Qi,t.slice(6,t.length)):e.setAttributeNS(Qi,t,n);else{const i=lu(t);n==null||i&&!Xs(n)?e.removeAttribute(t):e.setAttribute(t,i?"":n)}}function uf(e,t,n,o,r,i,s){if(t==="innerHTML"||t==="textContent"){o&&s(o,r,i),e[t]=n==null?"":n;return}if(t==="value"&&e.tagName!=="PROGRESS"&&!e.tagName.includes("-")){e._value=n;const l=n==null?"":n;(e.value!==l||e.tagName==="OPTION")&&(e.value=l),n==null&&e.removeAttribute(t);return}let a=!1;if(n===""||n==null){const l=typeof e[t];l==="boolean"?n=Xs(n):n==null&&l==="string"?(n="",a=!0):l==="number"&&(n=0,a=!0)}try{e[t]=n}catch{}a&&e.removeAttribute(t)}const[ra,cf]=(()=>{let e=Date.now,t=!1;if(typeof window!="undefined"){Date.now()>document.createEvent("Event").timeStamp&&(e=()=>performance.now());const n=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(n&&Number(n[1])<=53)}return[e,t]})();let Pr=0;const ff=Promise.resolve(),df=()=>{Pr=0},hf=()=>Pr||(ff.then(df),Pr=ra());function mf(e,t,n,o){e.addEventListener(t,n,o)}function gf(e,t,n,o){e.removeEventListener(t,n,o)}function vf(e,t,n,o,r=null){const i=e._vei||(e._vei={}),s=i[t];if(o&&s)s.value=o;else{const[a,l]=pf(t);if(o){const u=i[t]=bf(o,r);mf(e,a,u,l)}else s&&(gf(e,a,s,l),i[t]=void 0)}}const Yi=/(?:Once|Passive|Capture)$/;function pf(e){let t;if(Yi.test(e)){t={};let n;for(;n=e.match(Yi);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[yn(e.slice(2)),t]}function bf(e,t){const n=o=>{const r=o.timeStamp||ra();(cf||r>=n.attached-1)&&Ye(yf(o,n.value),t,5,[o])};return n.value=e,n.attached=hf(),n}function yf(e,t){if(re(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map(o=>r=>!r._stopped&&o&&o(r))}else return t}const Zi=/^on[a-z]/,_f=(e,t,n,o,r=!1,i,s,a,l)=>{t==="class"?rf(e,o,r):t==="style"?sf(e,n,o):qo(t)?Ur(t)||vf(e,t,n,o,s):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):wf(e,t,o,r))?uf(e,t,o,i,s,a,l):(t==="true-value"?e._trueValue=o:t==="false-value"&&(e._falseValue=o),af(e,t,o,r))};function wf(e,t,n,o){return o?!!(t==="innerHTML"||t==="textContent"||t in e&&Zi.test(t)&&le(n)):t==="spellcheck"||t==="draggable"||t==="translate"||t==="form"||t==="list"&&e.tagName==="INPUT"||t==="type"&&e.tagName==="TEXTAREA"||Zi.test(t)&&Re(n)?!1:t in e}const pt="transition",Rn="animation",Ut=(e,{slots:t})=>b(Ol,sa(e),t);Ut.displayName="Transition";const ia={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},xf=Ut.props=qe({},Ol.props,ia),qt=(e,t=[])=>{re(e)?e.forEach(n=>n(...t)):e&&e(...t)},Ji=e=>e?re(e)?e.some(t=>t.length>1):e.length>1:!1;function sa(e){const t={};for(const C in e)C in ia||(t[C]=e[C]);if(e.css===!1)return t;const{name:n="v",type:o,duration:r,enterFromClass:i=`${n}-enter-from`,enterActiveClass:s=`${n}-enter-active`,enterToClass:a=`${n}-enter-to`,appearFromClass:l=i,appearActiveClass:u=s,appearToClass:c=a,leaveFromClass:d=`${n}-leave-from`,leaveActiveClass:f=`${n}-leave-active`,leaveToClass:m=`${n}-leave-to`}=e,v=Cf(r),P=v&&v[0],_=v&&v[1],{onBeforeEnter:k,onEnter:S,onEnterCancelled:A,onLeave:T,onLeaveCancelled:U,onBeforeAppear:x=k,onAppear:y=S,onAppearCancelled:$=A}=t,O=(C,H,W)=>{$t(C,H?c:a),$t(C,H?u:s),W&&W()},N=(C,H)=>{$t(C,m),$t(C,f),H&&H()},B=C=>(H,W)=>{const D=C?y:S,G=()=>O(H,C,W);qt(D,[H,G]),Xi(()=>{$t(H,C?l:i),ct(H,C?c:a),Ji(D)||Gi(H,o,P,G)})};return qe(t,{onBeforeEnter(C){qt(k,[C]),ct(C,i),ct(C,s)},onBeforeAppear(C){qt(x,[C]),ct(C,l),ct(C,u)},onEnter:B(!1),onAppear:B(!0),onLeave(C,H){const W=()=>N(C,H);ct(C,d),aa(),ct(C,f),Xi(()=>{$t(C,d),ct(C,m),Ji(T)||Gi(C,o,_,W)}),qt(T,[C,W])},onEnterCancelled(C){O(C,!1),qt(A,[C])},onAppearCancelled(C){O(C,!0),qt($,[C])},onLeaveCancelled(C){N(C),qt(U,[C])}})}function Cf(e){if(e==null)return null;if(ke(e))return[Go(e.enter),Go(e.leave)];{const t=Go(e);return[t,t]}}function Go(e){return rl(e)}function ct(e,t){t.split(/\s+/).forEach(n=>n&&e.classList.add(n)),(e._vtc||(e._vtc=new Set)).add(t)}function $t(e,t){t.split(/\s+/).forEach(o=>o&&e.classList.remove(o));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function Xi(e){requestAnimationFrame(()=>{requestAnimationFrame(e)})}let kf=0;function Gi(e,t,n,o){const r=e._endId=++kf,i=()=>{r===e._endId&&o()};if(n)return setTimeout(i,n);const{type:s,timeout:a,propCount:l}=la(e,t);if(!s)return o();const u=s+"end";let c=0;const d=()=>{e.removeEventListener(u,f),i()},f=m=>{m.target===e&&++c>=l&&d()};setTimeout(()=>{c<l&&d()},a+1),e.addEventListener(u,f)}function la(e,t){const n=window.getComputedStyle(e),o=v=>(n[v]||"").split(", "),r=o(pt+"Delay"),i=o(pt+"Duration"),s=es(r,i),a=o(Rn+"Delay"),l=o(Rn+"Duration"),u=es(a,l);let c=null,d=0,f=0;t===pt?s>0&&(c=pt,d=s,f=i.length):t===Rn?u>0&&(c=Rn,d=u,f=l.length):(d=Math.max(s,u),c=d>0?s>u?pt:Rn:null,f=c?c===pt?i.length:l.length:0);const m=c===pt&&/\b(transform|all)(,|$)/.test(n[pt+"Property"]);return{type:c,timeout:d,propCount:f,hasTransform:m}}function es(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map((n,o)=>ts(n)+ts(e[o])))}function ts(e){return Number(e.slice(0,-1).replace(",","."))*1e3}function aa(){return document.body.offsetHeight}const ua=new WeakMap,ca=new WeakMap,Ef={name:"TransitionGroup",props:qe({},xf,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=Te(),o=$l();let r,i;return Vl(()=>{if(!r.length)return;const s=e.moveClass||`${e.name||"v"}-move`;if(!Af(r[0].el,n.vnode.el,s))return;r.forEach(Rf),r.forEach(Tf);const a=r.filter(Pf);aa(),a.forEach(l=>{const u=l.el,c=u.style;ct(u,s),c.transform=c.webkitTransform=c.transitionDuration="";const d=u._moveCb=f=>{f&&f.target!==u||(!f||/transform$/.test(f.propertyName))&&(u.removeEventListener("transitionend",d),u._moveCb=null,$t(u,s))};u.addEventListener("transitionend",d)})}),()=>{const s=he(e),a=sa(s);let l=s.tag||Ge;r=i,i=t.default?ri(t.default()):[];for(let u=0;u<i.length;u++){const c=i[u];c.key!=null&&Qn(c,Wn(c,a,o,n))}if(r)for(let u=0;u<r.length;u++){const c=r[u];Qn(c,Wn(c,a,o,n)),ua.set(c,c.el.getBoundingClientRect())}return Ve(l,null,i)}}},Sf=Ef;function Rf(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function Tf(e){ca.set(e,e.el.getBoundingClientRect())}function Pf(e){const t=ua.get(e),n=ca.get(e),o=t.left-n.left,r=t.top-n.top;if(o||r){const i=e.el.style;return i.transform=i.webkitTransform=`translate(${o}px,${r}px)`,i.transitionDuration="0s",e}}function Af(e,t,n){const o=e.cloneNode();e._vtc&&e._vtc.forEach(s=>{s.split(/\s+/).forEach(a=>a&&o.classList.remove(a))}),n.split(/\s+/).forEach(s=>s&&o.classList.add(s)),o.style.display="none";const r=t.nodeType===1?t:t.parentNode;r.appendChild(o);const{hasTransform:i}=la(o);return r.removeChild(o),i}const qf=qe({patchProp:_f},of);let ns;function Mf(){return ns||(ns=Ac(qf))}const ci=(...e)=>{const t=Mf().createApp(...e),{mount:n}=t;return t.mount=o=>{const r=$f(o);if(!r)return;const i=t._component;!le(i)&&!i.render&&!i.template&&(i.template=r.innerHTML),r.innerHTML="";const s=n(r,!1,r instanceof SVGElement);return r instanceof Element&&(r.removeAttribute("v-cloak"),r.setAttribute("data-v-app","")),s},t};function $f(e){return Re(e)?document.querySelector(e):e}function zo(e,t,n,o){Object.defineProperty(e,t,{get:n,set:o,enumerable:!0})}const Tt=me(!1);let Ho;function Of(e,t){const n=/(edg|edge|edga|edgios)\/([\w.]+)/.exec(e)||/(opr)[\/]([\w.]+)/.exec(e)||/(vivaldi)[\/]([\w.]+)/.exec(e)||/(chrome|crios)[\/]([\w.]+)/.exec(e)||/(version)(applewebkit)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(e)||/(webkit)[\/]([\w.]+).*(version)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(e)||/(firefox|fxios)[\/]([\w.]+)/.exec(e)||/(webkit)[\/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[\/]([\w.]+)/.exec(e)||[];return{browser:n[5]||n[3]||n[1]||"",version:n[2]||n[4]||"0",versionNumber:n[4]||n[2]||"0",platform:t[0]||""}}function Lf(e){return/(ipad)/.exec(e)||/(ipod)/.exec(e)||/(windows phone)/.exec(e)||/(iphone)/.exec(e)||/(kindle)/.exec(e)||/(silk)/.exec(e)||/(android)/.exec(e)||/(win)/.exec(e)||/(mac)/.exec(e)||/(linux)/.exec(e)||/(cros)/.exec(e)||/(playbook)/.exec(e)||/(bb)/.exec(e)||/(blackberry)/.exec(e)||[]}const fa="ontouchstart"in window||window.navigator.maxTouchPoints>0;function Bf(e){Ho={is:Y({},e)},delete e.mac,delete e.desktop;const t=Math.min(window.innerHeight,window.innerWidth)>414?"ipad":"iphone";Object.assign(e,{mobile:!0,ios:!0,platform:t,[t]:!0})}function Ff(e){const t=e.toLowerCase(),n=Lf(t),o=Of(t,n),r={};o.browser&&(r[o.browser]=!0,r.version=o.version,r.versionNumber=parseInt(o.versionNumber,10)),o.platform&&(r[o.platform]=!0);const i=r.android||r.ios||r.bb||r.blackberry||r.ipad||r.iphone||r.ipod||r.kindle||r.playbook||r.silk||r["windows phone"];return i===!0||t.indexOf("mobile")>-1?(r.mobile=!0,r.edga||r.edgios?(r.edge=!0,o.browser="edge"):r.crios?(r.chrome=!0,o.browser="chrome"):r.fxios&&(r.firefox=!0,o.browser="firefox")):r.desktop=!0,(r.ipod||r.ipad||r.iphone)&&(r.ios=!0),r["windows phone"]&&(r.winphone=!0,delete r["windows phone"]),(r.chrome||r.opr||r.safari||r.vivaldi||r.mobile===!0&&r.ios!==!0&&i!==!0)&&(r.webkit=!0),r.edg&&(o.browser="edgechromium",r.edgeChromium=!0),(r.safari&&r.blackberry||r.bb)&&(o.browser="blackberry",r.blackberry=!0),r.safari&&r.playbook&&(o.browser="playbook",r.playbook=!0),r.opr&&(o.browser="opera",r.opera=!0),r.safari&&r.android&&(o.browser="android",r.android=!0),r.safari&&r.kindle&&(o.browser="kindle",r.kindle=!0),r.safari&&r.silk&&(o.browser="silk",r.silk=!0),r.vivaldi&&(o.browser="vivaldi",r.vivaldi=!0),r.name=o.browser,r.platform=o.platform,t.indexOf("electron")>-1?r.electron=!0:document.location.href.indexOf("-extension://")>-1?r.bex=!0:(window.Capacitor!==void 0?(r.capacitor=!0,r.nativeMobile=!0,r.nativeMobileWrapper="capacitor"):(window._cordovaNative!==void 0||window.cordova!==void 0)&&(r.cordova=!0,r.nativeMobile=!0,r.nativeMobileWrapper="cordova"),fa===!0&&r.mac===!0&&(r.desktop===!0&&r.safari===!0||r.nativeMobile===!0&&r.android!==!0&&r.ios!==!0&&r.ipad!==!0)&&Bf(r)),r}const os=navigator.userAgent||navigator.vendor||window.opera,If={has:{touch:!1,webStorage:!1},within:{iframe:!1}},Se={userAgent:os,is:Ff(os),has:{touch:fa},within:{iframe:window.self!==window.top}},Ar={install(e){const{$q:t}=e;Tt.value===!0?(e.onSSRHydrated.push(()=>{Tt.value=!1,Object.assign(t.platform,Se),Ho=void 0}),t.platform=Kt(this)):t.platform=this}};{let e;zo(Se.has,"webStorage",()=>{if(e!==void 0)return e;try{if(window.localStorage)return e=!0,!0}catch{}return e=!1,!1}),Se.is.ios===!0&&window.navigator.vendor.toLowerCase().indexOf("apple"),Tt.value===!0?Object.assign(Ar,Se,Ho,If):Object.assign(Ar,Se)}var eo=(e,t)=>{const n=Kt(e);for(const o in e)zo(t,o,()=>n[o],r=>{n[o]=r});return t};const Ne={hasPassive:!1,passiveCapture:!0,notPassiveCapture:!0};try{const e=Object.defineProperty({},"passive",{get(){Object.assign(Ne,{hasPassive:!0,passive:{passive:!0},notPassive:{passive:!1},passiveCapture:{passive:!0,capture:!0},notPassiveCapture:{passive:!1,capture:!0}})}});window.addEventListener("qtest",null,e),window.removeEventListener("qtest",null,e)}catch{}function Zn(){}function wg(e){return e.button===0}function Nf(e){return e.touches&&e.touches[0]?e=e.touches[0]:e.changedTouches&&e.changedTouches[0]?e=e.changedTouches[0]:e.targetTouches&&e.targetTouches[0]&&(e=e.targetTouches[0]),{top:e.clientY,left:e.clientX}}function Vf(e){if(e.path)return e.path;if(e.composedPath)return e.composedPath();const t=[];let n=e.target;for(;n;){if(t.push(n),n.tagName==="HTML")return t.push(document),t.push(window),t;n=n.parentElement}}function So(e){e.stopPropagation()}function kt(e){e.cancelable!==!1&&e.preventDefault()}function Ke(e){e.cancelable!==!1&&e.preventDefault(),e.stopPropagation()}function xg(e,t){if(e===void 0||t===!0&&e.__dragPrevented===!0)return;const n=t===!0?o=>{o.__dragPrevented=!0,o.addEventListener("dragstart",kt,Ne.notPassiveCapture)}:o=>{delete o.__dragPrevented,o.removeEventListener("dragstart",kt,Ne.notPassiveCapture)};e.querySelectorAll("a, img").forEach(n)}function jf(e,t,n){const o=`__q_${t}_evt`;e[o]=e[o]!==void 0?e[o].concat(n):n,n.forEach(r=>{r[0].addEventListener(r[1],e[r[2]],Ne[r[3]])})}function Df(e,t){const n=`__q_${t}_evt`;e[n]!==void 0&&(e[n].forEach(o=>{o[0].removeEventListener(o[1],e[o[2]],Ne[o[3]])}),e[n]=void 0)}function da(e,t=250,n){let o;function r(){const i=arguments,s=()=>{o=void 0,n!==!0&&e.apply(this,i)};clearTimeout(o),n===!0&&o===void 0&&e.apply(this,i),o=setTimeout(s,t)}return r.cancel=()=>{clearTimeout(o)},r}const er=["sm","md","lg","xl"],{passive:rs}=Ne;var zf=eo({width:0,height:0,name:"xs",sizes:{sm:600,md:1024,lg:1440,xl:1920},lt:{sm:!0,md:!0,lg:!0,xl:!0},gt:{xs:!1,sm:!1,md:!1,lg:!1},xs:!0,sm:!1,md:!1,lg:!1,xl:!1},{setSizes:Zn,setDebounce:Zn,install({$q:e,onSSRHydrated:t}){if(e.screen=this,this.__installed===!0){e.config.screen!==void 0&&(e.config.screen.bodyClasses===!1?document.body.classList.remove(`screen--${this.name}`):this.__update(!0));return}const{visualViewport:n}=window,o=n||window,r=document.scrollingElement||document.documentElement,i=n===void 0||Se.is.mobile===!0?()=>[Math.max(window.innerWidth,r.clientWidth),Math.max(window.innerHeight,r.clientHeight)]:()=>[n.width*n.scale+window.innerWidth-r.clientWidth,n.height*n.scale+window.innerHeight-r.clientHeight],s=e.config.screen!==void 0&&e.config.screen.bodyClasses===!0;this.__update=d=>{const[f,m]=i();if(m!==this.height&&(this.height=m),f!==this.width)this.width=f;else if(d!==!0)return;let v=this.sizes;this.gt.xs=f>=v.sm,this.gt.sm=f>=v.md,this.gt.md=f>=v.lg,this.gt.lg=f>=v.xl,this.lt.sm=f<v.sm,this.lt.md=f<v.md,this.lt.lg=f<v.lg,this.lt.xl=f<v.xl,this.xs=this.lt.sm,this.sm=this.gt.xs===!0&&this.lt.md===!0,this.md=this.gt.sm===!0&&this.lt.lg===!0,this.lg=this.gt.md===!0&&this.lt.xl===!0,this.xl=this.gt.lg,v=this.xs===!0&&"xs"||this.sm===!0&&"sm"||this.md===!0&&"md"||this.lg===!0&&"lg"||"xl",v!==this.name&&(s===!0&&(document.body.classList.remove(`screen--${this.name}`),document.body.classList.add(`screen--${v}`)),this.name=v)};let a,l={},u=16;this.setSizes=d=>{er.forEach(f=>{d[f]!==void 0&&(l[f]=d[f])})},this.setDebounce=d=>{u=d};const c=()=>{const d=getComputedStyle(document.body);d.getPropertyValue("--q-size-sm")&&er.forEach(f=>{this.sizes[f]=parseInt(d.getPropertyValue(`--q-size-${f}`),10)}),this.setSizes=f=>{er.forEach(m=>{f[m]&&(this.sizes[m]=f[m])}),this.__update(!0)},this.setDebounce=f=>{a!==void 0&&o.removeEventListener("resize",a,rs),a=f>0?da(this.__update,f):this.__update,o.addEventListener("resize",a,rs)},this.setDebounce(u),Object.keys(l).length>0?(this.setSizes(l),l=void 0):this.__update(),s===!0&&this.name==="xs"&&document.body.classList.add("screen--xs")};Tt.value===!0?t.push(c):c()}});const Le=eo({isActive:!1,mode:!1},{__media:void 0,set(e){Le.mode=e,e==="auto"?(Le.__media===void 0&&(Le.__media=window.matchMedia("(prefers-color-scheme: dark)"),Le.__updateMedia=()=>{Le.set("auto")},Le.__media.addListener(Le.__updateMedia)),e=Le.__media.matches):Le.__media!==void 0&&(Le.__media.removeListener(Le.__updateMedia),Le.__media=void 0),Le.isActive=e===!0,document.body.classList.remove(`body--${e===!0?"light":"dark"}`),document.body.classList.add(`body--${e===!0?"dark":"light"}`)},toggle(){Le.set(Le.isActive===!1)},install({$q:e,onSSRHydrated:t,ssrContext:n}){const{dark:o}=e.config;if(e.dark=this,this.__installed===!0&&o===void 0)return;this.isActive=o===!0;const r=o!==void 0?o:!1;if(Tt.value===!0){const i=a=>{this.__fromSSR=a},s=this.set;this.set=i,i(r),t.push(()=>{this.set=s,this.set(this.__fromSSR)})}else this.set(r)}}),ha=()=>!0;function Hf(e){return typeof e=="string"&&e!==""&&e!=="/"&&e!=="#/"}function Uf(e){return e.startsWith("#")===!0&&(e=e.substring(1)),e.startsWith("/")===!1&&(e="/"+e),e.endsWith("/")===!0&&(e=e.substring(0,e.length-1)),"#"+e}function Kf(e){if(e.backButtonExit===!1)return()=>!1;if(e.backButtonExit==="*")return ha;const t=["#/"];return Array.isArray(e.backButtonExit)===!0&&t.push(...e.backButtonExit.filter(Hf).map(Uf)),()=>t.includes(window.location.hash)}var qr={__history:[],add:Zn,remove:Zn,install({$q:e}){if(this.__installed===!0)return;const{cordova:t,capacitor:n}=Se.is;if(t!==!0&&n!==!0)return;const o=e.config[t===!0?"cordova":"capacitor"];if(o!==void 0&&o.backButton===!1||n===!0&&(window.Capacitor===void 0||window.Capacitor.Plugins.App===void 0))return;this.add=s=>{s.condition===void 0&&(s.condition=ha),this.__history.push(s)},this.remove=s=>{const a=this.__history.indexOf(s);a>=0&&this.__history.splice(a,1)};const r=Kf(Object.assign({backButtonExit:!0},o)),i=()=>{if(this.__history.length){const s=this.__history[this.__history.length-1];s.condition()===!0&&(this.__history.pop(),s.handler())}else r()===!0?navigator.app.exitApp():window.history.back()};t===!0?document.addEventListener("deviceready",()=>{document.addEventListener("backbutton",i,!1)}):window.Capacitor.Plugins.App.addListener("backButton",i)}},is={isoName:"en-US",nativeName:"English (US)",label:{clear:"Clear",ok:"OK",cancel:"Cancel",close:"Close",set:"Set",select:"Select",reset:"Reset",remove:"Remove",update:"Update",create:"Create",search:"Search",filter:"Filter",refresh:"Refresh"},date:{days:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),daysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),firstDayOfWeek:0,format24h:!1,pluralDay:"days"},table:{noData:"No data available",noResults:"No matching records found",loading:"Loading...",selectedRecords:e=>e===1?"1 record selected.":(e===0?"No":e)+" records selected.",recordsPerPage:"Records per page:",allRows:"All",pagination:(e,t,n)=>e+"-"+t+" of "+n,columns:"Columns"},editor:{url:"URL",bold:"Bold",italic:"Italic",strikethrough:"Strikethrough",underline:"Underline",unorderedList:"Unordered List",orderedList:"Ordered List",subscript:"Subscript",superscript:"Superscript",hyperlink:"Hyperlink",toggleFullscreen:"Toggle Fullscreen",quote:"Quote",left:"Left align",center:"Center align",right:"Right align",justify:"Justify align",print:"Print",outdent:"Decrease indentation",indent:"Increase indentation",removeFormat:"Remove formatting",formatting:"Formatting",fontSize:"Font Size",align:"Align",hr:"Insert Horizontal Rule",undo:"Undo",redo:"Redo",heading1:"Heading 1",heading2:"Heading 2",heading3:"Heading 3",heading4:"Heading 4",heading5:"Heading 5",heading6:"Heading 6",paragraph:"Paragraph",code:"Code",size1:"Very small",size2:"A bit small",size3:"Normal",size4:"Medium-large",size5:"Big",size6:"Very big",size7:"Maximum",defaultFont:"Default Font",viewSource:"View Source"},tree:{noNodes:"No nodes available",noResults:"No matching nodes found"}};function ss(){const e=Array.isArray(navigator.languages)===!0&&navigator.languages.length>0?navigator.languages[0]:navigator.language;if(typeof e=="string")return e.split(/[-_]/).map((t,n)=>n===0?t.toLowerCase():n>1||t.length<4?t.toUpperCase():t[0].toUpperCase()+t.slice(1).toLowerCase()).join("-")}const xt=eo({__langPack:{}},{getLocale:ss,set(e=is,t){const n=ce(Y({},e),{rtl:e.rtl===!0,getLocale:ss});{const o=document.documentElement;o.setAttribute("dir",n.rtl===!0?"rtl":"ltr"),o.setAttribute("lang",n.isoName),n.set=xt.set,Object.assign(xt.__langPack,n),xt.props=n,xt.isoName=n.isoName,xt.nativeName=n.nativeName}},install({$q:e,lang:t,ssrContext:n}){e.lang=xt.__langPack,this.__installed===!0?t!==void 0&&this.set(t):this.set(t||is)}});function Wf(e,t,n=document.body){if(typeof e!="string")throw new TypeError("Expected a string as propName");if(typeof t!="string")throw new TypeError("Expected a string as value");if(!(n instanceof Element))throw new TypeError("Expected a DOM element");n.style.setProperty(`--q-${e}`,t)}let ma=!1;function Qf(e){ma=e.isComposing===!0}function ga(e){return ma===!0||e!==Object(e)||e.isComposing===!0||e.qKeyEvent===!0}function Jn(e,t){return ga(e)===!0?!1:[].concat(t).includes(e.keyCode)}function Yf(e){if(e.ios===!0)return"ios";if(e.android===!0)return"android"}function Zf({is:e,has:t,within:n},o){const r=[e.desktop===!0?"desktop":"mobile",`${t.touch===!1?"no-":""}touch`];if(e.mobile===!0){const i=Yf(e);i!==void 0&&r.push("platform-"+i)}if(e.nativeMobile===!0){const i=e.nativeMobileWrapper;r.push(i),r.push("native-mobile"),e.ios===!0&&(o[i]===void 0||o[i].iosStatusBarPadding!==!1)&&r.push("q-ios-padding")}else e.electron===!0?r.push("electron"):e.bex===!0&&r.push("bex");return n.iframe===!0&&r.push("within-iframe"),r}function Jf(){const e=document.body.className;let t=e;Ho!==void 0&&(t=t.replace("desktop","platform-ios mobile")),Se.has.touch===!0&&(t=t.replace("no-touch","touch")),Se.within.iframe===!0&&(t+=" within-iframe"),e!==t&&(document.body.className=t)}function Xf(e){for(const t in e)Wf(t,e[t])}var Gf={install(e){if(this.__installed!==!0){if(Tt.value===!0)Jf();else{const{$q:t}=e;t.config.brand!==void 0&&Xf(t.config.brand);const n=Zf(Se,t.config);document.body.classList.add.apply(document.body.classList,n)}Se.is.ios===!0&&document.body.addEventListener("touchstart",Zn),window.addEventListener("keydown",Qf,!0)}}},ed={name:"material-icons",type:{positive:"check_circle",negative:"warning",info:"info",warning:"priority_high"},arrow:{up:"arrow_upward",right:"arrow_forward",down:"arrow_downward",left:"arrow_back",dropdown:"arrow_drop_down"},chevron:{left:"chevron_left",right:"chevron_right"},colorPicker:{spectrum:"gradient",tune:"tune",palette:"style"},pullToRefresh:{icon:"refresh"},carousel:{left:"chevron_left",right:"chevron_right",up:"keyboard_arrow_up",down:"keyboard_arrow_down",navigationIcon:"lens"},chip:{remove:"cancel",selected:"check"},datetime:{arrowLeft:"chevron_left",arrowRight:"chevron_right",now:"access_time",today:"today"},editor:{bold:"format_bold",italic:"format_italic",strikethrough:"strikethrough_s",underline:"format_underlined",unorderedList:"format_list_bulleted",orderedList:"format_list_numbered",subscript:"vertical_align_bottom",superscript:"vertical_align_top",hyperlink:"link",toggleFullscreen:"fullscreen",quote:"format_quote",left:"format_align_left",center:"format_align_center",right:"format_align_right",justify:"format_align_justify",print:"print",outdent:"format_indent_decrease",indent:"format_indent_increase",removeFormat:"format_clear",formatting:"text_format",fontSize:"format_size",align:"format_align_left",hr:"remove",undo:"undo",redo:"redo",heading:"format_size",code:"code",size:"format_size",font:"font_download",viewSource:"code"},expansionItem:{icon:"keyboard_arrow_down",denseIcon:"arrow_drop_down"},fab:{icon:"add",activeIcon:"close"},field:{clear:"cancel",error:"error"},pagination:{first:"first_page",prev:"keyboard_arrow_left",next:"keyboard_arrow_right",last:"last_page"},rating:{icon:"grade"},stepper:{done:"check",active:"edit",error:"warning"},tabs:{left:"chevron_left",right:"chevron_right",up:"keyboard_arrow_up",down:"keyboard_arrow_down"},table:{arrowUp:"arrow_upward",warning:"warning",firstPage:"first_page",prevPage:"chevron_left",nextPage:"chevron_right",lastPage:"last_page"},tree:{icon:"play_arrow"},uploader:{done:"done",clear:"clear",add:"add_box",upload:"cloud_upload",removeQueue:"clear_all",removeUploaded:"done_all"}};const Ro=eo({iconMapFn:null,__icons:{}},{set(e,t){const n=ce(Y({},e),{rtl:e.rtl===!0});n.set=Ro.set,Object.assign(Ro.__icons,n)},install({$q:e,iconSet:t,ssrContext:n}){e.config.iconMapFn!==void 0&&(this.iconMapFn=e.config.iconMapFn),e.iconSet=this.__icons,zo(e,"iconMapFn",()=>this.iconMapFn,o=>{this.iconMapFn=o}),this.__installed===!0?t!==void 0&&this.set(t):this.set(t||ed)}}),td="_q_",Cg="_q_l_",kg="_q_pc_",nd="_q_fo_",To={};let va=!1;function od(){va=!0}function We(e){return e!==null&&typeof e=="object"&&Array.isArray(e)!==!0}const ls=[Ar,Gf,Le,zf,qr,xt,Ro];function pa(e,t){const n=ci(e);n.config.globalProperties=t.config.globalProperties;const i=t._context,{reload:o}=i,r=Jt(i,["reload"]);return Object.assign(n._context,r),n}function as(e,t){t.forEach(n=>{n.install(e),n.__installed=!0})}function rd(e,t,n){e.config.globalProperties.$q=n.$q,e.provide(td,n.$q),as(n,ls),t.components!==void 0&&Object.values(t.components).forEach(o=>{We(o)===!0&&o.name!==void 0&&e.component(o.name,o)}),t.directives!==void 0&&Object.values(t.directives).forEach(o=>{We(o)===!0&&o.name!==void 0&&e.directive(o.name,o)}),t.plugins!==void 0&&as(n,Object.values(t.plugins).filter(o=>typeof o.install=="function"&&ls.includes(o)===!1)),Tt.value===!0&&(n.$q.onSSRHydrated=()=>{n.onSSRHydrated.forEach(o=>{o()}),n.$q.onSSRHydrated=()=>{}})}var id=function(e,t={}){const n={version:"2.6.6"};va===!1?(t.config!==void 0&&Object.assign(To,t.config),n.config=Y({},To),od()):n.config=t.config||{},rd(e,t,{parentApp:e,$q:n,lang:t.lang,iconSet:t.iconSet,onSSRHydrated:[]})},sd={version:"2.6.6",install:id,lang:xt,iconSet:Ro},ld=(e,t)=>{const n=e.__vccOpts||e;for(const[o,r]of t)n[o]=r;return n};const ad=Io({name:"App"});function ud(e,t,n,o,r,i){const s=Fc("router-view");return Jl(),Gl(s)}var cd=ld(ad,[["render",ud]]);function Eg(e){return e}var fd=!1;/*!
  * pinia v2.0.13
  * (c) 2022 Eduardo San Martin Morote
  * @license MIT
  */const dd=e=>e,hd=Symbol();var us;(function(e){e.direct="direct",e.patchObject="patch object",e.patchFunction="patch function"})(us||(us={}));function md(){const e=bu(!0),t=e.run(()=>me({}));let n=[],o=[];const r=Wt({install(i){dd(r),r._a=i,i.provide(hd,r),i.config.globalProperties.$pinia=r,o.forEach(s=>n.push(s)),o=[]},use(i){return!this._a&&!fd?o.push(i):n.push(i),this},_p:n,_a:null,_e:e,_s:new Map,state:t});return r}var tr=()=>md();/*!
  * vue-router v4.0.14
  * (c) 2022 Eduardo San Martin Morote
  * @license MIT
  */const ba=typeof Symbol=="function"&&typeof Symbol.toStringTag=="symbol",Cn=e=>ba?Symbol(e):"_vr_"+e,gd=Cn("rvlm"),cs=Cn("rvd"),fi=Cn("r"),ya=Cn("rl"),Mr=Cn("rvl"),an=typeof window!="undefined";function vd(e){return e.__esModule||ba&&e[Symbol.toStringTag]==="Module"}const pe=Object.assign;function nr(e,t){const n={};for(const o in t){const r=t[o];n[o]=Array.isArray(r)?r.map(e):e(r)}return n}const jn=()=>{},pd=/\/$/,bd=e=>e.replace(pd,"");function or(e,t,n="/"){let o,r={},i="",s="";const a=t.indexOf("?"),l=t.indexOf("#",a>-1?a:0);return a>-1&&(o=t.slice(0,a),i=t.slice(a+1,l>-1?l:t.length),r=e(i)),l>-1&&(o=o||t.slice(0,l),s=t.slice(l,t.length)),o=xd(o!=null?o:t,n),{fullPath:o+(i&&"?")+i+s,path:o,query:r,hash:s}}function yd(e,t){const n=t.query?e(t.query):"";return t.path+(n&&"?")+n+(t.hash||"")}function fs(e,t){return!t||!e.toLowerCase().startsWith(t.toLowerCase())?e:e.slice(t.length)||"/"}function _d(e,t,n){const o=t.matched.length-1,r=n.matched.length-1;return o>-1&&o===r&&gn(t.matched[o],n.matched[r])&&_a(t.params,n.params)&&e(t.query)===e(n.query)&&t.hash===n.hash}function gn(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function _a(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e)if(!wd(e[n],t[n]))return!1;return!0}function wd(e,t){return Array.isArray(e)?ds(e,t):Array.isArray(t)?ds(t,e):e===t}function ds(e,t){return Array.isArray(t)?e.length===t.length&&e.every((n,o)=>n===t[o]):e.length===1&&e[0]===t}function xd(e,t){if(e.startsWith("/"))return e;if(!e)return t;const n=t.split("/"),o=e.split("/");let r=n.length-1,i,s;for(i=0;i<o.length;i++)if(s=o[i],!(r===1||s==="."))if(s==="..")r--;else break;return n.slice(0,r).join("/")+"/"+o.slice(i-(i===o.length?1:0)).join("/")}var Xn;(function(e){e.pop="pop",e.push="push"})(Xn||(Xn={}));var Dn;(function(e){e.back="back",e.forward="forward",e.unknown=""})(Dn||(Dn={}));function Cd(e){if(!e)if(an){const t=document.querySelector("base");e=t&&t.getAttribute("href")||"/",e=e.replace(/^\w+:\/\/[^\/]+/,"")}else e="/";return e[0]!=="/"&&e[0]!=="#"&&(e="/"+e),bd(e)}const kd=/^[^#]+#/;function Ed(e,t){return e.replace(kd,"#")+t}function Sd(e,t){const n=document.documentElement.getBoundingClientRect(),o=e.getBoundingClientRect();return{behavior:t.behavior,left:o.left-n.left-(t.left||0),top:o.top-n.top-(t.top||0)}}const Uo=()=>({left:window.pageXOffset,top:window.pageYOffset});function Rd(e){let t;if("el"in e){const n=e.el,o=typeof n=="string"&&n.startsWith("#"),r=typeof n=="string"?o?document.getElementById(n.slice(1)):document.querySelector(n):n;if(!r)return;t=Sd(r,e)}else t=e;"scrollBehavior"in document.documentElement.style?window.scrollTo(t):window.scrollTo(t.left!=null?t.left:window.pageXOffset,t.top!=null?t.top:window.pageYOffset)}function hs(e,t){return(history.state?history.state.position-t:-1)+e}const $r=new Map;function Td(e,t){$r.set(e,t)}function Pd(e){const t=$r.get(e);return $r.delete(e),t}let Ad=()=>location.protocol+"//"+location.host;function wa(e,t){const{pathname:n,search:o,hash:r}=t,i=e.indexOf("#");if(i>-1){let a=r.includes(e.slice(i))?e.slice(i).length:1,l=r.slice(a);return l[0]!=="/"&&(l="/"+l),fs(l,"")}return fs(n,e)+o+r}function qd(e,t,n,o){let r=[],i=[],s=null;const a=({state:f})=>{const m=wa(e,location),v=n.value,P=t.value;let _=0;if(f){if(n.value=m,t.value=f,s&&s===v){s=null;return}_=P?f.position-P.position:0}else o(m);r.forEach(k=>{k(n.value,v,{delta:_,type:Xn.pop,direction:_?_>0?Dn.forward:Dn.back:Dn.unknown})})};function l(){s=n.value}function u(f){r.push(f);const m=()=>{const v=r.indexOf(f);v>-1&&r.splice(v,1)};return i.push(m),m}function c(){const{history:f}=window;!f.state||f.replaceState(pe({},f.state,{scroll:Uo()}),"")}function d(){for(const f of i)f();i=[],window.removeEventListener("popstate",a),window.removeEventListener("beforeunload",c)}return window.addEventListener("popstate",a),window.addEventListener("beforeunload",c),{pauseListeners:l,listen:u,destroy:d}}function ms(e,t,n,o=!1,r=!1){return{back:e,current:t,forward:n,replaced:o,position:window.history.length,scroll:r?Uo():null}}function Md(e){const{history:t,location:n}=window,o={value:wa(e,n)},r={value:t.state};r.value||i(o.value,{back:null,current:o.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0);function i(l,u,c){const d=e.indexOf("#"),f=d>-1?(n.host&&document.querySelector("base")?e:e.slice(d))+l:Ad()+e+l;try{t[c?"replaceState":"pushState"](u,"",f),r.value=u}catch(m){console.error(m),n[c?"replace":"assign"](f)}}function s(l,u){const c=pe({},t.state,ms(r.value.back,l,r.value.forward,!0),u,{position:r.value.position});i(l,c,!0),o.value=l}function a(l,u){const c=pe({},r.value,t.state,{forward:l,scroll:Uo()});i(c.current,c,!0);const d=pe({},ms(o.value,l,null),{position:c.position+1},u);i(l,d,!1),o.value=l}return{location:o,state:r,push:a,replace:s}}function $d(e){e=Cd(e);const t=Md(e),n=qd(e,t.state,t.location,t.replace);function o(i,s=!0){s||n.pauseListeners(),history.go(i)}const r=pe({location:"",base:e,go:o,createHref:Ed.bind(null,e)},t,n);return Object.defineProperty(r,"location",{enumerable:!0,get:()=>t.location.value}),Object.defineProperty(r,"state",{enumerable:!0,get:()=>t.state.value}),r}function Od(e){return typeof e=="string"||e&&typeof e=="object"}function xa(e){return typeof e=="string"||typeof e=="symbol"}const bt={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},Ca=Cn("nf");var gs;(function(e){e[e.aborted=4]="aborted",e[e.cancelled=8]="cancelled",e[e.duplicated=16]="duplicated"})(gs||(gs={}));function vn(e,t){return pe(new Error,{type:e,[Ca]:!0},t)}function yt(e,t){return e instanceof Error&&Ca in e&&(t==null||!!(e.type&t))}const vs="[^/]+?",Ld={sensitive:!1,strict:!1,start:!0,end:!0},Bd=/[.+*?^${}()[\]/\\]/g;function Fd(e,t){const n=pe({},Ld,t),o=[];let r=n.start?"^":"";const i=[];for(const u of e){const c=u.length?[]:[90];n.strict&&!u.length&&(r+="/");for(let d=0;d<u.length;d++){const f=u[d];let m=40+(n.sensitive?.25:0);if(f.type===0)d||(r+="/"),r+=f.value.replace(Bd,"\\$&"),m+=40;else if(f.type===1){const{value:v,repeatable:P,optional:_,regexp:k}=f;i.push({name:v,repeatable:P,optional:_});const S=k||vs;if(S!==vs){m+=10;try{new RegExp(`(${S})`)}catch(T){throw new Error(`Invalid custom RegExp for param "${v}" (${S}): `+T.message)}}let A=P?`((?:${S})(?:/(?:${S}))*)`:`(${S})`;d||(A=_&&u.length<2?`(?:/${A})`:"/"+A),_&&(A+="?"),r+=A,m+=20,_&&(m+=-8),P&&(m+=-20),S===".*"&&(m+=-50)}c.push(m)}o.push(c)}if(n.strict&&n.end){const u=o.length-1;o[u][o[u].length-1]+=.7000000000000001}n.strict||(r+="/?"),n.end?r+="$":n.strict&&(r+="(?:/|$)");const s=new RegExp(r,n.sensitive?"":"i");function a(u){const c=u.match(s),d={};if(!c)return null;for(let f=1;f<c.length;f++){const m=c[f]||"",v=i[f-1];d[v.name]=m&&v.repeatable?m.split("/"):m}return d}function l(u){let c="",d=!1;for(const f of e){(!d||!c.endsWith("/"))&&(c+="/"),d=!1;for(const m of f)if(m.type===0)c+=m.value;else if(m.type===1){const{value:v,repeatable:P,optional:_}=m,k=v in u?u[v]:"";if(Array.isArray(k)&&!P)throw new Error(`Provided param "${v}" is an array but it is not repeatable (* or + modifiers)`);const S=Array.isArray(k)?k.join("/"):k;if(!S)if(_)f.length<2&&(c.endsWith("/")?c=c.slice(0,-1):d=!0);else throw new Error(`Missing required param "${v}"`);c+=S}}return c}return{re:s,score:o,keys:i,parse:a,stringify:l}}function Id(e,t){let n=0;for(;n<e.length&&n<t.length;){const o=t[n]-e[n];if(o)return o;n++}return e.length<t.length?e.length===1&&e[0]===40+40?-1:1:e.length>t.length?t.length===1&&t[0]===40+40?1:-1:0}function Nd(e,t){let n=0;const o=e.score,r=t.score;for(;n<o.length&&n<r.length;){const i=Id(o[n],r[n]);if(i)return i;n++}return r.length-o.length}const Vd={type:0,value:""},jd=/[a-zA-Z0-9_]/;function Dd(e){if(!e)return[[]];if(e==="/")return[[Vd]];if(!e.startsWith("/"))throw new Error(`Invalid path "${e}"`);function t(m){throw new Error(`ERR (${n})/"${u}": ${m}`)}let n=0,o=n;const r=[];let i;function s(){i&&r.push(i),i=[]}let a=0,l,u="",c="";function d(){!u||(n===0?i.push({type:0,value:u}):n===1||n===2||n===3?(i.length>1&&(l==="*"||l==="+")&&t(`A repeatable param (${u}) must be alone in its segment. eg: '/:ids+.`),i.push({type:1,value:u,regexp:c,repeatable:l==="*"||l==="+",optional:l==="*"||l==="?"})):t("Invalid state to consume buffer"),u="")}function f(){u+=l}for(;a<e.length;){if(l=e[a++],l==="\\"&&n!==2){o=n,n=4;continue}switch(n){case 0:l==="/"?(u&&d(),s()):l===":"?(d(),n=1):f();break;case 4:f(),n=o;break;case 1:l==="("?n=2:jd.test(l)?f():(d(),n=0,l!=="*"&&l!=="?"&&l!=="+"&&a--);break;case 2:l===")"?c[c.length-1]=="\\"?c=c.slice(0,-1)+l:n=3:c+=l;break;case 3:d(),n=0,l!=="*"&&l!=="?"&&l!=="+"&&a--,c="";break;default:t("Unknown state");break}}return n===2&&t(`Unfinished custom RegExp for param "${u}"`),d(),s(),r}function zd(e,t,n){const o=Fd(Dd(e.path),n),r=pe(o,{record:e,parent:t,children:[],alias:[]});return t&&!r.record.aliasOf==!t.record.aliasOf&&t.children.push(r),r}function Hd(e,t){const n=[],o=new Map;t=bs({strict:!1,end:!0,sensitive:!1},t);function r(c){return o.get(c)}function i(c,d,f){const m=!f,v=Kd(c);v.aliasOf=f&&f.record;const P=bs(t,c),_=[v];if("alias"in c){const A=typeof c.alias=="string"?[c.alias]:c.alias;for(const T of A)_.push(pe({},v,{components:f?f.record.components:v.components,path:T,aliasOf:f?f.record:v}))}let k,S;for(const A of _){const{path:T}=A;if(d&&T[0]!=="/"){const U=d.record.path,x=U[U.length-1]==="/"?"":"/";A.path=d.record.path+(T&&x+T)}if(k=zd(A,d,P),f?f.alias.push(k):(S=S||k,S!==k&&S.alias.push(k),m&&c.name&&!ps(k)&&s(c.name)),"children"in v){const U=v.children;for(let x=0;x<U.length;x++)i(U[x],k,f&&f.children[x])}f=f||k,l(k)}return S?()=>{s(S)}:jn}function s(c){if(xa(c)){const d=o.get(c);d&&(o.delete(c),n.splice(n.indexOf(d),1),d.children.forEach(s),d.alias.forEach(s))}else{const d=n.indexOf(c);d>-1&&(n.splice(d,1),c.record.name&&o.delete(c.record.name),c.children.forEach(s),c.alias.forEach(s))}}function a(){return n}function l(c){let d=0;for(;d<n.length&&Nd(c,n[d])>=0&&(c.record.path!==n[d].record.path||!ka(c,n[d]));)d++;n.splice(d,0,c),c.record.name&&!ps(c)&&o.set(c.record.name,c)}function u(c,d){let f,m={},v,P;if("name"in c&&c.name){if(f=o.get(c.name),!f)throw vn(1,{location:c});P=f.record.name,m=pe(Ud(d.params,f.keys.filter(S=>!S.optional).map(S=>S.name)),c.params),v=f.stringify(m)}else if("path"in c)v=c.path,f=n.find(S=>S.re.test(v)),f&&(m=f.parse(v),P=f.record.name);else{if(f=d.name?o.get(d.name):n.find(S=>S.re.test(d.path)),!f)throw vn(1,{location:c,currentLocation:d});P=f.record.name,m=pe({},d.params,c.params),v=f.stringify(m)}const _=[];let k=f;for(;k;)_.unshift(k.record),k=k.parent;return{name:P,path:v,params:m,matched:_,meta:Qd(_)}}return e.forEach(c=>i(c)),{addRoute:i,resolve:u,removeRoute:s,getRoutes:a,getRecordMatcher:r}}function Ud(e,t){const n={};for(const o of t)o in e&&(n[o]=e[o]);return n}function Kd(e){return{path:e.path,redirect:e.redirect,name:e.name,meta:e.meta||{},aliasOf:void 0,beforeEnter:e.beforeEnter,props:Wd(e),children:e.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in e?e.components||{}:{default:e.component}}}function Wd(e){const t={},n=e.props||!1;if("component"in e)t.default=n;else for(const o in e.components)t[o]=typeof n=="boolean"?n:n[o];return t}function ps(e){for(;e;){if(e.record.aliasOf)return!0;e=e.parent}return!1}function Qd(e){return e.reduce((t,n)=>pe(t,n.meta),{})}function bs(e,t){const n={};for(const o in e)n[o]=o in t?t[o]:e[o];return n}function ka(e,t){return t.children.some(n=>n===e||ka(e,n))}const Ea=/#/g,Yd=/&/g,Zd=/\//g,Jd=/=/g,Xd=/\?/g,Sa=/\+/g,Gd=/%5B/g,eh=/%5D/g,Ra=/%5E/g,th=/%60/g,Ta=/%7B/g,nh=/%7C/g,Pa=/%7D/g,oh=/%20/g;function di(e){return encodeURI(""+e).replace(nh,"|").replace(Gd,"[").replace(eh,"]")}function rh(e){return di(e).replace(Ta,"{").replace(Pa,"}").replace(Ra,"^")}function Or(e){return di(e).replace(Sa,"%2B").replace(oh,"+").replace(Ea,"%23").replace(Yd,"%26").replace(th,"`").replace(Ta,"{").replace(Pa,"}").replace(Ra,"^")}function ih(e){return Or(e).replace(Jd,"%3D")}function sh(e){return di(e).replace(Ea,"%23").replace(Xd,"%3F")}function lh(e){return e==null?"":sh(e).replace(Zd,"%2F")}function Po(e){try{return decodeURIComponent(""+e)}catch{}return""+e}function ah(e){const t={};if(e===""||e==="?")return t;const o=(e[0]==="?"?e.slice(1):e).split("&");for(let r=0;r<o.length;++r){const i=o[r].replace(Sa," "),s=i.indexOf("="),a=Po(s<0?i:i.slice(0,s)),l=s<0?null:Po(i.slice(s+1));if(a in t){let u=t[a];Array.isArray(u)||(u=t[a]=[u]),u.push(l)}else t[a]=l}return t}function ys(e){let t="";for(let n in e){const o=e[n];if(n=ih(n),o==null){o!==void 0&&(t+=(t.length?"&":"")+n);continue}(Array.isArray(o)?o.map(i=>i&&Or(i)):[o&&Or(o)]).forEach(i=>{i!==void 0&&(t+=(t.length?"&":"")+n,i!=null&&(t+="="+i))})}return t}function uh(e){const t={};for(const n in e){const o=e[n];o!==void 0&&(t[n]=Array.isArray(o)?o.map(r=>r==null?null:""+r):o==null?o:""+o)}return t}function Tn(){let e=[];function t(o){return e.push(o),()=>{const r=e.indexOf(o);r>-1&&e.splice(r,1)}}function n(){e=[]}return{add:t,list:()=>e,reset:n}}function Ct(e,t,n,o,r){const i=o&&(o.enterCallbacks[r]=o.enterCallbacks[r]||[]);return()=>new Promise((s,a)=>{const l=d=>{d===!1?a(vn(4,{from:n,to:t})):d instanceof Error?a(d):Od(d)?a(vn(2,{from:t,to:d})):(i&&o.enterCallbacks[r]===i&&typeof d=="function"&&i.push(d),s())},u=e.call(o&&o.instances[r],t,n,l);let c=Promise.resolve(u);e.length<3&&(c=c.then(l)),c.catch(d=>a(d))})}function rr(e,t,n,o){const r=[];for(const i of e)for(const s in i.components){let a=i.components[s];if(!(t!=="beforeRouteEnter"&&!i.instances[s]))if(ch(a)){const u=(a.__vccOpts||a)[t];u&&r.push(Ct(u,n,o,i,s))}else{let l=a();r.push(()=>l.then(u=>{if(!u)return Promise.reject(new Error(`Couldn't resolve component "${s}" at "${i.path}"`));const c=vd(u)?u.default:u;i.components[s]=c;const f=(c.__vccOpts||c)[t];return f&&Ct(f,n,o,i,s)()}))}}return r}function ch(e){return typeof e=="object"||"displayName"in e||"props"in e||"__vccOpts"in e}function _s(e){const t=dt(fi),n=dt(ya),o=w(()=>t.resolve(Bn(e.to))),r=w(()=>{const{matched:l}=o.value,{length:u}=l,c=l[u-1],d=n.matched;if(!c||!d.length)return-1;const f=d.findIndex(gn.bind(null,c));if(f>-1)return f;const m=ws(l[u-2]);return u>1&&ws(c)===m&&d[d.length-1].path!==m?d.findIndex(gn.bind(null,l[u-2])):f}),i=w(()=>r.value>-1&&mh(n.params,o.value.params)),s=w(()=>r.value>-1&&r.value===n.matched.length-1&&_a(n.params,o.value.params));function a(l={}){return hh(l)?t[Bn(e.replace)?"replace":"push"](Bn(e.to)).catch(jn):Promise.resolve()}return{route:o,href:w(()=>o.value.href),isActive:i,isExactActive:s,navigate:a}}const fh=Io({name:"RouterLink",props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:_s,setup(e,{slots:t}){const n=Kt(_s(e)),{options:o}=dt(fi),r=w(()=>({[xs(e.activeClass,o.linkActiveClass,"router-link-active")]:n.isActive,[xs(e.exactActiveClass,o.linkExactActiveClass,"router-link-exact-active")]:n.isExactActive}));return()=>{const i=t.default&&t.default(n);return e.custom?i:b("a",{"aria-current":n.isExactActive?e.ariaCurrentValue:null,href:n.href,onClick:n.navigate,class:r.value},i)}}}),dh=fh;function hh(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&!e.defaultPrevented&&!(e.button!==void 0&&e.button!==0)){if(e.currentTarget&&e.currentTarget.getAttribute){const t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}function mh(e,t){for(const n in t){const o=t[n],r=e[n];if(typeof o=="string"){if(o!==r)return!1}else if(!Array.isArray(r)||r.length!==o.length||o.some((i,s)=>i!==r[s]))return!1}return!0}function ws(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}const xs=(e,t,n)=>e!=null?e:t!=null?t:n,gh=Io({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},setup(e,{attrs:t,slots:n}){const o=dt(Mr),r=w(()=>e.route||o.value),i=dt(cs,0),s=w(()=>r.value.matched[i]);vo(cs,i+1),vo(gd,s),vo(Mr,r);const a=me();return _e(()=>[a.value,s.value,e.name],([l,u,c],[d,f,m])=>{u&&(u.instances[c]=l,f&&f!==u&&l&&l===d&&(u.leaveGuards.size||(u.leaveGuards=f.leaveGuards),u.updateGuards.size||(u.updateGuards=f.updateGuards))),l&&u&&(!f||!gn(u,f)||!d)&&(u.enterCallbacks[c]||[]).forEach(v=>v(l))},{flush:"post"}),()=>{const l=r.value,u=s.value,c=u&&u.components[e.name],d=e.name;if(!c)return Cs(n.default,{Component:c,route:l});const f=u.props[e.name],m=f?f===!0?l.params:typeof f=="function"?f(l):f:null,P=b(c,pe({},m,t,{onVnodeUnmounted:_=>{_.component.isUnmounted&&(u.instances[d]=null)},ref:a}));return Cs(n.default,{Component:P,route:l})||P}}});function Cs(e,t){if(!e)return null;const n=e(t);return n.length===1?n[0]:n}const vh=gh;function ph(e){const t=Hd(e.routes,e),n=e.parseQuery||ah,o=e.stringifyQuery||ys,r=e.history,i=Tn(),s=Tn(),a=Tn(),l=Ku(bt);let u=bt;an&&e.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const c=nr.bind(null,R=>""+R),d=nr.bind(null,lh),f=nr.bind(null,Po);function m(R,Z){let j,ee;return xa(R)?(j=t.getRecordMatcher(R),ee=Z):ee=R,t.addRoute(ee,j)}function v(R){const Z=t.getRecordMatcher(R);Z&&t.removeRoute(Z)}function P(){return t.getRoutes().map(R=>R.record)}function _(R){return!!t.getRecordMatcher(R)}function k(R,Z){if(Z=pe({},Z||l.value),typeof R=="string"){const ie=or(n,R,Z.path),h=t.resolve({path:ie.path},Z),g=r.createHref(ie.fullPath);return pe(ie,h,{params:f(h.params),hash:Po(ie.hash),redirectedFrom:void 0,href:g})}let j;if("path"in R)j=pe({},R,{path:or(n,R.path,Z.path).path});else{const ie=pe({},R.params);for(const h in ie)ie[h]==null&&delete ie[h];j=pe({},R,{params:d(R.params)}),Z.params=d(Z.params)}const ee=t.resolve(j,Z),X=R.hash||"";ee.params=c(f(ee.params));const ue=yd(o,pe({},R,{hash:rh(X),path:ee.path})),se=r.createHref(ue);return pe({fullPath:ue,hash:X,query:o===ys?uh(R.query):R.query||{}},ee,{redirectedFrom:void 0,href:se})}function S(R){return typeof R=="string"?or(n,R,l.value.path):pe({},R)}function A(R,Z){if(u!==R)return vn(8,{from:Z,to:R})}function T(R){return y(R)}function U(R){return T(pe(S(R),{replace:!0}))}function x(R){const Z=R.matched[R.matched.length-1];if(Z&&Z.redirect){const{redirect:j}=Z;let ee=typeof j=="function"?j(R):j;return typeof ee=="string"&&(ee=ee.includes("?")||ee.includes("#")?ee=S(ee):{path:ee},ee.params={}),pe({query:R.query,hash:R.hash,params:R.params},ee)}}function y(R,Z){const j=u=k(R),ee=l.value,X=R.state,ue=R.force,se=R.replace===!0,ie=x(j);if(ie)return y(pe(S(ie),{state:X,force:ue,replace:se}),Z||j);const h=j;h.redirectedFrom=Z;let g;return!ue&&_d(o,ee,j)&&(g=vn(16,{to:h,from:ee}),ae(ee,ee,!0,!1)),(g?Promise.resolve(g):O(h,ee)).catch(p=>yt(p)?yt(p,2)?p:F(p):E(p,h,ee)).then(p=>{if(p){if(yt(p,2))return y(pe(S(p.to),{state:X,force:ue,replace:se}),Z||h)}else p=B(h,ee,!0,se,X);return N(h,ee,p),p})}function $(R,Z){const j=A(R,Z);return j?Promise.reject(j):Promise.resolve()}function O(R,Z){let j;const[ee,X,ue]=bh(R,Z);j=rr(ee.reverse(),"beforeRouteLeave",R,Z);for(const ie of ee)ie.leaveGuards.forEach(h=>{j.push(Ct(h,R,Z))});const se=$.bind(null,R,Z);return j.push(se),Xt(j).then(()=>{j=[];for(const ie of i.list())j.push(Ct(ie,R,Z));return j.push(se),Xt(j)}).then(()=>{j=rr(X,"beforeRouteUpdate",R,Z);for(const ie of X)ie.updateGuards.forEach(h=>{j.push(Ct(h,R,Z))});return j.push(se),Xt(j)}).then(()=>{j=[];for(const ie of R.matched)if(ie.beforeEnter&&!Z.matched.includes(ie))if(Array.isArray(ie.beforeEnter))for(const h of ie.beforeEnter)j.push(Ct(h,R,Z));else j.push(Ct(ie.beforeEnter,R,Z));return j.push(se),Xt(j)}).then(()=>(R.matched.forEach(ie=>ie.enterCallbacks={}),j=rr(ue,"beforeRouteEnter",R,Z),j.push(se),Xt(j))).then(()=>{j=[];for(const ie of s.list())j.push(Ct(ie,R,Z));return j.push(se),Xt(j)}).catch(ie=>yt(ie,8)?ie:Promise.reject(ie))}function N(R,Z,j){for(const ee of a.list())ee(R,Z,j)}function B(R,Z,j,ee,X){const ue=A(R,Z);if(ue)return ue;const se=Z===bt,ie=an?history.state:{};j&&(ee||se?r.replace(R.fullPath,pe({scroll:se&&ie&&ie.scroll},X)):r.push(R.fullPath,X)),l.value=R,ae(R,Z,j,se),F()}let C;function H(){C=r.listen((R,Z,j)=>{const ee=k(R),X=x(ee);if(X){y(pe(X,{replace:!0}),ee).catch(jn);return}u=ee;const ue=l.value;an&&Td(hs(ue.fullPath,j.delta),Uo()),O(ee,ue).catch(se=>yt(se,12)?se:yt(se,2)?(y(se.to,ee).then(ie=>{yt(ie,20)&&!j.delta&&j.type===Xn.pop&&r.go(-1,!1)}).catch(jn),Promise.reject()):(j.delta&&r.go(-j.delta,!1),E(se,ee,ue))).then(se=>{se=se||B(ee,ue,!1),se&&(j.delta?r.go(-j.delta,!1):j.type===Xn.pop&&yt(se,20)&&r.go(-1,!1)),N(ee,ue,se)}).catch(jn)})}let W=Tn(),D=Tn(),G;function E(R,Z,j){F(R);const ee=D.list();return ee.length?ee.forEach(X=>X(R,Z,j)):console.error(R),Promise.reject(R)}function K(){return G&&l.value!==bt?Promise.resolve():new Promise((R,Z)=>{W.add([R,Z])})}function F(R){return G||(G=!R,H(),W.list().forEach(([Z,j])=>R?j(R):Z()),W.reset()),R}function ae(R,Z,j,ee){const{scrollBehavior:X}=e;if(!an||!X)return Promise.resolve();const ue=!j&&Pd(hs(R.fullPath,0))||(ee||!j)&&history.state&&history.state.scroll||null;return Fe().then(()=>X(R,Z,ue)).then(se=>se&&Rd(se)).catch(se=>E(se,R,Z))}const Ce=R=>r.go(R);let xe;const ge=new Set;return{currentRoute:l,addRoute:m,removeRoute:v,hasRoute:_,getRoutes:P,resolve:k,options:e,push:T,replace:U,go:Ce,back:()=>Ce(-1),forward:()=>Ce(1),beforeEach:i.add,beforeResolve:s.add,afterEach:a.add,onError:D.add,isReady:K,install(R){const Z=this;R.component("RouterLink",dh),R.component("RouterView",vh),R.config.globalProperties.$router=Z,Object.defineProperty(R.config.globalProperties,"$route",{enumerable:!0,get:()=>Bn(l)}),an&&!xe&&l.value===bt&&(xe=!0,T(r.location).catch(X=>{}));const j={};for(const X in bt)j[X]=w(()=>l.value[X]);R.provide(fi,Z),R.provide(ya,Kt(j)),R.provide(Mr,l);const ee=R.unmount;ge.add(R),R.unmount=function(){ge.delete(R),ge.size<1&&(u=bt,C&&C(),l.value=bt,xe=!1,G=!1),ee()}}}}function Xt(e){return e.reduce((t,n)=>t.then(()=>n()),Promise.resolve())}function bh(e,t){const n=[],o=[],r=[],i=Math.max(t.matched.length,e.matched.length);for(let s=0;s<i;s++){const a=t.matched[s];a&&(e.matched.find(u=>gn(u,a))?o.push(a):n.push(a));const l=e.matched[s];l&&(t.matched.find(u=>gn(u,l))||r.push(l))}return[n,o,r]}const yh=[{path:"/",component:()=>Ln(()=>import("./MainLayout.10b5e4ba.js"),[]),children:[{path:"",component:()=>Ln(()=>import("./IndexPage.70728cbc.js"),[])}]},{path:"/:catchAll(.*)*",component:()=>Ln(()=>import("./ErrorNotFound.c998582a.js"),[])}];var ir=function(){return ph({scrollBehavior:()=>({left:0,top:0}),routes:yh,history:$d("/")})};async function _h(e,t){const n=e(cd);n.use(sd,t);const o=typeof tr=="function"?await tr({}):tr;n.use(o);const r=Wt(typeof ir=="function"?await ir({store:o}):ir);return o.use(({store:i})=>{i.router=r}),{app:n,store:o,router:r}}const Lr={xs:18,sm:24,md:32,lg:38,xl:46},kn={size:String};function En(e,t=Lr){return w(()=>e.size!==void 0?{fontSize:e.size in t?`${t[e.size]}px`:e.size}:null)}const Oe=e=>Wt(Io(e)),wh=e=>Wt(e);function tt(e,t){return e!==void 0&&e()||t}function Sg(e,t){if(e!==void 0){const n=e();if(n!=null)return n.slice()}return t}function Ft(e,t){return e!==void 0?t.concat(e()):t}function Aa(e,t){return e===void 0?t:t!==void 0?t.concat(e()):e()}function Rg(e,t,n,o,r,i){t.key=o+r;const s=b(e,t,n);return r===!0?Ql(s,i()):s}const ks="0 0 24 24",Es=e=>e,sr=e=>`ionicons ${e}`,qa={"mdi-":e=>`mdi ${e}`,"icon-":Es,"bt-":e=>`bt ${e}`,"eva-":e=>`eva ${e}`,"ion-md":sr,"ion-ios":sr,"ion-logo":sr,"iconfont ":Es,"ti-":e=>`themify-icon ${e}`,"bi-":e=>`bootstrap-icons ${e}`},Ma={o_:"-outlined",r_:"-round",s_:"-sharp"},xh=new RegExp("^("+Object.keys(qa).join("|")+")"),Ch=new RegExp("^("+Object.keys(Ma).join("|")+")"),kh=/^[Mm]\s?[-+]?\.?\d/,Eh=/^img:/,Sh=/^svguse:/,Rh=/^ion-/,Th=/^(fa-(solid|regular|light|brands|duotone|thin)|[lf]a[srlbdk]?) /;var mt=Oe({name:"QIcon",props:ce(Y({},kn),{tag:{type:String,default:"i"},name:String,color:String,left:Boolean,right:Boolean}),setup(e,{slots:t}){const{proxy:{$q:n}}=Te(),o=En(e),r=w(()=>"q-icon"+(e.left===!0?" on-left":"")+(e.right===!0?" on-right":"")+(e.color!==void 0?` text-${e.color}`:"")),i=w(()=>{let s,a=e.name;if(a==="none"||!a)return{none:!0};if(n.iconMapFn!==null){const c=n.iconMapFn(a);if(c!==void 0)if(c.icon!==void 0){if(a=c.icon,a==="none"||!a)return{none:!0}}else return{cls:c.cls,content:c.content!==void 0?c.content:" "}}if(kh.test(a)===!0){const[c,d=ks]=a.split("|");return{svg:!0,viewBox:d,nodes:c.split("&&").map(f=>{const[m,v,P]=f.split("@@");return b("path",{style:v,d:m,transform:P})})}}if(Eh.test(a)===!0)return{img:!0,src:a.substring(4)};if(Sh.test(a)===!0){const[c,d=ks]=a.split("|");return{svguse:!0,src:c.substring(7),viewBox:d}}let l=" ";const u=a.match(xh);if(u!==null)s=qa[u[1]](a);else if(Th.test(a)===!0)s=a;else if(Rh.test(a)===!0)s=`ionicons ion-${n.platform.is.ios===!0?"ios":"md"}${a.substring(3)}`;else{s="notranslate material-icons";const c=a.match(Ch);c!==null&&(a=a.substring(2),s+=Ma[c[1]]),l=a}return{cls:s,content:l}});return()=>{const s={class:r.value,style:o.value,"aria-hidden":"true",role:"presentation"};return i.value.none===!0?b(e.tag,s,tt(t.default)):i.value.img===!0?b("span",s,Ft(t.default,[b("img",{src:i.value.src})])):i.value.svg===!0?b("span",s,Ft(t.default,[b("svg",{viewBox:i.value.viewBox},i.value.nodes)])):i.value.svguse===!0?b("span",s,Ft(t.default,[b("svg",{viewBox:i.value.viewBox},[b("use",{"xlink:href":i.value.src})])])):(i.value.cls!==void 0&&(s.class+=" "+i.value.cls),b(e.tag,s,Ft(t.default,[i.value.content])))}}}),Ph=Oe({name:"QAvatar",props:ce(Y({},kn),{fontSize:String,color:String,textColor:String,icon:String,square:Boolean,rounded:Boolean}),setup(e,{slots:t}){const n=En(e),o=w(()=>"q-avatar"+(e.color?` bg-${e.color}`:"")+(e.textColor?` text-${e.textColor} q-chip--colored`:"")+(e.square===!0?" q-avatar--square":e.rounded===!0?" rounded-borders":"")),r=w(()=>e.fontSize?{fontSize:e.fontSize}:null);return()=>{const i=e.icon!==void 0?[b(mt,{name:e.icon})]:void 0;return b("div",{class:o.value,style:n.value},[b("div",{class:"q-avatar__content row flex-center overflow-hidden",style:r.value},Aa(t.default,i))])}}});const Ah={size:{type:[Number,String],default:"1em"},color:String};function qh(e){return{cSize:w(()=>e.size in Lr?`${Lr[e.size]}px`:e.size),classes:w(()=>"q-spinner"+(e.color?` text-${e.color}`:""))}}var pn=Oe({name:"QSpinner",props:ce(Y({},Ah),{thickness:{type:Number,default:5}}),setup(e){const{cSize:t,classes:n}=qh(e);return()=>b("svg",{class:n.value+" q-spinner-mat",width:t.value,height:t.value,viewBox:"25 25 50 50"},[b("circle",{class:"path",cx:"50",cy:"50",r:"20",fill:"none",stroke:"currentColor","stroke-width":e.thickness,"stroke-miterlimit":"10"})])}});function Br(e,t){const n=e.style;for(const o in t)n[o]=t[o]}function Mh(e){if(e==null)return;if(typeof e=="string")try{return document.querySelector(e)||void 0}catch{return}const t=Ae(e)===!0?e.value:e;if(t)return t.$el||t}function $h(e,t){if(e==null||e.contains(t)===!0)return!0;for(let n=e.nextElementSibling;n!==null;n=n.nextElementSibling)if(n.contains(t))return!0;return!1}function Oh(e,t=250){let n=!1,o;return function(){return n===!1&&(n=!0,setTimeout(()=>{n=!1},t),o=e.apply(this,arguments)),o}}function Ss(e,t,n,o){n.modifiers.stop===!0&&So(e);const r=n.modifiers.color;let i=n.modifiers.center;i=i===!0||o===!0;const s=document.createElement("span"),a=document.createElement("span"),l=Nf(e),{left:u,top:c,width:d,height:f}=t.getBoundingClientRect(),m=Math.sqrt(d*d+f*f),v=m/2,P=`${(d-m)/2}px`,_=i?P:`${l.left-u-v}px`,k=`${(f-m)/2}px`,S=i?k:`${l.top-c-v}px`;a.className="q-ripple__inner",Br(a,{height:`${m}px`,width:`${m}px`,transform:`translate3d(${_},${S},0) scale3d(.2,.2,1)`,opacity:0}),s.className=`q-ripple${r?" text-"+r:""}`,s.setAttribute("dir","ltr"),s.appendChild(a),t.appendChild(s);const A=()=>{s.remove(),clearTimeout(T)};n.abort.push(A);let T=setTimeout(()=>{a.classList.add("q-ripple__inner--enter"),a.style.transform=`translate3d(${P},${k},0) scale3d(1,1,1)`,a.style.opacity=.2,T=setTimeout(()=>{a.classList.remove("q-ripple__inner--enter"),a.classList.add("q-ripple__inner--leave"),a.style.opacity=0,T=setTimeout(()=>{s.remove(),n.abort.splice(n.abort.indexOf(A),1)},275)},250)},50)}function Rs(e,{modifiers:t,value:n,arg:o,instance:r}){const i=Object.assign({},r.$q.config.ripple,t,n);e.modifiers={early:i.early===!0,stop:i.stop===!0,center:i.center===!0,color:i.color||o,keyCodes:[].concat(i.keyCodes||13)}}var Lh=wh({name:"ripple",beforeMount(e,t){const n={enabled:t.value!==!1,modifiers:{},abort:[],start(o){n.enabled===!0&&o.qSkipRipple!==!0&&(n.modifiers.early===!0?["mousedown","touchstart"].includes(o.type)===!0:o.type==="click")&&Ss(o,e,n,o.qKeyEvent===!0)},keystart:Oh(o=>{n.enabled===!0&&o.qSkipRipple!==!0&&Jn(o,n.modifiers.keyCodes)===!0&&o.type===`key${n.modifiers.early===!0?"down":"up"}`&&Ss(o,e,n,!0)},300)};Rs(n,t),e.__qripple=n,jf(n,"main",[[e,"mousedown","start","passive"],[e,"touchstart","start","passive"],[e,"click","start","passive"],[e,"keydown","keystart","passive"],[e,"keyup","keystart","passive"]])},updated(e,t){if(t.oldValue!==t.value){const n=e.__qripple;n.enabled=t.value!==!1,n.enabled===!0&&Object(t.value)===t.value&&Rs(n,t)}},beforeUnmount(e){const t=e.__qripple;t.abort.forEach(n=>{n()}),Df(t,"main"),delete e._qripple}});const $a={left:"start",center:"center",right:"end",between:"between",around:"around",evenly:"evenly",stretch:"stretch"},Bh=Object.keys($a),Oa={align:{type:String,validator:e=>Bh.includes(e)}};function La(e){return w(()=>{const t=e.align===void 0?e.vertical===!0?"stretch":"left":e.align;return`${e.vertical===!0?"items":"justify"}-${$a[t]}`})}function Ba(e){return e.appContext.config.globalProperties.$router!==void 0}function Ts(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}function Ps(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function Fh(e,t){for(const n in t){const o=t[n],r=e[n];if(typeof o=="string"){if(o!==r)return!1}else if(Array.isArray(r)===!1||r.length!==o.length||o.some((i,s)=>i!==r[s]))return!1}return!0}function As(e,t){return Array.isArray(t)===!0?e.length===t.length&&e.every((n,o)=>n===t[o]):e.length===1&&e[0]===t}function Ih(e,t){return Array.isArray(e)===!0?As(e,t):Array.isArray(t)===!0?As(t,e):e===t}function Nh(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e)if(Ih(e[n],t[n])===!1)return!1;return!0}const Vh={to:[String,Object],replace:Boolean,exact:Boolean,activeClass:{type:String,default:"q-router-link--active"},exactActiveClass:{type:String,default:"q-router-link--exact-active"},href:String,target:String,disable:Boolean};function jh(e){const t=Te(),{props:n,proxy:o}=t,r=Ba(t),i=w(()=>n.disable!==!0&&n.href!==void 0),s=w(()=>r===!0&&n.disable!==!0&&i.value!==!0&&n.to!==void 0&&n.to!==null&&n.to!==""),a=w(()=>{if(s.value===!0)try{return o.$router.resolve(n.to)}catch{}return null}),l=w(()=>a.value!==null),u=w(()=>i.value===!0||l.value===!0),c=w(()=>n.type==="a"||u.value===!0?"a":n.tag||e||"div"),d=w(()=>i.value===!0?{href:n.href,target:n.target}:l.value===!0?{href:a.value.href,target:n.target}:{}),f=w(()=>{if(l.value===!1)return null;const{matched:k}=a.value,{length:S}=k,A=k[S-1];if(A===void 0)return-1;const T=o.$route.matched;if(T.length===0)return-1;const U=T.findIndex(Ps.bind(null,A));if(U>-1)return U;const x=Ts(k[S-2]);return S>1&&Ts(A)===x&&T[T.length-1].path!==x?T.findIndex(Ps.bind(null,k[S-2])):U}),m=w(()=>l.value===!0&&f.value>-1&&Fh(o.$route.params,a.value.params)),v=w(()=>m.value===!0&&f.value===o.$route.matched.length-1&&Nh(o.$route.params,a.value.params)),P=w(()=>l.value===!0?v.value===!0?` ${n.exactActiveClass} ${n.activeClass}`:n.exact===!0?"":m.value===!0?` ${n.activeClass}`:"":"");function _(k){return n.disable===!0||k.metaKey||k.altKey||k.ctrlKey||k.shiftKey||k.__qNavigate!==!0&&k.defaultPrevented===!0||k.button!==void 0&&k.button!==0||n.target==="_blank"?!1:(kt(k),o.$router[n.replace===!0?"replace":"push"](n.to).catch(S=>S))}return{hasRouterLink:l,hasHrefLink:i,hasLink:u,linkTag:c,linkRoute:a,linkIsActive:m,linkIsExactActive:v,linkClass:P,linkProps:d,navigateToRouterLink:_}}const qs={none:0,xs:4,sm:8,md:16,lg:24,xl:32},Dh={xs:8,sm:10,md:14,lg:20,xl:24},zh=["button","submit","reset"],Hh=/[^\s]\/[^\s]/,Uh=ce(Y(Y({},kn),Vh),{type:{type:String,default:"button"},label:[Number,String],icon:String,iconRight:String,round:Boolean,outline:Boolean,flat:Boolean,unelevated:Boolean,rounded:Boolean,push:Boolean,glossy:Boolean,size:String,fab:Boolean,fabMini:Boolean,padding:String,color:String,textColor:String,noCaps:Boolean,noWrap:Boolean,dense:Boolean,tabindex:[Number,String],ripple:{type:[Boolean,Object],default:!0},align:ce(Y({},Oa.align),{default:"center"}),stack:Boolean,stretch:Boolean,loading:{type:Boolean,default:null},disable:Boolean});function Kh(e){const t=En(e,Dh),n=La(e),{hasRouterLink:o,hasLink:r,linkTag:i,linkProps:s,navigateToRouterLink:a}=jh("button"),l=w(()=>{const _=e.fab===!1&&e.fabMini===!1?t.value:{};return e.padding!==void 0?Object.assign({},_,{padding:e.padding.split(/\s+/).map(k=>k in qs?qs[k]+"px":k).join(" "),minWidth:"0",minHeight:"0"}):_}),u=w(()=>e.rounded===!0||e.fab===!0||e.fabMini===!0),c=w(()=>e.disable!==!0&&e.loading!==!0),d=w(()=>c.value===!0?e.tabindex||0:-1),f=w(()=>e.flat===!0?"flat":e.outline===!0?"outline":e.push===!0?"push":e.unelevated===!0?"unelevated":"standard"),m=w(()=>{const _={tabindex:d.value};return r.value===!0?Object.assign(_,s.value):zh.includes(e.type)===!0&&(_.type=e.type),i.value==="a"?(e.disable===!0?_["aria-disabled"]="true":_.href===void 0&&(_.role="button"),o.value!==!0&&Hh.test(e.type)===!0&&(_.type=e.type)):e.disable===!0&&(_.disabled="",_["aria-disabled"]="true"),e.loading===!0&&e.percentage!==void 0&&Object.assign(_,{role:"progressbar","aria-valuemin":0,"aria-valuemax":100,"aria-valuenow":e.percentage}),_}),v=w(()=>{let _;return e.color!==void 0?e.flat===!0||e.outline===!0?_=`text-${e.textColor||e.color}`:_=`bg-${e.color} text-${e.textColor||"white"}`:e.textColor&&(_=`text-${e.textColor}`),`q-btn--${f.value} q-btn--${e.round===!0?"round":`rectangle${u.value===!0?" q-btn--rounded":""}`}`+(_!==void 0?" "+_:"")+(c.value===!0?" q-btn--actionable q-focusable q-hoverable":e.disable===!0?" disabled":"")+(e.fab===!0?" q-btn--fab":e.fabMini===!0?" q-btn--fab-mini":"")+(e.noCaps===!0?" q-btn--no-uppercase":"")+(e.dense===!0?" q-btn--dense":"")+(e.stretch===!0?" no-border-radius self-stretch":"")+(e.glossy===!0?" glossy":"")}),P=w(()=>n.value+(e.stack===!0?" column":" row")+(e.noWrap===!0?" no-wrap text-no-wrap":"")+(e.loading===!0?" q-btn__content--hidden":""));return{classes:v,style:l,innerClasses:P,attributes:m,hasRouterLink:o,hasLink:r,linkTag:i,navigateToRouterLink:a,isActionable:c}}const{passiveCapture:Ue}=Ne;let Gt=null,en=null,tn=null;var Fr=Oe({name:"QBtn",props:ce(Y({},Uh),{percentage:Number,darkPercentage:Boolean}),emits:["click","keydown","touchstart","mousedown","keyup"],setup(e,{slots:t,emit:n}){const{proxy:o}=Te(),{classes:r,style:i,innerClasses:s,attributes:a,hasRouterLink:l,hasLink:u,linkTag:c,navigateToRouterLink:d,isActionable:f}=Kh(e),m=me(null),v=me(null);let P=null,_,k;const S=w(()=>e.label!==void 0&&e.label!==null&&e.label!==""),A=w(()=>e.disable===!0||e.ripple===!1?!1:Y({keyCodes:u.value===!0?[13,32]:[13]},e.ripple===!0?{}:e.ripple)),T=w(()=>({center:e.round})),U=w(()=>{const D=Math.max(0,Math.min(100,e.percentage));return D>0?{transition:"transform 0.6s",transform:`translateX(${D-100}%)`}:{}}),x=w(()=>e.loading===!0?{onMousedown:W,onTouchstartPassive:W,onClick:W,onKeydown:W,onKeyup:W}:f.value===!0?{onClick:$,onKeydown:O,onMousedown:B,onTouchstart:N}:{onClick:Ke}),y=w(()=>Y(Y({ref:m,class:"q-btn q-btn-item non-selectable no-outline "+r.value,style:i.value},a.value),x.value));function $(D){if(m.value!==null){if(D!==void 0){if(D.defaultPrevented===!0)return;const G=document.activeElement;if(e.type==="submit"&&G!==document.body&&m.value.contains(G)===!1&&G.contains(m.value)===!1){m.value.focus();const E=()=>{document.removeEventListener("keydown",Ke,!0),document.removeEventListener("keyup",E,Ue),m.value!==null&&m.value.removeEventListener("blur",E,Ue)};document.addEventListener("keydown",Ke,!0),document.addEventListener("keyup",E,Ue),m.value.addEventListener("blur",E,Ue)}}if(l.value===!0){const G=()=>{D.__qNavigate=!0,d(D)};n("click",D,G),D.defaultPrevented!==!0&&G()}else n("click",D)}}function O(D){m.value!==null&&(n("keydown",D),Jn(D,[13,32])===!0&&en!==m.value&&(en!==null&&H(),D.defaultPrevented!==!0&&(m.value.focus(),en=m.value,m.value.classList.add("q-btn--active"),document.addEventListener("keyup",C,!0),m.value.addEventListener("blur",C,Ue)),Ke(D)))}function N(D){m.value!==null&&(n("touchstart",D),D.defaultPrevented!==!0&&(Gt!==m.value&&(Gt!==null&&H(),Gt=m.value,P=D.target,P.addEventListener("touchcancel",C,Ue),P.addEventListener("touchend",C,Ue)),_=!0,clearTimeout(k),k=setTimeout(()=>{_=!1},200)))}function B(D){m.value!==null&&(D.qSkipRipple=_===!0,n("mousedown",D),D.defaultPrevented!==!0&&tn!==m.value&&(tn!==null&&H(),tn=m.value,m.value.classList.add("q-btn--active"),document.addEventListener("mouseup",C,Ue)))}function C(D){if(m.value!==null&&!(D!==void 0&&D.type==="blur"&&document.activeElement===m.value)){if(D!==void 0&&D.type==="keyup"){if(en===m.value&&Jn(D,[13,32])===!0){const G=new MouseEvent("click",D);G.qKeyEvent=!0,D.defaultPrevented===!0&&kt(G),D.cancelBubble===!0&&So(G),m.value.dispatchEvent(G),Ke(D),D.qKeyEvent=!0}n("keyup",D)}H()}}function H(D){const G=v.value;D!==!0&&(Gt===m.value||tn===m.value)&&G!==null&&G!==document.activeElement&&(G.setAttribute("tabindex",-1),G.focus()),Gt===m.value&&(P!==null&&(P.removeEventListener("touchcancel",C,Ue),P.removeEventListener("touchend",C,Ue)),Gt=P=null),tn===m.value&&(document.removeEventListener("mouseup",C,Ue),tn=null),en===m.value&&(document.removeEventListener("keyup",C,!0),m.value!==null&&m.value.removeEventListener("blur",C,Ue),en=null),m.value!==null&&m.value.classList.remove("q-btn--active")}function W(D){Ke(D),D.qSkipRipple=!0}return rt(()=>{H(!0)}),Object.assign(o,{click:$}),()=>{let D=[];e.icon!==void 0&&D.push(b(mt,{name:e.icon,left:e.stack===!1&&S.value===!0,role:"img","aria-hidden":"true"})),S.value===!0&&D.push(b("span",{class:"block"},[e.label])),D=Ft(t.default,D),e.iconRight!==void 0&&e.round===!1&&D.push(b(mt,{name:e.iconRight,right:e.stack===!1&&S.value===!0,role:"img","aria-hidden":"true"}));const G=[b("span",{class:"q-focus-helper",ref:v})];return e.loading===!0&&e.percentage!==void 0&&G.push(b("span",{class:"q-btn__progress absolute-full overflow-hidden"},[b("span",{class:"q-btn__progress-indicator fit block"+(e.darkPercentage===!0?" q-btn__progress--dark":""),style:U.value})])),G.push(b("span",{class:"q-btn__content text-center col items-center q-anchor--skip "+s.value},D)),e.loading!==null&&G.push(b(Ut,{name:"q-transition--fade"},()=>e.loading===!0?[b("span",{key:"loading",class:"absolute-full flex flex-center"},t.loading!==void 0?t.loading():[b(pn)])]:null)),Ql(b(c.value,y.value,G),[[Lh,A.value,void 0,T.value]])}}});let Wh=document.body;function Ko(e){const t=document.createElement("div");if(e!==void 0&&(t.id=e),To.globalNodes!==void 0){const n=To.globalNodes.class;n!==void 0&&(t.className=n)}return Wh.appendChild(t),t}function hi(e){e.remove()}let Qh=0;const bo={},yo={},Xe={},Fa={},Yh=/^\s*$/,Ia=[],mi=["top-left","top-right","bottom-left","bottom-right","top","bottom","left","right","center"],Zh=["top-left","top-right","bottom-left","bottom-right"],un={positive:{icon:e=>e.iconSet.type.positive,color:"positive"},negative:{icon:e=>e.iconSet.type.negative,color:"negative"},warning:{icon:e=>e.iconSet.type.warning,color:"warning",textColor:"dark"},info:{icon:e=>e.iconSet.type.info,color:"info"},ongoing:{group:!1,timeout:0,spinner:!0,color:"grey-8"}};function Na(e,t,n){if(!e)return Pn("parameter required");let o;const r={textColor:"white"};if(e.ignoreDefaults!==!0&&Object.assign(r,bo),We(e)===!1&&(r.type&&Object.assign(r,un[r.type]),e={message:e}),Object.assign(r,un[e.type||r.type],e),typeof r.icon=="function"&&(r.icon=r.icon(t)),r.spinner?(r.spinner===!0&&(r.spinner=pn),r.spinner=Wt(r.spinner)):r.spinner=!1,r.meta={hasMedia:Boolean(r.spinner!==!1||r.icon||r.avatar),hasText:Ms(r.message)||Ms(r.caption)},r.position){if(mi.includes(r.position)===!1)return Pn("wrong position",e)}else r.position="bottom";if(r.timeout===void 0)r.timeout=5e3;else{const l=parseInt(r.timeout,10);if(isNaN(l)||l<0)return Pn("wrong timeout",e);r.timeout=l}r.timeout===0?r.progress=!1:r.progress===!0&&(r.meta.progressClass="q-notification__progress"+(r.progressClass?` ${r.progressClass}`:""),r.meta.progressStyle={animationDuration:`${r.timeout+1e3}ms`});const i=(Array.isArray(e.actions)===!0?e.actions:[]).concat(e.ignoreDefaults!==!0&&Array.isArray(bo.actions)===!0?bo.actions:[]).concat(un[e.type]!==void 0&&Array.isArray(un[e.type].actions)===!0?un[e.type].actions:[]),{closeBtn:s}=r;if(s&&i.push({label:typeof s=="string"?s:t.lang.label.close}),r.actions=i.map(d=>{var f=d,{handler:l,noDismiss:u}=f,c=Jt(f,["handler","noDismiss"]);return ce(Y({flat:!0},c),{onClick:typeof l=="function"?()=>{l(),u!==!0&&a()}:()=>{a()}})}),r.multiLine===void 0&&(r.multiLine=r.actions.length>1),Object.assign(r.meta,{class:`q-notification row items-stretch q-notification--${r.multiLine===!0?"multi-line":"standard"}`+(r.color!==void 0?` bg-${r.color}`:"")+(r.textColor!==void 0?` text-${r.textColor}`:"")+(r.classes!==void 0?` ${r.classes}`:""),wrapperClass:"q-notification__wrapper col relative-position border-radius-inherit "+(r.multiLine===!0?"column no-wrap justify-center":"row items-center"),contentClass:"q-notification__content row items-center"+(r.multiLine===!0?"":" col"),leftClass:r.meta.hasText===!0?"additional":"single",attrs:Y({role:"alert"},r.attrs)}),r.group===!1?(r.group=void 0,r.meta.group=void 0):((r.group===void 0||r.group===!0)&&(r.group=[r.message,r.caption,r.multiline].concat(r.actions.map(l=>`${l.label}*${l.icon}`)).join("|")),r.meta.group=r.group+"|"+r.position),r.actions.length===0?r.actions=void 0:r.meta.actionsClass="q-notification__actions row items-center "+(r.multiLine===!0?"justify-end":"col-auto")+(r.meta.hasMedia===!0?" q-notification__actions--with-media":""),n!==void 0){clearTimeout(n.notif.meta.timer),r.meta.uid=n.notif.meta.uid;const l=Xe[r.position].value.indexOf(n.notif);Xe[r.position].value[l]=r}else{const l=yo[r.meta.group];if(l===void 0){if(r.meta.uid=Qh++,r.meta.badge=1,["left","right","center"].indexOf(r.position)!==-1)Xe[r.position].value.splice(Math.floor(Xe[r.position].value.length/2),0,r);else{const u=r.position.indexOf("top")>-1?"unshift":"push";Xe[r.position].value[u](r)}r.group!==void 0&&(yo[r.meta.group]=r)}else{if(clearTimeout(l.meta.timer),r.badgePosition!==void 0){if(Zh.includes(r.badgePosition)===!1)return Pn("wrong badgePosition",e)}else r.badgePosition=`top-${r.position.indexOf("left")>-1?"right":"left"}`;r.meta.uid=l.meta.uid,r.meta.badge=l.meta.badge+1,r.meta.badgeClass=`q-notification__badge q-notification__badge--${r.badgePosition}`+(r.badgeColor!==void 0?` bg-${r.badgeColor}`:"")+(r.badgeTextColor!==void 0?` text-${r.badgeTextColor}`:"")+(r.badgeClass?` ${r.badgeClass}`:"");const u=Xe[r.position].value.indexOf(l);Xe[r.position].value[u]=yo[r.meta.group]=r}}const a=()=>{Jh(r),o=void 0};if(r.timeout>0&&(r.meta.timer=setTimeout(()=>{a()},r.timeout+1e3)),r.group!==void 0)return l=>{l!==void 0?Pn("trying to update a grouped one which is forbidden",e):a()};if(o={dismiss:a,config:e,notif:r},n!==void 0){Object.assign(n,o);return}return l=>{if(o!==void 0)if(l===void 0)o.dismiss();else{const u=Object.assign({},o.config,l,{group:!1,position:r.position});Na(u,t,o)}}}function Jh(e){clearTimeout(e.meta.timer);const t=Xe[e.position].value.indexOf(e);if(t!==-1){e.group!==void 0&&delete yo[e.meta.group];const n=Ia[""+e.meta.uid];if(n){const{width:o,height:r}=getComputedStyle(n);n.style.left=`${n.offsetLeft}px`,n.style.width=o,n.style.height=r}Xe[e.position].value.splice(t,1),typeof e.onDismiss=="function"&&e.onDismiss()}}function Ms(e){return e!=null&&Yh.test(e)!==!0}function Pn(e,t){return console.error(`Notify: ${e}`,t),!1}function Xh(){return Oe({name:"QNotifications",devtools:{hide:!0},setup(){return()=>b("div",{class:"q-notifications"},mi.map(e=>b(Sf,{key:e,class:Fa[e],tag:"div",name:`q-notification--${e}`},()=>Xe[e].value.map(t=>{const n=t.meta,o=[];if(n.hasMedia===!0&&(t.spinner!==!1?o.push(b(t.spinner,{class:"q-notification__spinner q-notification__spinner--"+n.leftClass,color:t.spinnerColor,size:t.spinnerSize})):t.icon?o.push(b(mt,{class:"q-notification__icon q-notification__icon--"+n.leftClass,name:t.icon,color:t.iconColor,size:t.iconSize,role:"img"})):t.avatar&&o.push(b(Ph,{class:"q-notification__avatar q-notification__avatar--"+n.leftClass},()=>b("img",{src:t.avatar,"aria-hidden":"true"})))),n.hasText===!0){let i;const s={class:"q-notification__message col"};if(t.html===!0)s.innerHTML=t.caption?`<div>${t.message}</div><div class="q-notification__caption">${t.caption}</div>`:t.message;else{const a=[t.message];i=t.caption?[b("div",a),b("div",{class:"q-notification__caption"},[t.caption])]:a}o.push(b("div",s,i))}const r=[b("div",{class:n.contentClass},o)];return t.progress===!0&&r.push(b("div",{key:`${n.uid}|p|${n.badge}`,class:n.progressClass,style:n.progressStyle})),t.actions!==void 0&&r.push(b("div",{class:n.actionsClass},t.actions.map(i=>b(Fr,i)))),n.badge>1&&r.push(b("div",{key:`${n.uid}|${n.badge}`,class:t.meta.badgeClass,style:t.badgeStyle},[n.badge])),b("div",Y({ref:i=>{Ia[""+n.uid]=i},key:n.uid,class:n.class},n.attrs),[b("div",{class:n.wrapperClass},r)])}))))}})}var Gh={setDefaults(e){We(e)===!0&&Object.assign(bo,e)},registerType(e,t){We(t)===!0&&(un[e]=t)},install({$q:e,parentApp:t}){if(e.notify=this.create=n=>Na(n,e),e.notify.setDefaults=this.setDefaults,e.notify.registerType=this.registerType,e.config.notify!==void 0&&this.setDefaults(e.config.notify),this.__installed!==!0){mi.forEach(o=>{Xe[o]=me([]);const r=["left","center","right"].includes(o)===!0?"center":o.indexOf("top")>-1?"top":"bottom",i=o.indexOf("left")>-1?"start":o.indexOf("right")>-1?"end":"center",s=["left","right"].includes(o)?`items-${o==="left"?"start":"end"} justify-center`:o==="center"?"flex-center":`items-${i}`;Fa[o]=`q-notifications__list q-notifications__list--${r} fixed column no-wrap ${s}`});const n=Ko("q-notify");pa(Xh(),t).mount(n)}}};const em=[null,document,document.body,document.scrollingElement,document.documentElement];function Tg(e,t){let n=Mh(t);if(n===void 0){if(e==null)return window;n=e.closest(".scroll,.scroll-y,.overflow-auto")}return em.includes(n)?window:n}function tm(e){return e===window?window.pageYOffset||window.scrollY||document.body.scrollTop||0:e.scrollTop}function nm(e){return e===window?window.pageXOffset||window.scrollX||document.body.scrollLeft||0:e.scrollLeft}let ao;function Pg(){if(ao!==void 0)return ao;const e=document.createElement("p"),t=document.createElement("div");Br(e,{width:"100%",height:"200px"}),Br(t,{position:"absolute",top:"0px",left:"0px",visibility:"hidden",width:"200px",height:"150px",overflow:"hidden"}),t.appendChild(e),document.body.appendChild(t);const n=e.offsetWidth;t.style.overflow="scroll";let o=e.offsetWidth;return n===o&&(o=t.clientWidth),t.remove(),ao=n-o,ao}function om(e,t=!0){return!e||e.nodeType!==Node.ELEMENT_NODE?!1:t?e.scrollHeight>e.clientHeight&&(e.classList.contains("scroll")||e.classList.contains("overflow-auto")||["auto","scroll"].includes(window.getComputedStyle(e)["overflow-y"])):e.scrollWidth>e.clientWidth&&(e.classList.contains("scroll")||e.classList.contains("overflow-auto")||["auto","scroll"].includes(window.getComputedStyle(e)["overflow-x"]))}let An=0,lr,ar,On,ur=!1,$s,Os,nn;function rm(e){im(e)&&Ke(e)}function im(e){if(e.target===document.body||e.target.classList.contains("q-layout__backdrop"))return!0;const t=Vf(e),n=e.shiftKey&&!e.deltaX,o=!n&&Math.abs(e.deltaX)<=Math.abs(e.deltaY),r=n||o?e.deltaY:e.deltaX;for(let i=0;i<t.length;i++){const s=t[i];if(om(s,o))return o?r<0&&s.scrollTop===0?!0:r>0&&s.scrollTop+s.clientHeight===s.scrollHeight:r<0&&s.scrollLeft===0?!0:r>0&&s.scrollLeft+s.clientWidth===s.scrollWidth}return!0}function Ls(e){e.target===document&&(document.scrollingElement.scrollTop=document.scrollingElement.scrollTop)}function uo(e){ur!==!0&&(ur=!0,requestAnimationFrame(()=>{ur=!1;const{height:t}=e.target,{clientHeight:n,scrollTop:o}=document.scrollingElement;(On===void 0||t!==window.innerHeight)&&(On=n-t,document.scrollingElement.scrollTop=o),o>On&&(document.scrollingElement.scrollTop-=Math.ceil((o-On)/8))}))}function Bs(e){const t=document.body,n=window.visualViewport!==void 0;if(e==="add"){const{overflowY:o,overflowX:r}=window.getComputedStyle(t);lr=nm(window),ar=tm(window),$s=t.style.left,Os=t.style.top,t.style.left=`-${lr}px`,t.style.top=`-${ar}px`,r!=="hidden"&&(r==="scroll"||t.scrollWidth>window.innerWidth)&&t.classList.add("q-body--force-scrollbar-x"),o!=="hidden"&&(o==="scroll"||t.scrollHeight>window.innerHeight)&&t.classList.add("q-body--force-scrollbar-y"),t.classList.add("q-body--prevent-scroll"),document.qScrollPrevented=!0,Se.is.ios===!0&&(n===!0?(window.scrollTo(0,0),window.visualViewport.addEventListener("resize",uo,Ne.passiveCapture),window.visualViewport.addEventListener("scroll",uo,Ne.passiveCapture),window.scrollTo(0,0)):window.addEventListener("scroll",Ls,Ne.passiveCapture))}Se.is.desktop===!0&&Se.is.mac===!0&&window[`${e}EventListener`]("wheel",rm,Ne.notPassive),e==="remove"&&(Se.is.ios===!0&&(n===!0?(window.visualViewport.removeEventListener("resize",uo,Ne.passiveCapture),window.visualViewport.removeEventListener("scroll",uo,Ne.passiveCapture)):window.removeEventListener("scroll",Ls,Ne.passiveCapture)),t.classList.remove("q-body--prevent-scroll"),t.classList.remove("q-body--force-scrollbar-x"),t.classList.remove("q-body--force-scrollbar-y"),document.qScrollPrevented=!1,t.style.left=$s,t.style.top=Os,window.scrollTo(lr,ar),On=void 0)}function Ir(e){let t="add";if(e===!0){if(An++,nn!==void 0){clearTimeout(nn),nn=void 0;return}if(An>1)return}else{if(An===0||(An--,An>0))return;if(t="remove",Se.is.ios===!0&&Se.is.nativeMobile===!0){clearTimeout(nn),nn=setTimeout(()=>{Bs(t),nn=void 0},100);return}}Bs(t)}let on,cr,Fs=0,rn,Me={};const Va={delay:0,message:!1,html:!1,spinnerSize:80,spinnerColor:"",messageColor:"",backgroundColor:"",boxClass:"",spinner:pn,customClass:""},Is=Y({},Va),cn=eo({isActive:!1},{show(e){if(Me=We(e)===!0&&e.ignoreDefaults===!0?Y(Y({},Va),e):Y(Y({},Is),e),cn.isActive=!0,on!==void 0){Me.uid=Fs,cr.$forceUpdate();return}Me.uid=++Fs,clearTimeout(rn),rn=setTimeout(()=>{rn=void 0;const t=Ko("q-loading");on=ci({name:"QLoading",setup(){xn(()=>{Ir(!0)});function n(){cn.isActive!==!0&&on!==void 0&&(Ir(!1),on.unmount(t),hi(t),on=void 0,cr=void 0)}function o(){if(cn.isActive!==!0)return null;const r=[b(Me.spinner,{class:"q-loading__spinner",color:Me.spinnerColor,size:Me.spinnerSize})];return Me.message&&r.push(b("div",{class:"q-loading__message"+(Me.messageColor?` text-${Me.messageColor}`:""),[Me.html===!0?"innerHTML":"textContent"]:Me.message})),b("div",{class:"q-loading fullscreen flex flex-center z-max "+Me.customClass.trim(),key:Me.uid},[b("div",{class:"q-loading__backdrop"+(Me.backgroundColor?` bg-${Me.backgroundColor}`:"")}),b("div",{class:"q-loading__box column items-center "+Me.boxClass},r)])}return()=>b(Ut,{name:"q-transition--fade",appear:!0,onAfterLeave:n},o)}}),cr=on.mount(t)},Me.delay)},hide(){cn.isActive===!0&&(rn!==void 0&&(clearTimeout(rn),rn=void 0),cn.isActive=!1)},setDefaults(e){We(e)===!0&&Object.assign(Is,e)},install({$q:e}){e.loading=this,e.config.loading!==void 0&&this.setDefaults(e.config.loading)}});function sm(e,t,n){let o;function r(){o!==void 0&&(qr.remove(o),o=void 0)}return rt(()=>{e.value===!0&&r()}),{removeFromHistory:r,addToHistory(){o={condition:()=>n.value===!0,handler:t},qr.add(o)}}}function lm(){let e;return rt(()=>{clearTimeout(e)}),{registerTimeout(t,n){clearTimeout(e),e=setTimeout(t,n)},removeTimeout(){clearTimeout(e)}}}function am(){let e;return rt(()=>{e=void 0}),{registerTick(t){e=t,Fe(()=>{e===t&&(e(),e=void 0)})},removeTick(){e=void 0}}}const um={modelValue:{type:Boolean,default:null},"onUpdate:modelValue":[Function,Array]},cm=["before-show","show","before-hide","hide"];function fm({showing:e,canShow:t,hideOnRouteChange:n,handleShow:o,handleHide:r,processOnMount:i}){const s=Te(),{props:a,emit:l,proxy:u}=s;let c;function d(S){e.value===!0?v(S):f(S)}function f(S){if(a.disable===!0||S!==void 0&&S.qAnchorHandled===!0||t!==void 0&&t(S)!==!0)return;const A=a["onUpdate:modelValue"]!==void 0;A===!0&&(l("update:modelValue",!0),c=S,Fe(()=>{c===S&&(c=void 0)})),(a.modelValue===null||A===!1)&&m(S)}function m(S){e.value!==!0&&(e.value=!0,l("before-show",S),o!==void 0?o(S):l("show",S))}function v(S){if(a.disable===!0)return;const A=a["onUpdate:modelValue"]!==void 0;A===!0&&(l("update:modelValue",!1),c=S,Fe(()=>{c===S&&(c=void 0)})),(a.modelValue===null||A===!1)&&P(S)}function P(S){e.value!==!1&&(e.value=!1,l("before-hide",S),r!==void 0?r(S):l("hide",S))}function _(S){a.disable===!0&&S===!0?a["onUpdate:modelValue"]!==void 0&&l("update:modelValue",!1):S===!0!==e.value&&(S===!0?m:P)(c)}_e(()=>a.modelValue,_),n!==void 0&&Ba(s)===!0&&_e(()=>u.$route.fullPath,()=>{n.value===!0&&e.value===!0&&v()}),i===!0&&xn(()=>{_(a.modelValue)});const k={show:f,hide:v,toggle:d};return Object.assign(u,k),k}const dm={transitionShow:{type:String,default:"fade"},transitionHide:{type:String,default:"fade"},transitionDuration:{type:[String,Number],default:300}};let It=[],Gn=[];function ja(e){Gn=Gn.filter(t=>t!==e)}function hm(e){ja(e),Gn.push(e)}function Ns(e){ja(e),Gn.length===0&&It.length>0&&(It[It.length-1](),It=[])}function gi(e){Gn.length===0?e():It.push(e)}function mm(e){It=It.filter(t=>t!==e)}const fr=[];function gm(e){for(e=e.parent;e!=null;){if(e.type.name==="QGlobalDialog")return!0;if(e.type.name==="QDialog"||e.type.name==="QMenu")return!1;e=e.parent}return!1}function vm(e,t,n,o){const r=me(!1),i=me(!1);let s=null;const a={},l=o===!0&&gm(e);function u(d){if(d===!0){Ns(a),i.value=!0;return}i.value=!1,r.value===!1&&(l===!1&&s===null&&(s=Ko()),r.value=!0,fr.push(e.proxy),hm(a))}function c(d){if(i.value=!1,d!==!0)return;Ns(a),r.value=!1;const f=fr.indexOf(e.proxy);f>-1&&fr.splice(f,1),s!==null&&(hi(s),s=null)}return ii(()=>{c(!0)}),Object.assign(e.proxy,{__qPortalInnerRef:t}),{showPortal:u,hidePortal:c,portalIsActive:r,portalIsAccessible:i,renderPortal:()=>l===!0?n():r.value===!0?[b(Bc,{to:s},n())]:void 0}}function pm(){let e;return{preventBodyScroll(t){t!==e&&(e!==void 0||t===!0)&&(e=t,Ir(t))}}}const Dt=[];let bn;function bm(e){bn=e.keyCode===27}function ym(){bn===!0&&(bn=!1)}function _m(e){bn===!0&&(bn=!1,Jn(e,27)===!0&&Dt[Dt.length-1](e))}function Da(e){window[e]("keydown",bm),window[e]("blur",ym),window[e]("keyup",_m),bn=!1}function wm(e){Se.is.desktop===!0&&(Dt.push(e),Dt.length===1&&Da("addEventListener"))}function Vs(e){const t=Dt.indexOf(e);t>-1&&(Dt.splice(t,1),Dt.length===0&&Da("removeEventListener"))}const zt=[];function za(e){zt[zt.length-1](e)}function xm(e){Se.is.desktop===!0&&(zt.push(e),zt.length===1&&document.body.addEventListener("focusin",za))}function js(e){const t=zt.indexOf(e);t>-1&&(zt.splice(t,1),zt.length===0&&document.body.removeEventListener("focusin",za))}let co=0;const Cm={standard:"fixed-full flex-center",top:"fixed-top justify-center",bottom:"fixed-bottom justify-center",right:"fixed-right items-center",left:"fixed-left items-center"},Ds={standard:["scale","scale"],top:["slide-down","slide-up"],bottom:["slide-up","slide-down"],right:["slide-left","slide-right"],left:["slide-right","slide-left"]};var km=Oe({name:"QDialog",inheritAttrs:!1,props:ce(Y(Y({},um),dm),{transitionShow:String,transitionHide:String,persistent:Boolean,autoClose:Boolean,noEscDismiss:Boolean,noBackdropDismiss:Boolean,noRouteDismiss:Boolean,noRefocus:Boolean,noFocus:Boolean,noShake:Boolean,seamless:Boolean,maximized:Boolean,fullWidth:Boolean,fullHeight:Boolean,square:Boolean,position:{type:String,default:"standard",validator:e=>e==="standard"||["top","bottom","left","right"].includes(e)}}),emits:[...cm,"shake","click","escape-key"],setup(e,{slots:t,emit:n,attrs:o}){const r=Te(),i=me(null),s=me(!1),a=me(!1),l=me(!1);let u,c=null,d,f;const m=w(()=>e.persistent!==!0&&e.noRouteDismiss!==!0&&e.seamless!==!0),{preventBodyScroll:v}=pm(),{registerTimeout:P,removeTimeout:_}=lm(),{registerTick:k,removeTick:S}=am(),{showPortal:A,hidePortal:T,portalIsAccessible:U,renderPortal:x}=vm(r,i,ee,!0),{hide:y}=fm({showing:s,hideOnRouteChange:m,handleShow:K,handleHide:F,processOnMount:!0}),{addToHistory:$,removeFromHistory:O}=sm(s,y,m),N=w(()=>`q-dialog__inner flex no-pointer-events q-dialog__inner--${e.maximized===!0?"maximized":"minimized"} q-dialog__inner--${e.position} ${Cm[e.position]}`+(l.value===!0?" q-dialog__inner--animating":"")+(e.fullWidth===!0?" q-dialog__inner--fullwidth":"")+(e.fullHeight===!0?" q-dialog__inner--fullheight":"")+(e.square===!0?" q-dialog__inner--square":"")),B=w(()=>"q-transition--"+(e.transitionShow===void 0?Ds[e.position][0]:e.transitionShow)),C=w(()=>"q-transition--"+(e.transitionHide===void 0?Ds[e.position][1]:e.transitionHide)),H=w(()=>a.value===!0?C.value:B.value),W=w(()=>`--q-transition-duration: ${e.transitionDuration}ms`),D=w(()=>s.value===!0&&e.seamless!==!0),G=w(()=>e.autoClose===!0?{onClick:R}:{}),E=w(()=>[`q-dialog fullscreen no-pointer-events q-dialog--${D.value===!0?"modal":"seamless"}`,o.class]);_e(s,X=>{Fe(()=>{a.value=X})}),_e(()=>e.maximized,X=>{s.value===!0&&Ze(X)}),_e(D,X=>{v(X),X===!0?(xm(j),wm(xe)):(js(j),Vs(xe))});function K(X){_(),S(),$(),c=e.noRefocus===!1&&document.activeElement!==null?document.activeElement:null,Ze(e.maximized),A(),l.value=!0,e.noFocus!==!0&&(document.activeElement!==null&&document.activeElement.blur(),k(ae)),P(()=>{if(r.proxy.$q.platform.is.ios===!0){if(e.seamless!==!0&&document.activeElement){const{top:ue,bottom:se}=document.activeElement.getBoundingClientRect(),{innerHeight:ie}=window,h=window.visualViewport!==void 0?window.visualViewport.height:ie;ue>0&&se>h/2&&(document.scrollingElement.scrollTop=Math.min(document.scrollingElement.scrollHeight-h,se>=ie?1/0:Math.ceil(document.scrollingElement.scrollTop+se-h/2))),document.activeElement.scrollIntoView()}f=!0,i.value.click(),f=!1}A(!0),l.value=!1,n("show",X)},e.transitionDuration)}function F(X){_(),S(),O(),ge(!0),l.value=!0,T(),c!==null&&(c.focus(),c=null),P(()=>{T(!0),l.value=!1,n("hide",X)},e.transitionDuration)}function ae(X){gi(()=>{let ue=i.value;ue===null||ue.contains(document.activeElement)===!0||(ue=ue.querySelector(X||"[autofocus], [data-autofocus]")||ue,ue.focus({preventScroll:!0}))})}function Ce(){ae(),n("shake");const X=i.value;X!==null&&(X.classList.remove("q-animate--scale"),X.classList.add("q-animate--scale"),clearTimeout(u),u=setTimeout(()=>{i.value!==null&&(X.classList.remove("q-animate--scale"),ae())},170))}function xe(){e.seamless!==!0&&(e.persistent===!0||e.noEscDismiss===!0?e.maximized!==!0&&e.noShake!==!0&&Ce():(n("escape-key"),y()))}function ge(X){clearTimeout(u),(X===!0||s.value===!0)&&(Ze(!1),e.seamless!==!0&&(v(!1),js(j),Vs(xe))),X!==!0&&(c=null)}function Ze(X){X===!0?d!==!0&&(co<1&&document.body.classList.add("q-body--dialog"),co++,d=!0):d===!0&&(co<2&&document.body.classList.remove("q-body--dialog"),co--,d=!1)}function R(X){f!==!0&&(y(X),n("click",X))}function Z(X){e.persistent!==!0&&e.noBackdropDismiss!==!0?y(X):e.noShake!==!0&&Ce()}function j(X){U.value===!0&&$h(i.value,X.target)!==!0&&ae('[tabindex]:not([tabindex="-1"])')}Object.assign(r.proxy,{focus:ae,shake:Ce,__updateRefocusTarget(X){c=X||null}}),rt(ge);function ee(){return b("div",ce(Y({},o),{class:E.value}),[b(Ut,{name:"q-transition--fade",appear:!0},()=>D.value===!0?b("div",{class:"q-dialog__backdrop fixed-full",style:W.value,"aria-hidden":"true",onMousedown:Z}):null),b(Ut,{name:H.value,appear:!0},()=>s.value===!0?b("div",Y({ref:i,class:N.value,style:W.value,tabindex:-1},G.value),tt(t.default)):null)])}return x}});const Qt={dark:{type:Boolean,default:null}};function Yt(e,t){return w(()=>e.dark===null?t.dark.isActive:e.dark)}var Em=Oe({name:"QCard",props:ce(Y({},Qt),{tag:{type:String,default:"div"},square:Boolean,flat:Boolean,bordered:Boolean}),setup(e,{slots:t}){const n=Te(),o=Yt(e,n.proxy.$q),r=w(()=>"q-card"+(o.value===!0?" q-card--dark q-dark":"")+(e.bordered===!0?" q-card--bordered":"")+(e.square===!0?" q-card--square no-border-radius":"")+(e.flat===!0?" q-card--flat no-shadow":""));return()=>b(e.tag,{class:r.value},tt(t.default))}}),qn=Oe({name:"QCardSection",props:{tag:{type:String,default:"div"},horizontal:Boolean},setup(e,{slots:t}){const n=w(()=>`q-card__section q-card__section--${e.horizontal===!0?"horiz row no-wrap":"vert"}`);return()=>b(e.tag,{class:n.value},tt(t.default))}}),Sm=Oe({name:"QCardActions",props:ce(Y({},Oa),{vertical:Boolean}),setup(e,{slots:t}){const n=La(e),o=w(()=>`q-card__actions ${n.value} q-card__actions--${e.vertical===!0?"vert column":"horiz row"}`);return()=>b("div",{class:o.value},tt(t.default))}});const Rm={true:"inset",item:"item-inset","item-thumbnail":"item-thumbnail-inset"},dr={xs:2,sm:4,md:8,lg:16,xl:24};var zs=Oe({name:"QSeparator",props:ce(Y({},Qt),{spaced:[Boolean,String],inset:[Boolean,String],vertical:Boolean,color:String,size:String}),setup(e){const t=Te(),n=Yt(e,t.proxy.$q),o=w(()=>e.vertical===!0?"vertical":"horizontal"),r=w(()=>` q-separator--${o.value}`),i=w(()=>e.inset!==!1?`${r.value}-${Rm[e.inset]}`:""),s=w(()=>`q-separator${r.value}${i.value}`+(e.color!==void 0?` bg-${e.color}`:"")+(n.value===!0?" q-separator--dark":"")),a=w(()=>{const l={};if(e.size!==void 0&&(l[e.vertical===!0?"width":"height"]=e.size),e.spaced!==!1){const u=e.spaced===!0?`${dr.md}px`:e.spaced in dr?`${dr[e.spaced]}px`:e.spaced,c=e.vertical===!0?["Left","Right"]:["Top","Bottom"];l[`margin${c[0]}`]=l[`margin${c[1]}`]=u}return l});return()=>b("hr",{class:s.value,style:a.value,"aria-orientation":o.value})}});function Tm({validate:e,resetValidation:t,requiresQForm:n}){const o=dt(nd,!1);if(o!==!1){const{props:r,proxy:i}=Te();Object.assign(i,{validate:e,resetValidation:t}),_e(()=>r.disable,s=>{s===!0?(typeof t=="function"&&t(),o.unbindComponent(i)):o.bindComponent(i)}),r.disable!==!0&&o.bindComponent(i),rt(()=>{r.disable!==!0&&o.unbindComponent(i)})}else n===!0&&console.error("Parent QForm not found on useFormChild()!")}const Hs=/^#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?$/,Us=/^#[0-9a-fA-F]{4}([0-9a-fA-F]{4})?$/,Ks=/^#([0-9a-fA-F]{3}|[0-9a-fA-F]{4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/,fo=/^rgb\(((0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),){2}(0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5])\)$/,ho=/^rgba\(((0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),){2}(0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),(0|0\.[0-9]+[1-9]|0\.[1-9]+|1)\)$/,Ws={date:e=>/^-?[\d]+\/[0-1]\d\/[0-3]\d$/.test(e),time:e=>/^([0-1]?\d|2[0-3]):[0-5]\d$/.test(e),fulltime:e=>/^([0-1]?\d|2[0-3]):[0-5]\d:[0-5]\d$/.test(e),timeOrFulltime:e=>/^([0-1]?\d|2[0-3]):[0-5]\d(:[0-5]\d)?$/.test(e),email:e=>/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(e),hexColor:e=>Hs.test(e),hexaColor:e=>Us.test(e),hexOrHexaColor:e=>Ks.test(e),rgbColor:e=>fo.test(e),rgbaColor:e=>ho.test(e),rgbOrRgbaColor:e=>fo.test(e)||ho.test(e),hexOrRgbColor:e=>Hs.test(e)||fo.test(e),hexaOrRgbaColor:e=>Us.test(e)||ho.test(e),anyColor:e=>Ks.test(e)||fo.test(e)||ho.test(e)},Pm={};"Boolean Number String Function Array Date RegExp Object".split(" ").forEach(e=>{Pm["[object "+e+"]"]=e.toLowerCase()});const Am=ce(Y({},kn),{min:{type:Number,default:0},max:{type:Number,default:100},color:String,centerColor:String,trackColor:String,fontSize:String,thickness:{type:Number,default:.2,validator:e=>e>=0&&e<=1},angle:{type:Number,default:0},showValue:Boolean,reverse:Boolean,instantFeedback:Boolean});function qm(e,t,n){return n<=t?t:Math.min(n,Math.max(t,e))}const Nr=50,Ha=2*Nr,Ua=Ha*Math.PI,Mm=Math.round(Ua*1e3)/1e3;Oe({name:"QCircularProgress",props:ce(Y({},Am),{value:{type:Number,default:0},animationSpeed:{type:[String,Number],default:600},indeterminate:Boolean}),setup(e,{slots:t}){const{proxy:{$q:n}}=Te(),o=En(e),r=w(()=>{const f=(n.lang.rtl===!0?-1:1)*e.angle;return{transform:e.reverse!==(n.lang.rtl===!0)?`scale3d(-1, 1, 1) rotate3d(0, 0, 1, ${-90-f}deg)`:`rotate3d(0, 0, 1, ${f-90}deg)`}}),i=w(()=>e.instantFeedback!==!0&&e.indeterminate!==!0?{transition:`stroke-dashoffset ${e.animationSpeed}ms ease 0s, stroke ${e.animationSpeed}ms ease`}:""),s=w(()=>Ha/(1-e.thickness/2)),a=w(()=>`${s.value/2} ${s.value/2} ${s.value} ${s.value}`),l=w(()=>qm(e.value,e.min,e.max)),u=w(()=>Ua*(1-(l.value-e.min)/(e.max-e.min))),c=w(()=>e.thickness/2*s.value);function d({thickness:f,offset:m,color:v,cls:P}){return b("circle",{class:"q-circular-progress__"+P+(v!==void 0?` text-${v}`:""),style:i.value,fill:"transparent",stroke:"currentColor","stroke-width":f,"stroke-dasharray":Mm,"stroke-dashoffset":m,cx:s.value,cy:s.value,r:Nr})}return()=>{const f=[];e.centerColor!==void 0&&e.centerColor!=="transparent"&&f.push(b("circle",{class:`q-circular-progress__center text-${e.centerColor}`,fill:"currentColor",r:Nr-c.value/2,cx:s.value,cy:s.value})),e.trackColor!==void 0&&e.trackColor!=="transparent"&&f.push(d({cls:"track",thickness:c.value,offset:0,color:e.trackColor})),f.push(d({cls:"circle",thickness:c.value,offset:u.value,color:e.color}));const m=[b("svg",{class:"q-circular-progress__svg",style:r.value,viewBox:a.value,"aria-hidden":"true"},f)];return e.showValue===!0&&m.push(b("div",{class:"q-circular-progress__text absolute-full row flex-center content-center",style:{fontSize:e.fontSize}},t.default!==void 0?t.default():[b("div",l.value)])),b("div",{class:`q-circular-progress q-circular-progress--${e.indeterminate===!0?"in":""}determinate`,style:o.value,role:"progressbar","aria-valuemin":e.min,"aria-valuemax":e.max,"aria-valuenow":e.indeterminate===!0?void 0:l.value},Aa(t.internal,m))}}});const $m=["rejected"],Om=[...$m,"start","finish","added","removed"],Lm=()=>!0;function Bm(e){const t={};return e.forEach(n=>{t[n]=Lm}),t}Bm(Om);let hr,mo=0;const $e=new Array(256);for(let e=0;e<256;e++)$e[e]=(e+256).toString(16).substring(1);const Fm=(()=>{const e=typeof crypto!="undefined"?crypto:typeof window!="undefined"?window.crypto||window.msCrypto:void 0;if(e!==void 0){if(e.randomBytes!==void 0)return e.randomBytes;if(e.getRandomValues!==void 0)return t=>{const n=new Uint8Array(t);return e.getRandomValues(n),n}}return t=>{const n=[];for(let o=t;o>0;o--)n.push(Math.floor(Math.random()*256));return n}})(),Qs=4096;function Im(){(hr===void 0||mo+16>Qs)&&(mo=0,hr=Fm(Qs));const e=Array.prototype.slice.call(hr,mo,mo+=16);return e[6]=e[6]&15|64,e[8]=e[8]&63|128,$e[e[0]]+$e[e[1]]+$e[e[2]]+$e[e[3]]+"-"+$e[e[4]]+$e[e[5]]+"-"+$e[e[6]]+$e[e[7]]+"-"+$e[e[8]]+$e[e[9]]+"-"+$e[e[10]]+$e[e[11]]+$e[e[12]]+$e[e[13]]+$e[e[14]]+$e[e[15]]}const Nm=[!0,!1,"ondemand"],Vm={modelValue:{},error:{type:Boolean,default:null},errorMessage:String,noErrorIcon:Boolean,rules:Array,reactiveRules:Boolean,lazyRules:{type:[Boolean,String],validator:e=>Nm.includes(e)}};function jm(e,t){const{props:n,proxy:o}=Te(),r=me(!1),i=me(null),s=me(null);Tm({validate:v,resetValidation:m});let a=0,l;const u=w(()=>n.rules!==void 0&&n.rules!==null&&n.rules.length>0),c=w(()=>n.disable!==!0&&u.value===!0),d=w(()=>n.error===!0||r.value===!0),f=w(()=>typeof n.errorMessage=="string"&&n.errorMessage.length>0?n.errorMessage:i.value);_e(()=>n.modelValue,()=>{P()}),_e(()=>n.reactiveRules,k=>{k===!0?l===void 0&&(l=_e(()=>n.rules,()=>{P(!0)})):l!==void 0&&(l(),l=void 0)},{immediate:!0}),_e(e,k=>{k===!0?s.value===null&&(s.value=!1):s.value===!1&&(s.value=!0,c.value===!0&&n.lazyRules!=="ondemand"&&t.value===!1&&_())});function m(){a++,t.value=!1,s.value=null,r.value=!1,i.value=null,_.cancel()}function v(k=n.modelValue){if(c.value!==!0)return!0;const S=++a;t.value!==!0&&n.lazyRules!==!0&&(s.value=!0);const A=(U,x)=>{r.value!==U&&(r.value=U);const y=x||void 0;i.value!==y&&(i.value=y),t.value=!1},T=[];for(let U=0;U<n.rules.length;U++){const x=n.rules[U];let y;if(typeof x=="function"?y=x(k):typeof x=="string"&&Ws[x]!==void 0&&(y=Ws[x](k)),y===!1||typeof y=="string")return A(!0,y),!1;y!==!0&&y!==void 0&&T.push(y)}return T.length===0?(A(!1),!0):(t.value=!0,Promise.all(T).then(U=>{if(U===void 0||Array.isArray(U)===!1||U.length===0)return S===a&&A(!1),!0;const x=U.find(y=>y===!1||typeof y=="string");return S===a&&A(x!==void 0,x),x===void 0},U=>(S===a&&(console.error(U),A(!0)),!1)))}function P(k){c.value===!0&&n.lazyRules!=="ondemand"&&(s.value===!0||n.lazyRules!==!0&&k!==!0)&&_()}const _=da(v,0);return rt(()=>{l!==void 0&&l(),_.cancel()}),Object.assign(o,{resetValidation:m,validate:v}),zo(o,"hasError",()=>d.value),{isDirtyModel:s,hasRules:u,hasError:d,errorMessage:f,validate:v,resetValidation:m}}const Ys=/^on[A-Z]/;function Dm(e,t){const n={listeners:me({}),attributes:me({})};function o(){const r={},i={};for(const s in e)s!=="class"&&s!=="style"&&Ys.test(s)===!1&&(r[s]=e[s]);for(const s in t.props)Ys.test(s)===!0&&(i[s]=t.props[s]);n.attributes.value=r,n.listeners.value=i}return Nl(o),o(),n}function Vr(e){return e===void 0?`f_${Im()}`:e}function jr(e){return e!=null&&(""+e).length>0}const zm=ce(Y(Y({},Qt),Vm),{label:String,stackLabel:Boolean,hint:String,hideHint:Boolean,prefix:String,suffix:String,labelColor:String,color:String,bgColor:String,filled:Boolean,outlined:Boolean,borderless:Boolean,standout:[Boolean,String],square:Boolean,loading:Boolean,labelSlot:Boolean,bottomSlots:Boolean,hideBottomSpace:Boolean,rounded:Boolean,dense:Boolean,itemAligned:Boolean,counter:Boolean,clearable:Boolean,clearIcon:String,disable:Boolean,readonly:Boolean,autofocus:Boolean,for:String,maxlength:[Number,String]}),Hm=["update:modelValue","clear","focus","blur","popup-show","popup-hide"];function Um(){const{props:e,attrs:t,proxy:n,vnode:o}=Te();return{isDark:Yt(e,n.$q),editable:w(()=>e.disable!==!0&&e.readonly!==!0),innerLoading:me(!1),focused:me(!1),hasPopupOpen:!1,splitAttrs:Dm(t,o),targetUid:me(Vr(e.for)),rootRef:me(null),targetRef:me(null),controlRef:me(null)}}function Km(e){const{props:t,emit:n,slots:o,attrs:r,proxy:i}=Te(),{$q:s}=i;let a;e.hasValue===void 0&&(e.hasValue=w(()=>jr(t.modelValue))),e.emitValue===void 0&&(e.emitValue=E=>{n("update:modelValue",E)}),e.controlEvents===void 0&&(e.controlEvents={onFocusin:O,onFocusout:N}),Object.assign(e,{clearValue:B,onControlFocusin:O,onControlFocusout:N,focus:y}),e.computedCounter===void 0&&(e.computedCounter=w(()=>{if(t.counter!==!1){const E=typeof t.modelValue=="string"||typeof t.modelValue=="number"?(""+t.modelValue).length:Array.isArray(t.modelValue)===!0?t.modelValue.length:0,K=t.maxlength!==void 0?t.maxlength:t.maxValues;return E+(K!==void 0?" / "+K:"")}}));const{isDirtyModel:l,hasRules:u,hasError:c,errorMessage:d,resetValidation:f}=jm(e.focused,e.innerLoading),m=e.floatingLabel!==void 0?w(()=>t.stackLabel===!0||e.focused.value===!0||e.floatingLabel.value===!0):w(()=>t.stackLabel===!0||e.focused.value===!0||e.hasValue.value===!0),v=w(()=>t.bottomSlots===!0||t.hint!==void 0||u.value===!0||t.counter===!0||t.error!==null),P=w(()=>t.filled===!0?"filled":t.outlined===!0?"outlined":t.borderless===!0?"borderless":t.standout?"standout":"standard"),_=w(()=>`q-field row no-wrap items-start q-field--${P.value}`+(e.fieldClass!==void 0?` ${e.fieldClass.value}`:"")+(t.rounded===!0?" q-field--rounded":"")+(t.square===!0?" q-field--square":"")+(m.value===!0?" q-field--float":"")+(S.value===!0?" q-field--labeled":"")+(t.dense===!0?" q-field--dense":"")+(t.itemAligned===!0?" q-field--item-aligned q-item-type":"")+(e.isDark.value===!0?" q-field--dark":"")+(e.getControl===void 0?" q-field--auto-height":"")+(e.focused.value===!0?" q-field--focused":"")+(c.value===!0?" q-field--error":"")+(c.value===!0||e.focused.value===!0?" q-field--highlighted":"")+(t.hideBottomSpace!==!0&&v.value===!0?" q-field--with-bottom":"")+(t.disable===!0?" q-field--disabled":t.readonly===!0?" q-field--readonly":"")),k=w(()=>"q-field__control relative-position row no-wrap"+(t.bgColor!==void 0?` bg-${t.bgColor}`:"")+(c.value===!0?" text-negative":typeof t.standout=="string"&&t.standout.length>0&&e.focused.value===!0?` ${t.standout}`:t.color!==void 0?` text-${t.color}`:"")),S=w(()=>t.labelSlot===!0||t.label!==void 0),A=w(()=>"q-field__label no-pointer-events absolute ellipsis"+(t.labelColor!==void 0&&c.value!==!0?` text-${t.labelColor}`:"")),T=w(()=>({id:e.targetUid.value,editable:e.editable.value,focused:e.focused.value,floatingLabel:m.value,modelValue:t.modelValue,emitValue:e.emitValue})),U=w(()=>{const E={for:e.targetUid.value};return t.disable===!0?E["aria-disabled"]="true":t.readonly===!0&&(E["aria-readonly"]="true"),E});_e(()=>t.for,E=>{e.targetUid.value=Vr(E)});function x(){const E=document.activeElement;let K=e.targetRef!==void 0&&e.targetRef.value;K&&(E===null||E.id!==e.targetUid.value)&&(K.hasAttribute("tabindex")===!0||(K=K.querySelector("[tabindex]")),K&&K!==E&&K.focus({preventScroll:!0}))}function y(){gi(x)}function $(){mm(x);const E=document.activeElement;E!==null&&e.rootRef.value.contains(E)&&E.blur()}function O(E){clearTimeout(a),e.editable.value===!0&&e.focused.value===!1&&(e.focused.value=!0,n("focus",E))}function N(E,K){clearTimeout(a),a=setTimeout(()=>{document.hasFocus()===!0&&(e.hasPopupOpen===!0||e.controlRef===void 0||e.controlRef.value===null||e.controlRef.value.contains(document.activeElement)!==!1)||(e.focused.value===!0&&(e.focused.value=!1,n("blur",E)),K!==void 0&&K())})}function B(E){Ke(E),s.platform.is.mobile!==!0?(e.targetRef!==void 0&&e.targetRef.value||e.rootRef.value).focus():e.rootRef.value.contains(document.activeElement)===!0&&document.activeElement.blur(),t.type==="file"&&(e.inputRef.value.value=null),n("update:modelValue",null),n("clear",t.modelValue),Fe(()=>{f(),s.platform.is.mobile!==!0&&(l.value=!1)})}function C(){const E=[];return o.prepend!==void 0&&E.push(b("div",{class:"q-field__prepend q-field__marginal row no-wrap items-center",key:"prepend",onClick:kt},o.prepend())),E.push(b("div",{class:"q-field__control-container col relative-position row no-wrap q-anchor--skip"},H())),c.value===!0&&t.noErrorIcon===!1&&E.push(D("error",[b(mt,{name:s.iconSet.field.error,color:"negative"})])),t.loading===!0||e.innerLoading.value===!0?E.push(D("inner-loading-append",o.loading!==void 0?o.loading():[b(pn,{color:t.color})])):t.clearable===!0&&e.hasValue.value===!0&&e.editable.value===!0&&E.push(D("inner-clearable-append",[b(mt,{class:"q-field__focusable-action",tag:"button",name:t.clearIcon||s.iconSet.field.clear,tabindex:0,type:"button","aria-hidden":null,role:null,onClick:B})])),o.append!==void 0&&E.push(b("div",{class:"q-field__append q-field__marginal row no-wrap items-center",key:"append",onClick:kt},o.append())),e.getInnerAppend!==void 0&&E.push(D("inner-append",e.getInnerAppend())),e.getControlChild!==void 0&&E.push(e.getControlChild()),E}function H(){const E=[];return t.prefix!==void 0&&t.prefix!==null&&E.push(b("div",{class:"q-field__prefix no-pointer-events row items-center"},t.prefix)),e.getShadowControl!==void 0&&e.hasShadow.value===!0&&E.push(e.getShadowControl()),e.getControl!==void 0?E.push(e.getControl()):o.rawControl!==void 0?E.push(o.rawControl()):o.control!==void 0&&E.push(b("div",ce(Y({ref:e.targetRef,class:"q-field__native row"},e.splitAttrs.attributes.value),{"data-autofocus":t.autofocus===!0||void 0}),o.control(T.value))),S.value===!0&&E.push(b("div",{class:A.value},tt(o.label,t.label))),t.suffix!==void 0&&t.suffix!==null&&E.push(b("div",{class:"q-field__suffix no-pointer-events row items-center"},t.suffix)),E.concat(tt(o.default))}function W(){let E,K;c.value===!0?d.value!==null?(E=[b("div",{role:"alert"},d.value)],K=`q--slot-error-${d.value}`):(E=tt(o.error),K="q--slot-error"):(t.hideHint!==!0||e.focused.value===!0)&&(t.hint!==void 0?(E=[b("div",t.hint)],K=`q--slot-hint-${t.hint}`):(E=tt(o.hint),K="q--slot-hint"));const F=t.counter===!0||o.counter!==void 0;if(t.hideBottomSpace===!0&&F===!1&&E===void 0)return;const ae=b("div",{key:K,class:"q-field__messages col"},E);return b("div",{class:"q-field__bottom row items-start q-field__bottom--"+(t.hideBottomSpace!==!0?"animated":"stale")},[t.hideBottomSpace===!0?ae:b(Ut,{name:"q-transition--field-message"},()=>ae),F===!0?b("div",{class:"q-field__counter"},o.counter!==void 0?o.counter():e.computedCounter.value):null])}function D(E,K){return K===null?null:b("div",{key:E,class:"q-field__append q-field__marginal row no-wrap items-center q-anchor--skip"},K)}Object.assign(i,{focus:y,blur:$});let G=!1;return Fl(()=>{G=!0}),Bl(()=>{G===!0&&t.autofocus===!0&&i.focus()}),xn(()=>{Tt.value===!0&&t.for===void 0&&(e.targetUid.value=Vr()),t.autofocus===!0&&i.focus()}),rt(()=>{clearTimeout(a)}),function(){const K=e.getControl===void 0&&o.control===void 0?Y(ce(Y({},e.splitAttrs.attributes.value),{"data-autofocus":t.autofocus}),U.value):U.value;return b("label",Y({ref:e.rootRef,class:[_.value,r.class],style:r.style},K),[o.before!==void 0?b("div",{class:"q-field__before q-field__marginal row no-wrap items-center",onClick:kt},o.before()):null,b("div",{class:"q-field__inner relative-position col self-stretch"},[b("div",Y({ref:e.controlRef,class:k.value,tabindex:-1},e.controlEvents),C()),v.value===!0?W():null]),o.after!==void 0?b("div",{class:"q-field__after q-field__marginal row no-wrap items-center",onClick:kt},o.after()):null])}}const Zs={date:"####/##/##",datetime:"####/##/## ##:##",time:"##:##",fulltime:"##:##:##",phone:"(###) ### - ####",card:"#### #### #### ####"},Ao={"#":{pattern:"[\\d]",negate:"[^\\d]"},S:{pattern:"[a-zA-Z]",negate:"[^a-zA-Z]"},N:{pattern:"[0-9a-zA-Z]",negate:"[^0-9a-zA-Z]"},A:{pattern:"[a-zA-Z]",negate:"[^a-zA-Z]",transform:e=>e.toLocaleUpperCase()},a:{pattern:"[a-zA-Z]",negate:"[^a-zA-Z]",transform:e=>e.toLocaleLowerCase()},X:{pattern:"[0-9a-zA-Z]",negate:"[^0-9a-zA-Z]",transform:e=>e.toLocaleUpperCase()},x:{pattern:"[0-9a-zA-Z]",negate:"[^0-9a-zA-Z]",transform:e=>e.toLocaleLowerCase()}},Ka=Object.keys(Ao);Ka.forEach(e=>{Ao[e].regex=new RegExp(Ao[e].pattern)});const Wm=new RegExp("\\\\([^.*+?^${}()|([\\]])|([.*+?^${}()|[\\]])|(["+Ka.join("")+"])|(.)","g"),Js=/[.*+?^${}()|[\]\\]/g,Ee=String.fromCharCode(1),Qm={mask:String,reverseFillMask:Boolean,fillMask:[Boolean,String],unmaskedValue:Boolean};function Ym(e,t,n,o){let r,i,s,a;const l=me(null),u=me(d());function c(){return e.autogrow===!0||["textarea","text","search","url","tel","password"].includes(e.type)}_e(()=>e.type+e.autogrow,m),_e(()=>e.mask,x=>{if(x!==void 0)v(u.value,!0);else{const y=T(u.value);m(),e.modelValue!==y&&t("update:modelValue",y)}}),_e(()=>e.fillMask+e.reverseFillMask,()=>{l.value===!0&&v(u.value,!0)}),_e(()=>e.unmaskedValue,()=>{l.value===!0&&v(u.value)});function d(){if(m(),l.value===!0){const x=S(T(e.modelValue));return e.fillMask!==!1?U(x):x}return e.modelValue}function f(x){if(x<r.length)return r.slice(-x);let y="",$=r;const O=$.indexOf(Ee);if(O>-1){for(let N=x-$.length;N>0;N--)y+=Ee;$=$.slice(0,O)+y+$.slice(O)}return $}function m(){if(l.value=e.mask!==void 0&&e.mask.length>0&&c(),l.value===!1){a=void 0,r="",i="";return}const x=Zs[e.mask]===void 0?e.mask:Zs[e.mask],y=typeof e.fillMask=="string"&&e.fillMask.length>0?e.fillMask.slice(0,1):"_",$=y.replace(Js,"\\$&"),O=[],N=[],B=[];let C=e.reverseFillMask===!0,H="",W="";x.replace(Wm,(K,F,ae,Ce,xe)=>{if(Ce!==void 0){const ge=Ao[Ce];B.push(ge),W=ge.negate,C===!0&&(N.push("(?:"+W+"+)?("+ge.pattern+"+)?(?:"+W+"+)?("+ge.pattern+"+)?"),C=!1),N.push("(?:"+W+"+)?("+ge.pattern+")?")}else if(ae!==void 0)H="\\"+(ae==="\\"?"":ae),B.push(ae),O.push("([^"+H+"]+)?"+H+"?");else{const ge=F!==void 0?F:xe;H=ge==="\\"?"\\\\\\\\":ge.replace(Js,"\\\\$&"),B.push(ge),O.push("([^"+H+"]+)?"+H+"?")}});const D=new RegExp("^"+O.join("")+"("+(H===""?".":"[^"+H+"]")+"+)?$"),G=N.length-1,E=N.map((K,F)=>F===0&&e.reverseFillMask===!0?new RegExp("^"+$+"*"+K):F===G?new RegExp("^"+K+"("+(W===""?".":W)+"+)?"+(e.reverseFillMask===!0?"$":$+"*")):new RegExp("^"+K));s=B,a=K=>{const F=D.exec(K);F!==null&&(K=F.slice(1).join(""));const ae=[],Ce=E.length;for(let xe=0,ge=K;xe<Ce;xe++){const Ze=E[xe].exec(ge);if(Ze===null)break;ge=ge.slice(Ze.shift().length),ae.push(...Ze)}return ae.length>0?ae.join(""):K},r=B.map(K=>typeof K=="string"?K:Ee).join(""),i=r.split(Ee).join(y)}function v(x,y,$){const O=o.value,N=O.selectionEnd,B=O.value.length-N,C=T(x);y===!0&&m();const H=S(C),W=e.fillMask!==!1?U(H):H,D=u.value!==W;O.value!==W&&(O.value=W),D===!0&&(u.value=W),document.activeElement===O&&Fe(()=>{if(W===i){const E=e.reverseFillMask===!0?i.length:0;O.setSelectionRange(E,E,"forward");return}if($==="insertFromPaste"&&e.reverseFillMask!==!0){const E=N-1;_.right(O,E,E);return}if(["deleteContentBackward","deleteContentForward"].indexOf($)>-1){const E=e.reverseFillMask===!0?N===0?W.length>H.length?1:0:Math.max(0,W.length-(W===i?0:Math.min(H.length,B)+1))+1:N;O.setSelectionRange(E,E,"forward");return}if(e.reverseFillMask===!0)if(D===!0){const E=Math.max(0,W.length-(W===i?0:Math.min(H.length,B+1)));E===1&&N===1?O.setSelectionRange(E,E,"forward"):_.rightReverse(O,E,E)}else{const E=W.length-B;O.setSelectionRange(E,E,"backward")}else if(D===!0){const E=Math.max(0,r.indexOf(Ee),Math.min(H.length,N)-1);_.right(O,E,E)}else{const E=N-1;_.right(O,E,E)}});const G=e.unmaskedValue===!0?T(W):W;String(e.modelValue)!==G&&n(G,!0)}function P(x,y,$){const O=S(T(x.value));y=Math.max(0,r.indexOf(Ee),Math.min(O.length,y)),x.setSelectionRange(y,$,"forward")}const _={left(x,y,$,O){const N=r.slice(y-1).indexOf(Ee)===-1;let B=Math.max(0,y-1);for(;B>=0;B--)if(r[B]===Ee){y=B,N===!0&&y++;break}if(B<0&&r[y]!==void 0&&r[y]!==Ee)return _.right(x,0,0);y>=0&&x.setSelectionRange(y,O===!0?$:y,"backward")},right(x,y,$,O){const N=x.value.length;let B=Math.min(N,$+1);for(;B<=N;B++)if(r[B]===Ee){$=B;break}else r[B-1]===Ee&&($=B);if(B>N&&r[$-1]!==void 0&&r[$-1]!==Ee)return _.left(x,N,N);x.setSelectionRange(O?y:$,$,"forward")},leftReverse(x,y,$,O){const N=f(x.value.length);let B=Math.max(0,y-1);for(;B>=0;B--)if(N[B-1]===Ee){y=B;break}else if(N[B]===Ee&&(y=B,B===0))break;if(B<0&&N[y]!==void 0&&N[y]!==Ee)return _.rightReverse(x,0,0);y>=0&&x.setSelectionRange(y,O===!0?$:y,"backward")},rightReverse(x,y,$,O){const N=x.value.length,B=f(N),C=B.slice(0,$+1).indexOf(Ee)===-1;let H=Math.min(N,$+1);for(;H<=N;H++)if(B[H-1]===Ee){$=H,$>0&&C===!0&&$--;break}if(H>N&&B[$-1]!==void 0&&B[$-1]!==Ee)return _.leftReverse(x,N,N);x.setSelectionRange(O===!0?y:$,$,"forward")}};function k(x){if(ga(x)===!0)return;const y=o.value,$=y.selectionStart,O=y.selectionEnd;if(x.keyCode===37||x.keyCode===39){const N=_[(x.keyCode===39?"right":"left")+(e.reverseFillMask===!0?"Reverse":"")];x.preventDefault(),N(y,$,O,x.shiftKey)}else x.keyCode===8&&e.reverseFillMask!==!0&&$===O?_.left(y,$,O,!0):x.keyCode===46&&e.reverseFillMask===!0&&$===O&&_.rightReverse(y,$,O,!0)}function S(x){if(x==null||x==="")return"";if(e.reverseFillMask===!0)return A(x);const y=s;let $=0,O="";for(let N=0;N<y.length;N++){const B=x[$],C=y[N];if(typeof C=="string")O+=C,B===C&&$++;else if(B!==void 0&&C.regex.test(B))O+=C.transform!==void 0?C.transform(B):B,$++;else return O}return O}function A(x){const y=s,$=r.indexOf(Ee);let O=x.length-1,N="";for(let B=y.length-1;B>=0&&O>-1;B--){const C=y[B];let H=x[O];if(typeof C=="string")N=C+N,H===C&&O--;else if(H!==void 0&&C.regex.test(H))do N=(C.transform!==void 0?C.transform(H):H)+N,O--,H=x[O];while($===B&&H!==void 0&&C.regex.test(H));else return N}return N}function T(x){return typeof x!="string"||a===void 0?typeof x=="number"?a(""+x):x:a(x)}function U(x){return i.length-x.length<=0?x:e.reverseFillMask===!0&&x.length>0?i.slice(0,-x.length)+x:x+i.slice(x.length)}return{innerValue:u,hasMask:l,moveCursorForPaste:P,updateMaskValue:v,onMaskedKeydown:k}}const vi={name:String};function Wa(e={}){return(t,n,o)=>{t[n](b("input",Y({class:"hidden"+(o||"")},e.value)))}}function Zm(e){return w(()=>e.name||e.for)}function Jm(e,t){function n(){const o=e.modelValue;try{const r="DataTransfer"in window?new DataTransfer:"ClipboardEvent"in window?new ClipboardEvent("").clipboardData:void 0;return Object(o)===o&&("length"in o?Array.from(o):[o]).forEach(i=>{r.items.add(i)}),{files:r.files}}catch{return{files:void 0}}}return w(t===!0?()=>{if(e.type==="file")return n()}:n)}const Xm=/[\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]/,Gm=/[\u4e00-\u9fff\u3400-\u4dbf\u{20000}-\u{2a6df}\u{2a700}-\u{2b73f}\u{2b740}-\u{2b81f}\u{2b820}-\u{2ceaf}\uf900-\ufaff\u3300-\u33ff\ufe30-\ufe4f\uf900-\ufaff\u{2f800}-\u{2fa1f}]/u,eg=/[\u3131-\u314e\u314f-\u3163\uac00-\ud7a3]/;function tg(e){return function(n){if(n.type==="compositionend"||n.type==="change"){if(n.target.composing!==!0)return;n.target.composing=!1,e(n)}else n.type==="compositionupdate"?typeof n.data=="string"&&Xm.test(n.data)===!1&&Gm.test(n.data)===!1&&eg.test(n.data)===!1&&(n.target.composing=!1):n.target.composing=!0}}var ng=Oe({name:"QInput",inheritAttrs:!1,props:ce(Y(Y(Y({},zm),Qm),vi),{modelValue:{required:!1},shadowText:String,type:{type:String,default:"text"},debounce:[String,Number],autogrow:Boolean,inputClass:[Array,String,Object],inputStyle:[Array,String,Object]}),emits:[...Hm,"paste","change"],setup(e,{emit:t,attrs:n}){const o={};let r=NaN,i,s,a,l;const u=me(null),c=Zm(e),{innerValue:d,hasMask:f,moveCursorForPaste:m,updateMaskValue:v,onMaskedKeydown:P}=Ym(e,t,C,u),_=Jm(e,!0),k=w(()=>jr(d.value)),S=tg(B),A=Um(),T=w(()=>e.type==="textarea"||e.autogrow===!0),U=w(()=>T.value===!0||["text","search","url","tel","password"].includes(e.type)),x=w(()=>{const F=ce(Y({},A.splitAttrs.listeners.value),{onInput:B,onPaste:N,onChange:W,onBlur:D,onFocus:So});return F.onCompositionstart=F.onCompositionupdate=F.onCompositionend=S,f.value===!0&&(F.onKeydown=P),e.autogrow===!0&&(F.onAnimationend=H),F}),y=w(()=>{const F=ce(Y({tabindex:0,"data-autofocus":e.autofocus===!0||void 0,rows:e.type==="textarea"?6:void 0,"aria-label":e.label,name:c.value},A.splitAttrs.attributes.value),{id:A.targetUid.value,maxlength:e.maxlength,disabled:e.disable===!0,readonly:e.readonly===!0});return T.value===!1&&(F.type=e.type),e.autogrow===!0&&(F.rows=1),F});_e(()=>e.type,()=>{u.value&&(u.value.value=e.modelValue)}),_e(()=>e.modelValue,F=>{if(f.value===!0){if(s===!0&&(s=!1,String(F)===r))return;v(F)}else d.value!==F&&(d.value=F,e.type==="number"&&o.hasOwnProperty("value")===!0&&(i===!0?i=!1:delete o.value));e.autogrow===!0&&Fe(H)}),_e(()=>e.autogrow,F=>{F===!0?Fe(H):u.value!==null&&n.rows>0&&(u.value.style.height="auto")}),_e(()=>e.dense,()=>{e.autogrow===!0&&Fe(H)});function $(){gi(()=>{const F=document.activeElement;u.value!==null&&u.value!==F&&(F===null||F.id!==A.targetUid.value)&&u.value.focus({preventScroll:!0})})}function O(){u.value!==null&&u.value.select()}function N(F){if(f.value===!0&&e.reverseFillMask!==!0){const ae=F.target;m(ae,ae.selectionStart,ae.selectionEnd)}t("paste",F)}function B(F){if(!F||!F.target||F.target.composing===!0)return;if(e.type==="file"){t("update:modelValue",F.target.files);return}const ae=F.target.value;if(f.value===!0)v(ae,!1,F.inputType);else if(C(ae),U.value===!0&&F.target===document.activeElement){const{selectionStart:Ce,selectionEnd:xe}=F.target;Ce!==void 0&&xe!==void 0&&Fe(()=>{F.target===document.activeElement&&ae.indexOf(F.target.value)===0&&F.target.setSelectionRange(Ce,xe)})}e.autogrow===!0&&H()}function C(F,ae){l=()=>{e.type!=="number"&&o.hasOwnProperty("value")===!0&&delete o.value,e.modelValue!==F&&r!==F&&(ae===!0&&(s=!0),t("update:modelValue",F),Fe(()=>{r===F&&(r=NaN)})),l=void 0},e.type==="number"&&(i=!0,o.value=F),e.debounce!==void 0?(clearTimeout(a),o.value=F,a=setTimeout(l,e.debounce)):l()}function H(){const F=u.value;if(F!==null){const ae=F.parentNode.style;ae.marginBottom=F.scrollHeight-1+"px",F.style.height="1px",F.style.height=F.scrollHeight+"px",ae.marginBottom=""}}function W(F){S(F),clearTimeout(a),l!==void 0&&l(),t("change",F.target.value)}function D(F){F!==void 0&&So(F),clearTimeout(a),l!==void 0&&l(),i=!1,s=!1,delete o.value,e.type!=="file"&&setTimeout(()=>{u.value!==null&&(u.value.value=d.value!==void 0?d.value:"")})}function G(){return o.hasOwnProperty("value")===!0?o.value:d.value!==void 0?d.value:""}rt(()=>{D()}),xn(()=>{e.autogrow===!0&&H()}),Object.assign(A,{innerValue:d,fieldClass:w(()=>`q-${T.value===!0?"textarea":"input"}`+(e.autogrow===!0?" q-textarea--autogrow":"")),hasShadow:w(()=>e.type!=="file"&&typeof e.shadowText=="string"&&e.shadowText.length>0),inputRef:u,emitValue:C,hasValue:k,floatingLabel:w(()=>k.value===!0||jr(e.displayValue)),getControl:()=>b(T.value===!0?"textarea":"input",Y(Y(Y({ref:u,class:["q-field__native q-placeholder",e.inputClass],style:e.inputStyle},y.value),x.value),e.type!=="file"?{value:G()}:_.value)),getShadowControl:()=>b("div",{class:"q-field__native q-field__shadow absolute-bottom no-pointer-events"+(T.value===!0?"":" text-no-wrap")},[b("span",{class:"invisible"},G()),b("span",e.shadowText)])});const E=Km(A),K=Te();return Object.assign(K.proxy,{focus:$,select:O,getNativeElement:()=>u.value}),E}});function Qa(e,t){const n=me(null),o=w(()=>e.disable!==!0?null:b("span",{ref:n,class:"no-outline",tabindex:-1}));function r(i){const s=t.value;i!==void 0&&i.type.indexOf("key")===0?s!==null&&document.activeElement!==s&&s.contains(document.activeElement)===!0&&s.focus():n.value!==null&&(i===void 0||s!==null&&s.contains(i.target)===!0)&&n.value.focus()}return{refocusTargetEl:o,refocusTarget:r}}var Ya={xs:30,sm:35,md:40,lg:50,xl:60};const og=b("svg",{key:"svg",class:"q-radio__bg absolute non-selectable",viewBox:"0 0 24 24","aria-hidden":"true"},[b("path",{d:"M12,22a10,10 0 0 1 -10,-10a10,10 0 0 1 10,-10a10,10 0 0 1 10,10a10,10 0 0 1 -10,10m0,-22a12,12 0 0 0 -12,12a12,12 0 0 0 12,12a12,12 0 0 0 12,-12a12,12 0 0 0 -12,-12"}),b("path",{class:"q-radio__check",d:"M12,6a6,6 0 0 0 -6,6a6,6 0 0 0 6,6a6,6 0 0 0 6,-6a6,6 0 0 0 -6,-6"})]);var rg=Oe({name:"QRadio",props:ce(Y(Y(Y({},Qt),kn),vi),{modelValue:{required:!0},val:{required:!0},label:String,leftLabel:Boolean,checkedIcon:String,uncheckedIcon:String,color:String,keepColor:Boolean,dense:Boolean,disable:Boolean,tabindex:[String,Number]}),emits:["update:modelValue"],setup(e,{slots:t,emit:n}){const{proxy:o}=Te(),r=Yt(e,o.$q),i=En(e,Ya),s=me(null),{refocusTargetEl:a,refocusTarget:l}=Qa(e,s),u=w(()=>e.modelValue===e.val),c=w(()=>"q-radio cursor-pointer no-outline row inline no-wrap items-center"+(e.disable===!0?" disabled":"")+(r.value===!0?" q-radio--dark":"")+(e.dense===!0?" q-radio--dense":"")+(e.leftLabel===!0?" reverse":"")),d=w(()=>{const A=e.color!==void 0&&(e.keepColor===!0||u.value===!0)?` text-${e.color}`:"";return`q-radio__inner relative-position q-radio__inner--${u.value===!0?"truthy":"falsy"}${A}`}),f=w(()=>(u.value===!0?e.checkedIcon:e.uncheckedIcon)||null),m=w(()=>e.disable===!0?-1:e.tabindex||0),v=w(()=>{const A={type:"radio"};return e.name!==void 0&&Object.assign(A,{"^checked":u.value===!0?"checked":void 0,name:e.name,value:e.val}),A}),P=Wa(v);function _(A){A!==void 0&&(Ke(A),l(A)),e.disable!==!0&&u.value!==!0&&n("update:modelValue",e.val,A)}function k(A){(A.keyCode===13||A.keyCode===32)&&Ke(A)}function S(A){(A.keyCode===13||A.keyCode===32)&&_(A)}return Object.assign(o,{set:_}),()=>{const A=f.value!==null?[b("div",{key:"icon",class:"q-radio__icon-container absolute-full flex flex-center no-wrap"},[b(mt,{class:"q-radio__icon",name:f.value})])]:[og];e.disable!==!0&&P(A,"unshift"," q-radio__native q-ma-none q-pa-none");const T=[b("div",{class:d.value,style:i.value},A)];a.value!==null&&T.push(a.value);const U=e.label!==void 0?Ft(t.default,[e.label]):tt(t.default);return U!==void 0&&T.push(b("div",{class:"q-radio__label q-anchor--skip"},U)),b("div",{ref:s,class:c.value,tabindex:m.value,role:"radio","aria-label":e.label,"aria-checked":u.value===!0?"true":"false","aria-disabled":e.disable===!0?"true":void 0,onClick:_,onKeydown:k,onKeyup:S},T)}}});const Za=ce(Y(Y(Y({},Qt),kn),vi),{modelValue:{required:!0,default:null},val:{},trueValue:{default:!0},falseValue:{default:!1},indeterminateValue:{default:null},checkedIcon:String,uncheckedIcon:String,indeterminateIcon:String,toggleOrder:{type:String,validator:e=>e==="tf"||e==="ft"},toggleIndeterminate:Boolean,label:String,leftLabel:Boolean,color:String,keepColor:Boolean,dense:Boolean,disable:Boolean,tabindex:[String,Number]}),Ja=["update:modelValue"];function Xa(e,t){const{props:n,slots:o,emit:r,proxy:i}=Te(),{$q:s}=i,a=Yt(n,s),l=me(null),{refocusTargetEl:u,refocusTarget:c}=Qa(n,l),d=En(n,Ya),f=w(()=>n.val!==void 0&&Array.isArray(n.modelValue)),m=w(()=>f.value===!0?n.modelValue.indexOf(n.val):-1),v=w(()=>f.value===!0?m.value>-1:n.modelValue===n.trueValue),P=w(()=>f.value===!0?m.value===-1:n.modelValue===n.falseValue),_=w(()=>v.value===!1&&P.value===!1),k=w(()=>n.disable===!0?-1:n.tabindex||0),S=w(()=>`q-${e} cursor-pointer no-outline row inline no-wrap items-center`+(n.disable===!0?" disabled":"")+(a.value===!0?` q-${e}--dark`:"")+(n.dense===!0?` q-${e}--dense`:"")+(n.leftLabel===!0?" reverse":"")),A=w(()=>{const C=v.value===!0?"truthy":P.value===!0?"falsy":"indet",H=n.color!==void 0&&(n.keepColor===!0||(e==="toggle"?v.value===!0:P.value!==!0))?` text-${n.color}`:"";return`q-${e}__inner relative-position non-selectable q-${e}__inner--${C}${H}`}),T=w(()=>{const C={type:"checkbox"};return n.name!==void 0&&Object.assign(C,{"^checked":v.value===!0?"checked":void 0,name:n.name,value:f.value===!0?n.val:n.trueValue}),C}),U=Wa(T),x=w(()=>{const C={tabindex:k.value,role:"checkbox","aria-label":n.label,"aria-checked":_.value===!0?"mixed":v.value===!0?"true":"false"};return n.disable===!0&&(C["aria-disabled"]="true"),C});function y(C){C!==void 0&&(Ke(C),c(C)),n.disable!==!0&&r("update:modelValue",$(),C)}function $(){if(f.value===!0){if(v.value===!0){const C=n.modelValue.slice();return C.splice(m.value,1),C}return n.modelValue.concat([n.val])}if(v.value===!0){if(n.toggleOrder!=="ft"||n.toggleIndeterminate===!1)return n.falseValue}else if(P.value===!0){if(n.toggleOrder==="ft"||n.toggleIndeterminate===!1)return n.trueValue}else return n.toggleOrder!=="ft"?n.trueValue:n.falseValue;return n.indeterminateValue}function O(C){(C.keyCode===13||C.keyCode===32)&&Ke(C)}function N(C){(C.keyCode===13||C.keyCode===32)&&y(C)}const B=t(v,_);return Object.assign(i,{toggle:y}),()=>{const C=B();n.disable!==!0&&U(C,"unshift",` q-${e}__native absolute q-ma-none q-pa-none`);const H=[b("div",{class:A.value,style:d.value},C)];u.value!==null&&H.push(u.value);const W=n.label!==void 0?Ft(o.default,[n.label]):tt(o.default);return W!==void 0&&H.push(b("div",{class:`q-${e}__label q-anchor--skip`},W)),b("div",ce(Y({ref:l,class:S.value},x.value),{onClick:y,onKeydown:O,onKeyup:N}),H)}}const ig=b("div",{key:"svg",class:"q-checkbox__bg absolute"},[b("svg",{class:"q-checkbox__svg fit absolute-full",viewBox:"0 0 24 24","aria-hidden":"true"},[b("path",{class:"q-checkbox__truthy",fill:"none",d:"M1.73,12.91 8.1,19.28 22.79,4.59"}),b("path",{class:"q-checkbox__indet",d:"M4,14H20V10H4"})])]);var sg=Oe({name:"QCheckbox",props:Za,emits:Ja,setup(e){function t(n,o){const r=w(()=>(n.value===!0?e.checkedIcon:o.value===!0?e.indeterminateIcon:e.uncheckedIcon)||null);return()=>r.value!==null?[b("div",{key:"icon",class:"q-checkbox__icon-container absolute-full flex flex-center no-wrap"},[b(mt,{class:"q-checkbox__icon",name:r.value})])]:[ig]}return Xa("checkbox",t)}}),lg=Oe({name:"QToggle",props:ce(Y({},Za),{icon:String,iconColor:String}),emits:Ja,setup(e){function t(n,o){const r=w(()=>(n.value===!0?e.checkedIcon:o.value===!0?e.indeterminateIcon:e.uncheckedIcon)||e.icon),i=w(()=>n.value===!0?e.iconColor:null);return()=>[b("div",{class:"q-toggle__track"}),b("div",{class:"q-toggle__thumb absolute flex flex-center no-wrap"},r.value!==void 0?[b(mt,{name:r.value,color:i.value})]:void 0)]}return Xa("toggle",t)}});const Ga={radio:rg,checkbox:sg,toggle:lg},ag=Object.keys(Ga);var ug=Oe({name:"QOptionGroup",props:ce(Y({},Qt),{modelValue:{required:!0},options:{type:Array,validator:e=>e.every(t=>"value"in t&&"label"in t)},name:String,type:{default:"radio",validator:e=>ag.includes(e)},color:String,keepColor:Boolean,dense:Boolean,size:String,leftLabel:Boolean,inline:Boolean,disable:Boolean}),emits:["update:modelValue"],setup(e,{emit:t,slots:n}){const{proxy:{$q:o}}=Te(),r=Array.isArray(e.modelValue);e.type==="radio"?r===!0&&console.error("q-option-group: model should not be array"):r===!1&&console.error("q-option-group: model should be array in your case");const i=Yt(e,o),s=w(()=>Ga[e.type]),a=w(()=>"q-option-group q-gutter-x-sm"+(e.inline===!0?" q-option-group--inline":"")),l=w(()=>{const c={};return e.type==="radio"&&(c.role="radiogroup",e.disable===!0&&(c["aria-disabled"]="true")),c});function u(c){t("update:modelValue",c)}return()=>b("div",Y({class:a.value},l.value),e.options.map((c,d)=>{const f=n["label-"+d]!==void 0?()=>n["label-"+d](c):n.label!==void 0?()=>n.label(c):void 0;return b("div",[b(s.value,{modelValue:e.modelValue,val:c.value,name:c.name===void 0?e.name:c.name,disable:e.disable||c.disable,label:f===void 0?c.label:null,leftLabel:c.leftLabel===void 0?e.leftLabel:c.leftLabel,color:c.color===void 0?e.color:c.color,checkedIcon:c.checkedIcon,uncheckedIcon:c.uncheckedIcon,dark:c.dark||i.value,size:c.size===void 0?e.size:c.size,dense:e.dense,keepColor:c.keepColor===void 0?e.keepColor:c.keepColor,"onUpdate:modelValue":u},f)])}))}}),cg=Oe({name:"DialogPlugin",props:ce(Y({},Qt),{title:String,message:String,prompt:Object,options:Object,progress:[Boolean,Object],html:Boolean,ok:{type:[String,Object,Boolean],default:!0},cancel:[String,Object,Boolean],focus:{type:String,default:"ok",validator:e=>["ok","cancel","none"].includes(e)},stackButtons:Boolean,color:String,cardClass:[String,Array,Object],cardStyle:[String,Array,Object]}),emits:["ok","hide"],setup(e,{emit:t}){const{proxy:n}=Te(),{$q:o}=n,r=Yt(e,o),i=me(null),s=me(e.prompt!==void 0?e.prompt.model:e.options!==void 0?e.options.model:void 0),a=w(()=>"q-dialog-plugin"+(r.value===!0?" q-dialog-plugin--dark q-dark":"")+(e.progress!==!1?" q-dialog-plugin--progress":"")),l=w(()=>e.color||(r.value===!0?"amber":"primary")),u=w(()=>e.progress===!1?null:We(e.progress)===!0?{component:e.progress.spinner||pn,props:{color:e.progress.color||l.value}}:{component:pn,props:{color:l.value}}),c=w(()=>e.prompt!==void 0||e.options!==void 0),d=w(()=>{if(c.value!==!0)return{};const K=e.prompt!==void 0?e.prompt:e.options,{model:W,isValid:D,items:G}=K;return Jt(K,["model","isValid","items"])}),f=w(()=>We(e.ok)===!0||e.ok===!0?o.lang.label.ok:e.ok),m=w(()=>We(e.cancel)===!0||e.cancel===!0?o.lang.label.cancel:e.cancel),v=w(()=>e.prompt!==void 0?e.prompt.isValid!==void 0&&e.prompt.isValid(s.value)!==!0:e.options!==void 0?e.options.isValid!==void 0&&e.options.isValid(s.value)!==!0:!1),P=w(()=>ce(Y({color:l.value,label:f.value,ripple:!1,disable:v.value},We(e.ok)===!0?e.ok:{flat:!0}),{"data-autofocus":e.focus==="ok"&&c.value!==!0||void 0,onClick:A})),_=w(()=>ce(Y({color:l.value,label:m.value,ripple:!1},We(e.cancel)===!0?e.cancel:{flat:!0}),{"data-autofocus":e.focus==="cancel"&&c.value!==!0||void 0,onClick:T}));_e(()=>e.prompt&&e.prompt.model,x),_e(()=>e.options&&e.options.model,x);function k(){i.value.show()}function S(){i.value.hide()}function A(){t("ok",he(s.value)),S()}function T(){S()}function U(){t("hide")}function x(W){s.value=W}function y(W){v.value!==!0&&e.prompt.type!=="textarea"&&Jn(W,13)===!0&&A()}function $(W,D){return e.html===!0?b(qn,{class:W,innerHTML:D}):b(qn,{class:W},()=>D)}function O(){return[b(ng,ce(Y({modelValue:s.value},d.value),{color:l.value,dense:!0,autofocus:!0,dark:r.value,"onUpdate:modelValue":x,onKeyup:y}))]}function N(){return[b(ug,ce(Y({modelValue:s.value},d.value),{color:l.value,options:e.options.items,dark:r.value,"onUpdate:modelValue":x}))]}function B(){const W=[];return e.cancel&&W.push(b(Fr,_.value)),e.ok&&W.push(b(Fr,P.value)),b(Sm,{class:e.stackButtons===!0?"items-end":"",vertical:e.stackButtons,align:"right"},()=>W)}function C(){const W=[];return e.title&&W.push($("q-dialog__title",e.title)),e.progress!==!1&&W.push(b(qn,{class:"q-dialog__progress"},()=>b(u.value.component,u.value.props))),e.message&&W.push($("q-dialog__message",e.message)),e.prompt!==void 0?W.push(b(qn,{class:"scroll q-dialog-plugin__form"},O)):e.options!==void 0&&W.push(b(zs,{dark:r.value}),b(qn,{class:"scroll q-dialog-plugin__form"},N),b(zs,{dark:r.value})),(e.ok||e.cancel)&&W.push(B()),W}function H(){return[b(Em,{class:[a.value,e.cardClass],style:e.cardStyle,dark:r.value},C)]}return Object.assign(n,{show:k,hide:S}),()=>b(km,{ref:i,onHide:U},H)}});function eu(e,t){for(const n in t)n!=="spinner"&&Object(t[n])===t[n]?(e[n]=Object(e[n])!==e[n]?{}:Y({},e[n]),eu(e[n],t[n])):e[n]=t[n]}function fg(e,t,n){return o=>{let r,i;const s=t===!0&&o.component!==void 0;if(s===!0){const{component:T,componentProps:U}=o;r=typeof T=="string"?n.component(T):T,i=U}else{const A=o,{class:T,style:U}=A,x=Jt(A,["class","style"]);r=e,i=x,T!==void 0&&(x.cardClass=T),U!==void 0&&(x.cardStyle=U)}let a,l=!1;const u=me(null),c=Ko(),d=T=>{u.value!==null&&u.value[T]!==void 0?u.value[T]():a.$.subTree&&a.$.subTree.component&&a.$.subTree.component.proxy&&a.$.subTree.component.proxy[T]?a.$.subTree.component.proxy[T]():console.error("[Quasar] Incorrectly defined Dialog component")},f=[],m=[],v={onOk(T){return f.push(T),v},onCancel(T){return m.push(T),v},onDismiss(T){return f.push(T),m.push(T),v},hide(){return d("hide"),v},update(T){if(a!==null){if(s===!0)Object.assign(i,T);else{const U=T,{class:x,style:y}=U,$=Jt(U,["class","style"]);x!==void 0&&($.cardClass=x),y!==void 0&&($.cardStyle=y),eu(i,$)}a.$forceUpdate()}return v}},P=T=>{l=!0,f.forEach(U=>{U(T)})},_=()=>{k.unmount(c),hi(c),k=null,a=null,l!==!0&&m.forEach(T=>{T()})};let k=pa({name:"QGlobalDialog",setup:()=>()=>b(r,ce(Y({},i),{ref:u,onOk:P,onHide:_}))},n);a=k.mount(c);function S(){d("show")}return typeof r.__asyncLoader=="function"?r.__asyncLoader().then(()=>{Fe(S)}):Fe(S),v}}var dg={install({$q:e,parentApp:t}){e.dialog=fg(cg,!0,t),this.__installed!==!0&&(this.create=e.dialog)}},hg={config:{},plugins:{Notify:Gh,Loading:cn,Dialog:dg}};const mg="/";async function gg({app:e,router:t,store:n},o){let r=!1;const i=l=>{try{return t.resolve(l).href}catch{}return Object(l)===l?null:l},s=l=>{if(r=!0,typeof l=="string"&&/^https?:\/\//.test(l)){window.location.href=l;return}const u=i(l);u!==null&&(window.location.href=u)},a=window.location.href.replace(window.location.origin,"");for(let l=0;r===!1&&l<o.length;l++)try{await o[l]({app:e,router:t,store:n,ssrContext:null,redirect:s,urlPath:a,publicPath:mg})}catch(u){if(u&&u.url){s(u.url);return}console.error("[Quasar] boot error:",u);return}r!==!0&&(e.use(t),e.mount("#q-app"))}_h(ci,hg).then(e=>Promise.all([Ln(()=>import("./i18n.e52d44e8.js"),[]),Ln(()=>import("./axios.f1d53af5.js"),[])]).then(t=>{const n=t.map(o=>o.default).filter(o=>typeof o=="function");gg(e,n)}));export{jh as $,xg as A,kt as B,So as C,Nf as D,Df as E,Ge as F,Ke as G,um as H,cm as I,lm as J,fm as K,sm as L,qm as M,Ql as N,Rg as O,Ar as P,pm as Q,vo as R,kg as S,ai as T,Tg as U,tm as V,nm as W,Pg as X,Kt as Y,Ft as Z,Vh as _,ii as a,Jn as a0,Io as a1,ld as a2,Jl as a3,Gl as a4,oc as a5,mt as a6,yg as a7,zc as a8,pg as a9,Fc as aa,Fr as ab,bg as ac,_g as ad,ta as ae,Hc as af,Ae as b,w as c,Ve as d,Eg as e,Oe as f,Te as g,b as h,dt as i,tt as j,Tt as k,rt as l,Zn as m,Fe as n,xn as o,Ne as p,Cg as q,me as r,Sg as s,Yt as t,Qt as u,wh as v,_e as w,Se as x,wg as y,jf as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
