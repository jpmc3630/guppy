var ct=Object.defineProperty,dt=Object.defineProperties;var ft=Object.getOwnPropertyDescriptors;var Ee=Object.getOwnPropertySymbols;var vt=Object.prototype.hasOwnProperty,mt=Object.prototype.propertyIsEnumerable;var Oe=(e,n,o)=>n in e?ct(e,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[n]=o,M=(e,n)=>{for(var o in n||(n={}))vt.call(n,o)&&Oe(e,o,n[o]);if(Ee)for(var o of Ee(n))mt.call(n,o)&&Oe(e,o,n[o]);return e},I=(e,n)=>dt(e,ft(n));import{f as E,c as f,h as q,j as H,r as S,k as We,o as U,n as te,l as X,m as Ce,g as V,p as ye,i as _e,q as ie,w as k,s as Ne,u as Se,t as Le,P as ht,v as bt,x as j,y as gt,z as J,A as fe,B as Pe,C as ve,D as pe,E as me,G as Ie,H as yt,I as pt,J as wt,K as qt,L as kt,M as Z,N as Ct,O as Qe,Q as _t,R as je,S as St,U as Lt,V as xt,W as Bt,X as he,Y as ee,a as $t,Z as zt,_ as Tt,$ as Et,a0 as Ot,a1 as Ke,a2 as Ue,a3 as K,a4 as ae,a5 as $,d as B,a6 as Pt,a7 as Qt,a8 as ne,a9 as we,aa as De,ab as Dt,ac as Rt,ad as Mt,ae as Vt,F as Ft,af as Ht}from"./index.bde76bb6.js";var At=E({name:"QToolbarTitle",props:{shrink:Boolean},setup(e,{slots:n}){const o=f(()=>"q-toolbar__title ellipsis"+(e.shrink===!0?" col-shrink":""));return()=>q("div",{class:o.value},H(n.default))}}),Wt=E({name:"QToolbar",props:{inset:Boolean},setup(e,{slots:n}){const o=f(()=>"q-toolbar row no-wrap items-center"+(e.inset===!0?" q-toolbar--inset":""));return()=>q("div",{class:o.value},H(n.default))}});function Nt(){const e=S(!We.value);return e.value===!1&&U(()=>{e.value=!0}),e}const Xe=typeof ResizeObserver!="undefined",Re=Xe===!0?{}:{style:"display:block;position:absolute;top:0;left:0;right:0;bottom:0;height:100%;width:100%;overflow:hidden;pointer-events:none;z-index:-1;",url:"about:blank"};var qe=E({name:"QResizeObserver",props:{debounce:{type:[String,Number],default:100}},emits:["resize"],setup(e,{emit:n}){let o=null,r,t={width:-1,height:-1};function i(c){c===!0||e.debounce===0||e.debounce==="0"?u():o===null&&(o=setTimeout(u,e.debounce))}function u(){if(clearTimeout(o),o=null,r){const{offsetWidth:c,offsetHeight:a}=r;(c!==t.width||a!==t.height)&&(t={width:c,height:a},n("resize",t))}}const m=V();if(Object.assign(m.proxy,{trigger:i}),Xe===!0){let c;return U(()=>{te(()=>{r=m.proxy.$el.parentNode,r&&(c=new ResizeObserver(i),c.observe(r),u())})}),X(()=>{clearTimeout(o),c!==void 0&&(c.disconnect!==void 0?c.disconnect():r&&c.unobserve(r))}),Ce}else{let C=function(){clearTimeout(o),a!==void 0&&(a.removeEventListener!==void 0&&a.removeEventListener("resize",i,ye.passive),a=void 0)},b=function(){C(),r&&r.contentDocument&&(a=r.contentDocument.defaultView,a.addEventListener("resize",i,ye.passive),u())};const c=Nt();let a;return U(()=>{te(()=>{r=m.proxy.$el,r&&b()})}),X(C),()=>{if(c.value===!0)return q("object",{style:Re.style,tabindex:-1,type:"text/html",data:Re.url,"aria-hidden":"true",onLoad:b})}}}}),It=E({name:"QHeader",props:{modelValue:{type:Boolean,default:!0},reveal:Boolean,revealOffset:{type:Number,default:250},bordered:Boolean,elevated:Boolean,heightHint:{type:[String,Number],default:50}},emits:["reveal","focusin"],setup(e,{slots:n,emit:o}){const{proxy:{$q:r}}=V(),t=_e(ie,()=>{console.error("QHeader needs to be child of QLayout")}),i=S(parseInt(e.heightHint,10)),u=S(!0),m=f(()=>e.reveal===!0||t.view.value.indexOf("H")>-1||r.platform.is.ios&&t.isContainer.value===!0),c=f(()=>{if(e.modelValue!==!0)return 0;if(m.value===!0)return u.value===!0?i.value:0;const v=i.value-t.scroll.value.position;return v>0?v:0}),a=f(()=>e.modelValue!==!0||m.value===!0&&u.value!==!0),C=f(()=>e.modelValue===!0&&a.value===!0&&e.reveal===!0),b=f(()=>"q-header q-layout__section--marginal "+(m.value===!0?"fixed":"absolute")+"-top"+(e.bordered===!0?" q-header--bordered":"")+(a.value===!0?" q-header--hidden":"")+(e.modelValue!==!0?" q-layout--prevent-focus":"")),g=f(()=>{const v=t.rows.value.top,L={};return v[0]==="l"&&t.left.space===!0&&(L[r.lang.rtl===!0?"right":"left"]=`${t.left.size}px`),v[2]==="r"&&t.right.space===!0&&(L[r.lang.rtl===!0?"left":"right"]=`${t.right.size}px`),L});function d(v,L){t.update("header",v,L)}function y(v,L){v.value!==L&&(v.value=L)}function _({height:v}){y(i,v),d("size",v)}function p(v){C.value===!0&&y(u,!0),o("focusin",v)}k(()=>e.modelValue,v=>{d("space",v),y(u,!0),t.animate()}),k(c,v=>{d("offset",v)}),k(()=>e.reveal,v=>{v===!1&&y(u,e.modelValue)}),k(u,v=>{t.animate(),o("reveal",v)}),k(t.scroll,v=>{e.reveal===!0&&y(u,v.direction==="up"||v.position<=e.revealOffset||v.position-v.inflectionPoint<100)});const O={};return t.instances.header=O,e.modelValue===!0&&d("size",i.value),d("space",e.modelValue),d("offset",c.value),X(()=>{t.instances.header===O&&(t.instances.header=void 0,d("size",0),d("offset",0),d("space",!1))}),()=>{const v=Ne(n.default,[]);return e.elevated===!0&&v.push(q("div",{class:"q-layout__shadow absolute-full overflow-hidden no-pointer-events"})),v.push(q(qe,{debounce:0,onResize:_})),q("header",{class:b.value,style:g.value,onFocusin:p},v)}}}),ke=E({name:"QItemLabel",props:{overline:Boolean,caption:Boolean,header:Boolean,lines:[Number,String]},setup(e,{slots:n}){const o=f(()=>parseInt(e.lines,10)),r=f(()=>"q-item__label"+(e.overline===!0?" q-item__label--overline text-overline":"")+(e.caption===!0?" q-item__label--caption text-caption":"")+(e.header===!0?" q-item__label--header":"")+(o.value===1?" ellipsis":"")),t=f(()=>e.lines!==void 0&&o.value>1?{overflow:"hidden",display:"-webkit-box","-webkit-box-orient":"vertical","-webkit-line-clamp":o.value}:null);return()=>q("div",{style:t.value,class:r.value},H(n.default))}}),jt=E({name:"QList",props:I(M({},Se),{bordered:Boolean,dense:Boolean,separator:Boolean,padding:Boolean}),setup(e,{slots:n}){const o=V(),r=Le(e,o.proxy.$q),t=f(()=>"q-list"+(e.bordered===!0?" q-list--bordered":"")+(e.dense===!0?" q-list--dense":"")+(e.separator===!0?" q-list--separator":"")+(r.value===!0?" q-list--dark":"")+(e.padding===!0?" q-list--padding":""));return()=>q("div",{class:t.value},H(n.default))}});const xe={left:!0,right:!0,up:!0,down:!0,horizontal:!0,vertical:!0},Kt=Object.keys(xe);xe.all=!0;function Me(e){const n={};for(const o of Kt)e[o]===!0&&(n[o]=!0);return Object.keys(n).length===0?xe:(n.horizontal===!0?n.left=n.right=!0:n.left===!0&&n.right===!0&&(n.horizontal=!0),n.vertical===!0?n.up=n.down=!0:n.up===!0&&n.down===!0&&(n.vertical=!0),n.horizontal===!0&&n.vertical===!0&&(n.all=!0),n)}function Ve(e,n){return n.event===void 0&&e.target!==void 0&&e.target.draggable!==!0&&typeof n.handler=="function"&&e.target.nodeName.toUpperCase()!=="INPUT"&&(e.qClonedBy===void 0||e.qClonedBy.indexOf(n.uid)===-1)}function Ut(){if(window.getSelection!==void 0){const e=window.getSelection();e.empty!==void 0?e.empty():e.removeAllRanges!==void 0&&(e.removeAllRanges(),ht.is.mobile!==!0&&e.addRange(document.createRange()))}else document.selection!==void 0&&document.selection.empty()}function be(e,n,o){const r=pe(e);let t,i=r.left-n.event.x,u=r.top-n.event.y,m=Math.abs(i),c=Math.abs(u);const a=n.direction;a.horizontal===!0&&a.vertical!==!0?t=i<0?"left":"right":a.horizontal!==!0&&a.vertical===!0?t=u<0?"up":"down":a.up===!0&&u<0?(t="up",m>c&&(a.left===!0&&i<0?t="left":a.right===!0&&i>0&&(t="right"))):a.down===!0&&u>0?(t="down",m>c&&(a.left===!0&&i<0?t="left":a.right===!0&&i>0&&(t="right"))):a.left===!0&&i<0?(t="left",m<c&&(a.up===!0&&u<0?t="up":a.down===!0&&u>0&&(t="down"))):a.right===!0&&i>0&&(t="right",m<c&&(a.up===!0&&u<0?t="up":a.down===!0&&u>0&&(t="down")));let C=!1;if(t===void 0&&o===!1){if(n.event.isFirst===!0||n.event.lastDir===void 0)return{};t=n.event.lastDir,C=!0,t==="left"||t==="right"?(r.left-=i,m=0,i=0):(r.top-=u,c=0,u=0)}return{synthetic:C,payload:{evt:e,touch:n.event.mouse!==!0,mouse:n.event.mouse===!0,position:r,direction:t,isFirst:n.event.isFirst,isFinal:o===!0,duration:Date.now()-n.event.time,distance:{x:m,y:c},offset:{x:i,y:u},delta:{x:r.left-n.event.lastX,y:r.top-n.event.lastY}}}}let Xt=0;var ge=bt({name:"touch-pan",beforeMount(e,{value:n,modifiers:o}){if(o.mouse!==!0&&j.has.touch!==!0)return;function r(i,u){o.mouse===!0&&u===!0?Ie(i):(o.stop===!0&&ve(i),o.prevent===!0&&Pe(i))}const t={uid:"qvtp_"+Xt++,handler:n,modifiers:o,direction:Me(o),noop:Ce,mouseStart(i){Ve(i,t)&&gt(i)&&(J(t,"temp",[[document,"mousemove","move","notPassiveCapture"],[document,"mouseup","end","passiveCapture"]]),t.start(i,!0))},touchStart(i){if(Ve(i,t)){const u=i.target;J(t,"temp",[[u,"touchmove","move","notPassiveCapture"],[u,"touchcancel","end","passiveCapture"],[u,"touchend","end","passiveCapture"]]),t.start(i)}},start(i,u){if(j.is.firefox===!0&&fe(e,!0),t.lastEvt=i,u===!0||o.stop===!0){if(t.direction.all!==!0&&(u!==!0||t.modifiers.mouseAllDir!==!0)){const a=i.type.indexOf("mouse")>-1?new MouseEvent(i.type,i):new TouchEvent(i.type,i);i.defaultPrevented===!0&&Pe(a),i.cancelBubble===!0&&ve(a),Object.assign(a,{qKeyEvent:i.qKeyEvent,qClickOutside:i.qClickOutside,qAnchorHandled:i.qAnchorHandled,qClonedBy:i.qClonedBy===void 0?[t.uid]:i.qClonedBy.concat(t.uid)}),t.initialEvent={target:i.target,event:a}}ve(i)}const{left:m,top:c}=pe(i);t.event={x:m,y:c,time:Date.now(),mouse:u===!0,detected:!1,isFirst:!0,isFinal:!1,lastX:m,lastY:c}},move(i){if(t.event===void 0)return;const u=pe(i),m=u.left-t.event.x,c=u.top-t.event.y;if(m===0&&c===0)return;t.lastEvt=i;const a=t.event.mouse===!0,C=()=>{r(i,a),o.preserveCursor!==!0&&(document.documentElement.style.cursor="grabbing"),a===!0&&document.body.classList.add("no-pointer-events--children"),document.body.classList.add("non-selectable"),Ut(),t.styleCleanup=d=>{if(t.styleCleanup=void 0,o.preserveCursor!==!0&&(document.documentElement.style.cursor=""),document.body.classList.remove("non-selectable"),a===!0){const y=()=>{document.body.classList.remove("no-pointer-events--children")};d!==void 0?setTimeout(()=>{y(),d()},50):y()}else d!==void 0&&d()}};if(t.event.detected===!0){t.event.isFirst!==!0&&r(i,t.event.mouse);const{payload:d,synthetic:y}=be(i,t,!1);d!==void 0&&(t.handler(d)===!1?t.end(i):(t.styleCleanup===void 0&&t.event.isFirst===!0&&C(),t.event.lastX=d.position.left,t.event.lastY=d.position.top,t.event.lastDir=y===!0?void 0:d.direction,t.event.isFirst=!1));return}if(t.direction.all===!0||a===!0&&t.modifiers.mouseAllDir===!0){C(),t.event.detected=!0,t.move(i);return}const b=Math.abs(m),g=Math.abs(c);b!==g&&(t.direction.horizontal===!0&&b>g||t.direction.vertical===!0&&b<g||t.direction.up===!0&&b<g&&c<0||t.direction.down===!0&&b<g&&c>0||t.direction.left===!0&&b>g&&m<0||t.direction.right===!0&&b>g&&m>0?(t.event.detected=!0,t.move(i)):t.end(i,!0))},end(i,u){if(t.event!==void 0){if(me(t,"temp"),j.is.firefox===!0&&fe(e,!1),u===!0)t.styleCleanup!==void 0&&t.styleCleanup(),t.event.detected!==!0&&t.initialEvent!==void 0&&t.initialEvent.target.dispatchEvent(t.initialEvent.event);else if(t.event.detected===!0){t.event.isFirst===!0&&t.handler(be(i===void 0?t.lastEvt:i,t).payload);const{payload:m}=be(i===void 0?t.lastEvt:i,t,!0),c=()=>{t.handler(m)};t.styleCleanup!==void 0?t.styleCleanup(c):c()}t.event=void 0,t.initialEvent=void 0,t.lastEvt=void 0}}};e.__qtouchpan=t,o.mouse===!0&&J(t,"main",[[e,"mousedown","mouseStart",`passive${o.mouseCapture===!0?"Capture":""}`]]),j.has.touch===!0&&J(t,"main",[[e,"touchstart","touchStart",`passive${o.capture===!0?"Capture":""}`],[e,"touchmove","noop","notPassiveCapture"]])},updated(e,n){const o=e.__qtouchpan;o!==void 0&&(n.oldValue!==n.value&&(typeof value!="function"&&o.end(),o.handler=n.value),o.direction=Me(n.modifiers))},beforeUnmount(e){const n=e.__qtouchpan;n!==void 0&&(n.event!==void 0&&n.end(),me(n,"main"),me(n,"temp"),j.is.firefox===!0&&fe(e,!1),n.styleCleanup!==void 0&&n.styleCleanup(),delete e.__qtouchpan)}});const Fe=150;var Yt=E({name:"QDrawer",inheritAttrs:!1,props:I(M(M({},yt),Se),{side:{type:String,default:"left",validator:e=>["left","right"].includes(e)},width:{type:Number,default:300},mini:Boolean,miniToOverlay:Boolean,miniWidth:{type:Number,default:57},breakpoint:{type:Number,default:1023},showIfAbove:Boolean,behavior:{type:String,validator:e=>["default","desktop","mobile"].includes(e),default:"default"},bordered:Boolean,elevated:Boolean,overlay:Boolean,persistent:Boolean,noSwipeOpen:Boolean,noSwipeClose:Boolean,noSwipeBackdrop:Boolean}),emits:[...pt,"on-layout","mini-state"],setup(e,{slots:n,emit:o,attrs:r}){const t=V(),{proxy:{$q:i}}=t,u=Le(e,i),{preventBodyScroll:m}=_t(),{registerTimeout:c}=wt(),a=_e(ie,()=>{console.error("QDrawer needs to be child of QLayout")});let C,b,g;const d=S(e.behavior==="mobile"||e.behavior!=="desktop"&&a.totalWidth.value<=e.breakpoint),y=f(()=>e.mini===!0&&d.value!==!0),_=f(()=>y.value===!0?e.miniWidth:e.width),p=S(e.showIfAbove===!0&&d.value===!1?!0:e.modelValue===!0),O=f(()=>e.persistent!==!0&&(d.value===!0||Ye.value===!0));function v(l,h){if(P(),l!==!1&&a.animate(),T(0),d.value===!0){const x=a.instances[Y.value];x!==void 0&&x.belowBreakpoint===!0&&x.hide(!1),D(1),a.isContainer.value!==!0&&m(!0)}else D(0),l!==!1&&se(!1);c(()=>{l!==!1&&se(!0),h!==!0&&o("show",l)},Fe)}function L(l,h){F(),l!==!1&&a.animate(),D(0),T(A.value*_.value),ce(),h!==!0&&c(()=>{o("hide",l)},Fe)}const{show:s,hide:w}=qt({showing:p,hideOnRouteChange:O,handleShow:v,handleHide:L}),{addToHistory:P,removeFromHistory:F}=kt(p,w,O),Q={belowBreakpoint:d,hide:w},z=f(()=>e.side==="right"),A=f(()=>(i.lang.rtl===!0?-1:1)*(z.value===!0?1:-1)),Be=S(0),W=S(!1),oe=S(!1),$e=S(_.value*A.value),Y=f(()=>z.value===!0?"left":"right"),le=f(()=>p.value===!0&&d.value===!1&&e.overlay===!1?e.miniToOverlay===!0?e.miniWidth:_.value:0),re=f(()=>e.overlay===!0||e.miniToOverlay===!0||a.view.value.indexOf(z.value?"R":"L")>-1||i.platform.is.ios===!0&&a.isContainer.value===!0),N=f(()=>e.overlay===!1&&p.value===!0&&d.value===!1),Ye=f(()=>e.overlay===!0&&p.value===!0&&d.value===!1),Ge=f(()=>"fullscreen q-drawer__backdrop"+(p.value===!1&&W.value===!1?" hidden":"")),Je=f(()=>({backgroundColor:`rgba(0,0,0,${Be.value*.4})`})),ze=f(()=>z.value===!0?a.rows.value.top[2]==="r":a.rows.value.top[0]==="l"),Ze=f(()=>z.value===!0?a.rows.value.bottom[2]==="r":a.rows.value.bottom[0]==="l"),et=f(()=>{const l={};return a.header.space===!0&&ze.value===!1&&(re.value===!0?l.top=`${a.header.offset}px`:a.header.space===!0&&(l.top=`${a.header.size}px`)),a.footer.space===!0&&Ze.value===!1&&(re.value===!0?l.bottom=`${a.footer.offset}px`:a.footer.space===!0&&(l.bottom=`${a.footer.size}px`)),l}),tt=f(()=>{const l={width:`${_.value}px`,transform:`translateX(${$e.value}px)`};return d.value===!0?l:Object.assign(l,et.value)}),at=f(()=>"q-drawer__content fit "+(a.isContainer.value!==!0?"scroll":"overflow-auto")),nt=f(()=>`q-drawer q-drawer--${e.side}`+(oe.value===!0?" q-drawer--mini-animate":"")+(e.bordered===!0?" q-drawer--bordered":"")+(u.value===!0?" q-drawer--dark q-dark":"")+(W.value===!0?" no-transition":p.value===!0?"":" q-layout--prevent-focus")+(d.value===!0?" fixed q-drawer--on-top q-drawer--mobile q-drawer--top-padding":` q-drawer--${y.value===!0?"mini":"standard"}`+(re.value===!0||N.value!==!0?" fixed":"")+(e.overlay===!0||e.miniToOverlay===!0?" q-drawer--on-top":"")+(ze.value===!0?" q-drawer--top-padding":""))),it=f(()=>{const l=i.lang.rtl===!0?e.side:Y.value;return[[ge,ut,void 0,{[l]:!0,mouse:!0}]]}),ot=f(()=>{const l=i.lang.rtl===!0?Y.value:e.side;return[[ge,Te,void 0,{[l]:!0,mouse:!0}]]}),lt=f(()=>{const l=i.lang.rtl===!0?Y.value:e.side;return[[ge,Te,void 0,{[l]:!0,mouse:!0,mouseAllDir:!0}]]});function ue(){st(d,e.behavior==="mobile"||e.behavior!=="desktop"&&a.totalWidth.value<=e.breakpoint)}k(d,l=>{l===!0?(C=p.value,p.value===!0&&w(!1)):e.overlay===!1&&e.behavior!=="mobile"&&C!==!1&&(p.value===!0?(T(0),D(0),ce()):s(!1))}),k(()=>e.side,(l,h)=>{a.instances[h]===Q&&(a.instances[h]=void 0,a[h].space=!1,a[h].offset=0),a.instances[l]=Q,a[l].size=_.value,a[l].space=N.value,a[l].offset=le.value}),k(a.totalWidth,()=>{(a.isContainer.value===!0||document.qScrollPrevented!==!0)&&ue()}),k(()=>e.behavior+e.breakpoint,ue),k(a.isContainer,l=>{p.value===!0&&m(l!==!0),l===!0&&ue()}),k(a.scrollbarWidth,()=>{T(p.value===!0?0:void 0)}),k(le,l=>{R("offset",l)}),k(N,l=>{o("on-layout",l),R("space",l)}),k(z,()=>{T()}),k(_,l=>{T(),de(e.miniToOverlay,l)}),k(()=>e.miniToOverlay,l=>{de(l,_.value)}),k(()=>i.lang.rtl,()=>{T()}),k(()=>e.mini,()=>{e.modelValue===!0&&(rt(),a.animate())}),k(y,l=>{o("mini-state",l)});function T(l){l===void 0?te(()=>{l=p.value===!0?0:_.value,T(A.value*l)}):(a.isContainer.value===!0&&z.value===!0&&(d.value===!0||Math.abs(l)===_.value)&&(l+=A.value*a.scrollbarWidth.value),$e.value=l)}function D(l){Be.value=l}function se(l){const h=l===!0?"remove":a.isContainer.value!==!0?"add":"";h!==""&&document.body.classList[h]("q-body--drawer-toggle")}function rt(){clearTimeout(b),t.proxy&&t.proxy.$el&&t.proxy.$el.classList.add("q-drawer--mini-animate"),oe.value=!0,b=setTimeout(()=>{oe.value=!1,t&&t.proxy&&t.proxy.$el&&t.proxy.$el.classList.remove("q-drawer--mini-animate")},150)}function ut(l){if(p.value!==!1)return;const h=_.value,x=Z(l.distance.x,0,h);if(l.isFinal===!0){x>=Math.min(75,h)===!0?s():(a.animate(),D(0),T(A.value*h)),W.value=!1;return}T((i.lang.rtl===!0?z.value!==!0:z.value)?Math.max(h-x,0):Math.min(0,x-h)),D(Z(x/h,0,1)),l.isFirst===!0&&(W.value=!0)}function Te(l){if(p.value!==!0)return;const h=_.value,x=l.direction===e.side,G=(i.lang.rtl===!0?x!==!0:x)?Z(l.distance.x,0,h):0;if(l.isFinal===!0){Math.abs(G)<Math.min(75,h)===!0?(a.animate(),D(1),T(0)):w(),W.value=!1;return}T(A.value*G),D(Z(1-G/h,0,1)),l.isFirst===!0&&(W.value=!0)}function ce(){m(!1),se(!0)}function R(l,h){a.update(e.side,l,h)}function st(l,h){l.value!==h&&(l.value=h)}function de(l,h){R("size",l===!0?e.miniWidth:h)}return a.instances[e.side]=Q,de(e.miniToOverlay,_.value),R("space",N.value),R("offset",le.value),e.showIfAbove===!0&&e.modelValue!==!0&&p.value===!0&&e["onUpdate:modelValue"]!==void 0&&o("update:modelValue",!0),U(()=>{o("on-layout",N.value),o("mini-state",y.value),C=e.showIfAbove===!0;const l=()=>{(p.value===!0?v:L)(!1,!0)};if(a.totalWidth.value!==0){te(l);return}g=k(a.totalWidth,()=>{g(),g=void 0,p.value===!1&&e.showIfAbove===!0&&d.value===!1?s(!1):l()})}),X(()=>{g!==void 0&&g(),clearTimeout(b),p.value===!0&&ce(),a.instances[e.side]===Q&&(a.instances[e.side]=void 0,R("size",0),R("offset",0),R("space",!1))}),()=>{const l=[];d.value===!0&&(e.noSwipeOpen===!1&&l.push(Ct(q("div",{key:"open",class:`q-drawer__opener fixed-${e.side}`,"aria-hidden":"true"}),it.value)),l.push(Qe("div",{ref:"backdrop",class:Ge.value,style:Je.value,"aria-hidden":"true",onClick:w},void 0,"backdrop",e.noSwipeBackdrop!==!0&&p.value===!0,()=>lt.value)));const h=y.value===!0&&n.mini!==void 0,x=[q("div",I(M({},r),{key:""+h,class:[at.value,r.class]}),h===!0?n.mini():H(n.default))];return e.elevated===!0&&p.value===!0&&x.push(q("div",{class:"q-layout__shadow absolute-full overflow-hidden no-pointer-events"})),l.push(Qe("aside",{ref:"content",class:nt.value,style:tt.value},x,"contentclose",e.noSwipeClose!==!0&&d.value===!0,()=>ot.value)),q("div",{class:"q-drawer-container"},l)}}}),Gt=E({name:"QPageContainer",setup(e,{slots:n}){const{proxy:{$q:o}}=V(),r=_e(ie,()=>{console.error("QPageContainer needs to be child of QLayout")});je(St,!0);const t=f(()=>{const i={};return r.header.space===!0&&(i.paddingTop=`${r.header.size}px`),r.right.space===!0&&(i[`padding${o.lang.rtl===!0?"Left":"Right"}`]=`${r.right.size}px`),r.footer.space===!0&&(i.paddingBottom=`${r.footer.size}px`),r.left.space===!0&&(i[`padding${o.lang.rtl===!0?"Right":"Left"}`]=`${r.left.size}px`),i});return()=>q("div",{class:"q-page-container",style:t.value},H(n.default))}});const{passive:He}=ye,Jt=["both","horizontal","vertical"];var Zt=E({name:"QScrollObserver",props:{axis:{type:String,validator:e=>Jt.includes(e),default:"vertical"},debounce:[String,Number],scrollTarget:{default:void 0}},emits:["scroll"],setup(e,{emit:n}){const o={position:{top:0,left:0},direction:"down",directionChanged:!1,delta:{top:0,left:0},inflectionPoint:{top:0,left:0}};let r=null,t,i;k(()=>e.scrollTarget,()=>{c(),m()});function u(){r!==null&&r();const b=Math.max(0,xt(t)),g=Bt(t),d={top:b-o.position.top,left:g-o.position.left};if(e.axis==="vertical"&&d.top===0||e.axis==="horizontal"&&d.left===0)return;const y=Math.abs(d.top)>=Math.abs(d.left)?d.top<0?"up":"down":d.left<0?"left":"right";o.position={top:b,left:g},o.directionChanged=o.direction!==y,o.delta=d,o.directionChanged===!0&&(o.direction=y,o.inflectionPoint=o.position),n("scroll",M({},o))}function m(){t=Lt(i,e.scrollTarget),t.addEventListener("scroll",a,He),a(!0)}function c(){t!==void 0&&(t.removeEventListener("scroll",a,He),t=void 0)}function a(b){if(b===!0||e.debounce===0||e.debounce==="0")u();else if(r===null){const[g,d]=e.debounce?[setTimeout(u,e.debounce),clearTimeout]:[requestAnimationFrame(u),cancelAnimationFrame];r=()=>{d(g),r=null}}}const C=V();return U(()=>{i=C.proxy.$el.parentNode,m()}),X(()=>{r!==null&&r(),c()}),Object.assign(C.proxy,{trigger:a,getPosition:()=>o}),Ce}}),ea=E({name:"QLayout",props:{container:Boolean,view:{type:String,default:"hhh lpr fff",validator:e=>/^(h|l)h(h|r) lpr (f|l)f(f|r)$/.test(e.toLowerCase())},onScroll:Function,onScrollHeight:Function,onResize:Function},setup(e,{slots:n,emit:o}){const{proxy:{$q:r}}=V(),t=S(null),i=S(r.screen.height),u=S(e.container===!0?0:r.screen.width),m=S({position:0,direction:"down",inflectionPoint:0}),c=S(0),a=S(We.value===!0?0:he()),C=f(()=>"q-layout q-layout--"+(e.container===!0?"containerized":"standard")),b=f(()=>e.container===!1?{minHeight:r.screen.height+"px"}:null),g=f(()=>a.value!==0?{[r.lang.rtl===!0?"left":"right"]:`${a.value}px`}:null),d=f(()=>a.value!==0?{[r.lang.rtl===!0?"right":"left"]:0,[r.lang.rtl===!0?"left":"right"]:`-${a.value}px`,width:`calc(100% + ${a.value}px)`}:null);function y(s){if(e.container===!0||document.qScrollPrevented!==!0){const w={position:s.position.top,direction:s.direction,directionChanged:s.directionChanged,inflectionPoint:s.inflectionPoint.top,delta:s.delta.top};m.value=w,e.onScroll!==void 0&&o("scroll",w)}}function _(s){const{height:w,width:P}=s;let F=!1;i.value!==w&&(F=!0,i.value=w,e.onScrollHeight!==void 0&&o("scroll-height",w),O()),u.value!==P&&(F=!0,u.value=P),F===!0&&e.onResize!==void 0&&o("resize",s)}function p({height:s}){c.value!==s&&(c.value=s,O())}function O(){if(e.container===!0){const s=i.value>c.value?he():0;a.value!==s&&(a.value=s)}}let v;const L={instances:{},view:f(()=>e.view),isContainer:f(()=>e.container),rootRef:t,height:i,containerHeight:c,scrollbarWidth:a,totalWidth:f(()=>u.value+a.value),rows:f(()=>{const s=e.view.toLowerCase().split(" ");return{top:s[0].split(""),middle:s[1].split(""),bottom:s[2].split("")}}),header:ee({size:0,offset:0,space:!1}),right:ee({size:300,offset:0,space:!1}),footer:ee({size:0,offset:0,space:!1}),left:ee({size:300,offset:0,space:!1}),scroll:m,animate(){v!==void 0?clearTimeout(v):document.body.classList.add("q-body--layout-animate"),v=setTimeout(()=>{document.body.classList.remove("q-body--layout-animate"),v=void 0},155)},update(s,w,P){L[s][w]=P}};if(je(ie,L),he()>0){let P=function(){s=null,w.classList.remove("hide-scrollbar")},F=function(){if(s===null){if(w.scrollHeight>r.screen.height)return;w.classList.add("hide-scrollbar")}else clearTimeout(s);s=setTimeout(P,300)},Q=function(z){s!==null&&z==="remove"&&(clearTimeout(s),P()),window[`${z}EventListener`]("resize",F)},s=null;const w=document.body;k(()=>e.container!==!0?"add":"remove",Q),e.container!==!0&&Q("add"),$t(()=>{Q("remove")})}return()=>{const s=zt(n.default,[q(Zt,{onScroll:y}),q(qe,{onResize:_})]),w=q("div",{class:C.value,style:b.value,ref:e.container===!0?void 0:t},s);return e.container===!0?q("div",{class:"q-layout-container overflow-hidden",ref:t},[q(qe,{onResize:p}),q("div",{class:"absolute-full",style:g.value},[q("div",{class:"scroll",style:d.value},[w])])]):w}}}),Ae=E({name:"QItemSection",props:{avatar:Boolean,thumbnail:Boolean,side:Boolean,top:Boolean,noWrap:Boolean},setup(e,{slots:n}){const o=f(()=>`q-item__section column q-item__section--${e.avatar===!0||e.side===!0||e.thumbnail===!0?"side":"main"}`+(e.top===!0?" q-item__section--top justify-start":" justify-center")+(e.avatar===!0?" q-item__section--avatar":"")+(e.thumbnail===!0?" q-item__section--thumbnail":"")+(e.noWrap===!0?" q-item__section--nowrap":""));return()=>q("div",{class:o.value},H(n.default))}}),ta=E({name:"QItem",props:I(M(M({},Se),Tt),{tag:{type:String,default:"div"},active:Boolean,clickable:Boolean,dense:Boolean,insetLevel:Number,tabindex:[String,Number],focused:Boolean,manualFocus:Boolean}),emits:["click","keyup"],setup(e,{slots:n,emit:o}){const{proxy:{$q:r}}=V(),t=Le(e,r),{hasRouterLink:i,hasLink:u,linkProps:m,linkClass:c,linkTag:a,navigateToRouterLink:C}=Et(),b=S(null),g=S(null),d=f(()=>e.clickable===!0||u.value===!0||e.tag==="label"),y=f(()=>e.disable!==!0&&d.value===!0),_=f(()=>"q-item q-item-type row no-wrap"+(e.dense===!0?" q-item--dense":"")+(t.value===!0?" q-item--dark":"")+(u.value===!0?c.value:e.active===!0?`${e.activeClass!==void 0?` ${e.activeClass}`:""} q-item--active`:"")+(e.disable===!0?" disabled":"")+(y.value===!0?" q-item--clickable q-link cursor-pointer "+(e.manualFocus===!0?"q-manual-focusable":"q-focusable q-hoverable")+(e.focused===!0?" q-manual-focusable--focused":""):"")),p=f(()=>{if(e.insetLevel===void 0)return null;const s=r.lang.rtl===!0?"Right":"Left";return{["padding"+s]:16+e.insetLevel*56+"px"}});function O(s){y.value===!0&&(g.value!==null&&(s.qKeyEvent!==!0&&document.activeElement===b.value?g.value.focus():document.activeElement===g.value&&b.value.focus()),i.value===!0&&C(s),o("click",s))}function v(s){if(y.value===!0&&Ot(s,13)===!0){Ie(s),s.qKeyEvent=!0;const w=new MouseEvent("click",s);w.qKeyEvent=!0,b.value.dispatchEvent(w)}o("keyup",s)}function L(){const s=Ne(n.default,[]);return y.value===!0&&s.unshift(q("div",{class:"q-focus-helper",tabindex:-1,ref:g})),s}return()=>{const s={ref:b,class:_.value,style:p.value,onClick:O,onKeyup:v};return y.value===!0?(s.tabindex=e.tabindex||"0",Object.assign(s,m.value)):d.value===!0&&(s["aria-disabled"]="true"),q(a.value,s,L())}}});const aa=Ke({name:"EssentialLink",props:{title:{type:String,required:!0},caption:{type:String,default:""},link:{type:String,default:"#"},icon:{type:String,default:""}}});function na(e,n,o,r,t,i){return K(),ae(ta,{clickable:"",tag:"a",target:"_blank",href:e.link},{default:$(()=>[e.icon?(K(),ae(Ae,{key:0,avatar:""},{default:$(()=>[B(Pt,{name:e.icon},null,8,["name"])]),_:1})):Qt("",!0),B(Ae,null,{default:$(()=>[B(ke,null,{default:$(()=>[ne(we(e.title),1)]),_:1}),B(ke,{caption:""},{default:$(()=>[ne(we(e.caption),1)]),_:1})]),_:1})]),_:1},8,["href"])}var ia=Ue(aa,[["render",na]]);const oa=[{title:"Docs",caption:"quasar.dev",icon:"school",link:"https://quasar.dev"},{title:"Github",caption:"github.com/quasarframework",icon:"code",link:"https://github.com/quasarframework"},{title:"Discord Chat Channel",caption:"chat.quasar.dev",icon:"chat",link:"https://chat.quasar.dev"},{title:"Forum",caption:"forum.quasar.dev",icon:"record_voice_over",link:"https://forum.quasar.dev"},{title:"Twitter",caption:"@quasarframework",icon:"rss_feed",link:"https://twitter.quasar.dev"},{title:"Facebook",caption:"@QuasarFramework",icon:"public",link:"https://facebook.quasar.dev"},{title:"Quasar Awesome",caption:"Community Quasar projects",icon:"favorite",link:"https://awesome.quasar.dev"}],la=Ke({name:"MainLayout",components:{EssentialLink:ia},setup(){const e=S(!1);return{essentialLinks:oa,leftDrawerOpen:e,toggleLeftDrawer(){e.value=!e.value}}}}),ra=ne(" Quasar App "),ua=ne(" Essential Links ");function sa(e,n,o,r,t,i){const u=De("EssentialLink"),m=De("router-view");return K(),ae(ea,{view:"lHh Lpr lFf"},{default:$(()=>[B(It,{elevated:""},{default:$(()=>[B(Wt,null,{default:$(()=>[B(Dt,{flat:"",dense:"",round:"",icon:"menu","aria-label":"Menu",onClick:e.toggleLeftDrawer},null,8,["onClick"]),B(At,null,{default:$(()=>[ra]),_:1}),Rt("div",null,"Quasar v"+we(e.$q.version),1)]),_:1})]),_:1}),B(Yt,{modelValue:e.leftDrawerOpen,"onUpdate:modelValue":n[0]||(n[0]=c=>e.leftDrawerOpen=c),"show-if-above":"",bordered:""},{default:$(()=>[B(jt,null,{default:$(()=>[B(ke,{header:""},{default:$(()=>[ua]),_:1}),(K(!0),Mt(Ft,null,Vt(e.essentialLinks,c=>(K(),ae(u,Ht({key:c.title},c),null,16))),128))]),_:1})]),_:1},8,["modelValue"]),B(Gt,null,{default:$(()=>[B(m)]),_:1})]),_:1})}var va=Ue(la,[["render",sa]]);export{va as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
